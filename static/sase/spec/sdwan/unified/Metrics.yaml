components:
  schemas:
    AppStatsAggregate:
      properties:
        name:
          description: 'Name: Required(error = REQUIRED_PROPERTY: Schema check failed
            - {} is a required property) '
          enum: [WanCapacity, PolicyDataTrafficVolume, PolicyDataAppThroughput, WanEngineering,
            PrefixList]
          type: string
        unit: {description: Unit, type: string}
      required: [name]
    AppStatsAggregateData:
      properties:
        data: {type: object}
        end_time: {description: End Time, type: string}
        name:
          description: Name
          enum: [WanCapacity, PolicyDataTrafficVolume, PolicyDataAppThroughput, WanEngineering,
            PrefixList]
          type: string
        start_time: {description: Start Time, type: string}
        unit: {description: Unit, type: string}
    AppStatsAggregateFilter:
      properties:
        app:
          description: 'App: Size(max = 1, error = LENGTH_EXCEEDED: Schema check failed
            - {} is too long, min = 0) '
          items: {description: App, type: string}
          type: array
        element:
          description: 'Element: Size(max = 10, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: Element, type: string}
          type: array
        path:
          description: 'Path: Size(max = 1, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: Path, type: string}
          type: array
        path_type:
          description: 'Path Type: Size(max = 10, error = LENGTH_EXCEEDED: Schema
            check failed - {} is too long, min = 0) '
          items:
            description: Path Type
            enum: [public_direct, public_vpn, private_direct, private_vpn, unknown,
              servicelink]
            type: string
          type: array
        site:
          description: 'Site: Size(max = 1, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: Site, type: string}
          type: array
    AppStatsAggregateQueryResponse:
      properties:
        aggregates:
          description: Aggregates
          items: {$ref: '#/components/schemas/AppStatsAggregateData'}
          type: array
        end_time: {description: End Time, type: string}
        start_time: {description: Start Time, type: string}
    AppStatsAggregatesQuery:
      properties:
        aggregates:
          description: 'Aggregates: Size(max = 10, error = LENGTH_EXCEEDED: Schema
            check failed - {} is too long, min = 1) Valid Required(error = REQUIRED_PROPERTY:
            Schema check failed - {} is a required property) '
          items: {$ref: '#/components/schemas/AppStatsAggregate'}
          type: array
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/AppStatsAggregateFilter', description: 'Filter:
            Valid '}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
      required: [aggregates]
    AppStatsSupportedAggregate:
      properties:
        description: {description: Description, type: string}
        name: {description: Name, type: string}
        units:
          description: Units
          items: {description: Units, type: string}
          type: array
    AppStatsSupportedAggregatesResponse:
      properties:
        aggregates:
          description: Aggregates
          items: {$ref: '#/components/schemas/AppStatsSupportedAggregate'}
          type: array
    AppStatsTopNFilter:
      properties:
        app:
          description: 'App: Size(max = 10, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: App, type: string}
          type: array
        element:
          description: 'Element: Size(max = 10, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: Element, type: string}
          type: array
        path:
          description: 'Path: Size(max = 10, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: Path, type: string}
          type: array
        path_type:
          description: 'Path Type: Size(max = 10, error = PATH_TYPE_LIST_LENGTH_EXCEEDED:
            Maximum number of allowed path_types is 10, min = 0) '
          items:
            description: Path Type
            enum: [public_direct, public_vpn, private_direct, private_vpn, unknown,
              servicelink]
            type: string
          type: array
        site:
          description: 'Site: Size(max = 10, error = LENGTH_EXCEEDED: Schema check
            failed - {} is too long, min = 0) '
          items: {description: Site, type: string}
          type: array
        waninterface:
          description: 'Waninterface: Size(max = 10, error = LENGTH_EXCEEDED: Schema
            check failed - {} is too long, min = 0) '
          items: {description: Waninterface, type: string}
          type: array
    AppStatsTopNQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/AppStatsTopNFilter', description: 'Filter:
            Valid '}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        top_n: {$ref: '#/components/schemas/AppStatsTopNView', description: 'Top N:
            Required(error = REQUIRED_PROPERTY: Schema check failed - {} is a required
            property) Valid '}
        topn_basis:
          description: 'Topn Basis: Required(error = REQUIRED_PROPERTY: Schema check
            failed - {} is a required property) '
          enum: [traffic_volume, transaction_failure, initiation_failure, tcp_flow,
            udp_flow, audio_traffic_volume, video_traffic_volume, ingress_audio_pkt_loss,
            egress_audio_pkt_loss, ingress_video_pkt_loss, egress_video_pkt_loss,
            ingress_audio_jitter, egress_audio_jitter, ingress_video_jitter, egress_video_jitter,
            ingress_audio_mos, egress_audio_mos]
          type: string
      required: [topn_basis, top_n]
    AppStatsTopNResponse:
      properties:
        top_n: {$ref: '#/components/schemas/AppStatsTopNResponseData', description: Top
            N}
    AppStatsTopNResponseData:
      properties:
        end_time: {description: End Time, type: string}
        items:
          description: Items
          items: {description: Items, type: string}
          type: array
        limit: {description: Limit, type: integer}
        start_time: {description: Start Time, type: string}
        topn_basis:
          description: Topn Basis
          enum: [traffic_volume, transaction_failure, initiation_failure, tcp_flow,
            udp_flow, audio_traffic_volume, video_traffic_volume, ingress_audio_pkt_loss,
            egress_audio_pkt_loss, ingress_video_pkt_loss, egress_video_pkt_loss,
            ingress_audio_jitter, egress_audio_jitter, ingress_video_jitter, egress_video_jitter,
            ingress_audio_mos, egress_audio_mos]
          type: string
        type:
          description: Type
          enum: [app, site]
          type: string
    AppStatsTopNView:
      properties:
        limit: {description: 'Limit: Min(error = INVALID_LIMIT: Limit should be between
            1 and 10, value = 1L) Max(error = INVALID_LIMIT: Limit should be between
            1 and 10, value = 10L) ', type: integer}
        type:
          description: 'Type: Required(error = REQUIRED_PROPERTY: Schema check failed
            - {} is a required property) '
          enum: [app, site]
          type: string
      required: [type]
    BaseTopNQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {type: object}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        top_n: {$ref: '#/components/schemas/BaseTopNView', description: 'Top N: Required(error
            = REQUIRED_PROPERTY: Schema check failed - {} is a required property)
            Valid '}
        topn_basis: {description: 'Topn Basis: Required(error = REQUIRED_PROPERTY:
            Schema check failed - {} is a required property) ', type: string}
      required: [topn_basis, top_n]
    BaseTopNResponse:
      properties:
        top_n: {$ref: '#/components/schemas/BaseTopNResponseData', description: Top
            N}
    BaseTopNResponseData:
      properties:
        end_time: {description: End Time, type: string}
        items:
          description: Items
          items: {description: Items, type: string}
          type: array
        limit: {description: Limit, type: integer}
        start_time: {description: Start Time, type: string}
        topn_basis: {description: Topn Basis, type: string}
        type: {description: Type, type: string}
    BaseTopNView:
      properties:
        limit: {description: 'Limit: Min(error = INVALID_LIMIT: Limit should be between
            1 and 10, value = 1L) Max(error = INVALID_LIMIT: Limit should be between
            1 and 10, value = 10L) ', type: integer}
        type: {description: 'Type: Required(error = REQUIRED_PROPERTY: Schema check
            failed - {} is a required property) ', type: string}
      required: [type]
    CellularmetricsFilter:
      properties:
        apn:
          description: Apn
          items: {description: Apn, type: string}
          type: array
        carrier:
          description: Carrier
          items: {description: Carrier, type: string}
          type: array
        cellular_module:
          description: Cellular Module
          items: {description: Cellular Module, type: string}
          type: array
        direction:
          description: Direction
          enum: [Ingress, Egress]
          type: string
        element:
          description: Element
          items: {description: Element, type: string}
          type: array
        site:
          description: Site
          items: {description: Site, type: string}
          type: array
    CellularmetricsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/CellularmetricsFilter', description: Filter}
        interval:
          description: 'Interval: Required(error = REQUIRED_PROPERTY: Schema check
            failed - {} is a required property) '
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        max_datapoints: {description: Max Datapoints, format: int32, type: integer}
        metrics:
          description: 'Metrics: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 0, error = INVALID_FILTER: Schema
            check failed - Invalid value for param {}, required = true) '
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
      required: [interval, metrics]
    CellularmetricsResponse:
      properties:
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
    CellularmetricsSchemaResponse:
      properties:
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/MetricSchema'}
          type: array
    Data:
      properties:
        datapoints:
          description: Datapoints
          items: {$ref: '#/components/schemas/Datapoints'}
          type: array
        statistics: {description: Statistics, type: object}
    Datapoints:
      properties:
        duration: {format: date-time, type: string}
        filter_property_id: {description: Filter Property Id, type: string}
        value: {description: 'Value: JsonInclude(content = ALWAYS, contentFilter =
            classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', type: number}
    Error:
      properties:
        _error:
          items: {$ref: '#/components/schemas/ErrorResponse'}
          type: array
    ErrorResponse:
      properties:
        code: {type: string}
        message: {type: string}
    Filter:
      properties:
        elements:
          description: Elements
          items: {description: Elements, type: string}
          type: array
        path:
          description: Path
          items: {description: Path, type: string}
          type: array
        site: {description: Site, type: object}
        type: {description: Type, type: string}
    FlowDecisionMetadata:
      properties:
        available_wan_networks:
          description: 'Available Wan Networks: JsonAlias(value = [bw_paths]) JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) '
          items: {description: Available Wan Networks, type: string}
          type: array
        chosen_wan_path: {description: 'Chosen Wan Path: JsonAlias(value = [path_id]) ',
          type: string}
        flow_decision_bitmap:
          description: 'Flow Decision Bitmap: JsonAlias(value = [bitmap]) JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) '
          items: {description: Flow Decision Bitmap, format: int64, type: integer}
          type: array
        flow_decision_time: {description: 'Flow Decision Time: JsonAlias(value = [time]) ',
          format: int64, type: integer}
        policy_allowed_wan_paths:
          description: 'Policy Allowed Wan Paths: JsonAlias(value = [policy_paths])
            JsonInclude(content = ALWAYS, contentFilter = classOf[Void], value = ALWAYS,
            valueFilter = classOf[Void]) '
          items: {description: Policy Allowed Wan Paths, type: string}
          type: array
        predictive_wan_network_normalized_load:
          description: 'Predictive Wan Network Normalized Load: JsonAlias(value =
            [bw_values]) JsonInclude(content = ALWAYS, contentFilter = classOf[Void],
            value = ALWAYS, valueFilter = classOf[Void]) '
          items: {description: Predictive Wan Network Normalized Load, type: string}
          type: array
        preferred_wan_path: {description: 'Preferred Wan Path: JsonAlias(value = [pref_wan_path])
            JsonInclude(content = ALWAYS, contentFilter = classOf[Void], value = ALWAYS,
            valueFilter = classOf[Void]) ', type: string}
        sla_filtered_state_up_policy_allowed_wan_paths:
          description: 'Sla Filtered State Up Policy Allowed Wan Paths: JsonAlias(value
            = [policy_l2l3_sla_paths]) JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) '
          items: {description: Sla Filtered State Up Policy Allowed Wan Paths, type: string}
          type: array
        state_up_policy_allowed_wan_paths:
          description: 'State Up Policy Allowed Wan Paths: JsonAlias(value = [policy_l2l3_paths])
            JsonInclude(content = ALWAYS, contentFilter = classOf[Void], value = ALWAYS,
            valueFilter = classOf[Void]) '
          items: {description: State Up Policy Allowed Wan Paths, type: string}
          type: array
    FlowDetails:
      properties:
        app_id: {description: App Id, type: string}
        average_ntt: {description: 'Average Ntt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        average_pg: {description: 'Average Pg: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        average_rtt: {description: 'Average Rtt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        average_srt: {description: 'Average Srt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        average_udp_trt: {description: 'Average Udp Trt: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          format: float, type: number}
        avg_jitter_c2s: {description: 'Avg Jitter C2s: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          format: float, type: number}
        avg_jitter_s2c: {description: 'Avg Jitter S2c: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          format: float, type: number}
        avg_mos_c2s: {description: 'Avg Mos C2s: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        avg_mos_s2c: {description: 'Avg Mos S2c: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        avg_packet_loss_c2s: {description: 'Avg Packet Loss C2s: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', format: float, type: number}
        avg_packet_loss_s2c: {description: 'Avg Packet Loss S2c: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', format: float, type: number}
        bytes_c2s: {description: Bytes C2s, format: int64, type: integer}
        bytes_s2c: {description: Bytes S2c, format: int64, type: integer}
        codec_c2s:
          description: 'Codec C2s: JsonInclude(content = ALWAYS, contentFilter = classOf[Void],
            value = ALWAYS, valueFilter = classOf[Void]) '
          items: {description: Codec C2s, format: int64, type: integer}
          type: array
        codec_s2c:
          description: 'Codec S2c: JsonInclude(content = ALWAYS, contentFilter = classOf[Void],
            value = ALWAYS, valueFilter = classOf[Void]) '
          items: {description: Codec S2c, format: int64, type: integer}
          type: array
        destination_ip: {description: Destination Ip, type: string}
        destination_lan_network_id: {description: Destination Lan Network Id, type: string}
        destination_lan_vlan_id: {description: Destination Lan Vlan Id, type: integer}
        destination_port: {description: Destination Port, type: integer}
        element_id: {description: Element Id, type: string}
        fc_app_id: {description: Fc App Id, type: string}
        fin_c2s: {description: Fin C2s, format: int64, type: integer}
        fin_s2c: {description: Fin S2c, format: int64, type: integer}
        flow_action: {description: Flow Action, type: string}
        flow_decision_metadata_list:
          description: Flow Decision Metadata List
          items: {$ref: '#/components/schemas/FlowDecisionMetadata'}
          type: array
        flow_end_time_ms: {description: Flow End Time Ms, format: int64, type: integer}
        flow_start_time_ms: {description: Flow Start Time Ms, format: int64, type: integer}
        incomplete_trans: {description: 'Incomplete Trans: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          format: int64, type: integer}
        init_success: {description: 'Init Success: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', type: boolean}
        is_local_traffic: {description: Is Local Traffic, type: boolean}
        is_sec_policy_present: {description: Is Sec Policy Present, type: boolean}
        lan_dscp_lan_to_wan:
          description: 'Lan Dscp Lan To Wan: JsonDeserialize(as = classOf[Void], builder
            = classOf[Void], contentAs = classOf[Void], contentConverter = classOf[Converter$None],
            contentUsing = classOf[JsonDeserializer$None], converter = classOf[Converter$None],
            keyAs = classOf[Void], keyUsing = classOf[KeyDeserializer$None], using
            = classOf[CustomGetSetPositionsDeserializer]) '
          items: {description: Lan Dscp Lan To Wan, type: integer}
          type: array
        lan_dscp_wan_to_lan:
          description: 'Lan Dscp Wan To Lan: JsonDeserialize(as = classOf[Void], builder
            = classOf[Void], contentAs = classOf[Void], contentConverter = classOf[Converter$None],
            contentUsing = classOf[JsonDeserializer$None], converter = classOf[Converter$None],
            keyAs = classOf[Void], keyUsing = classOf[KeyDeserializer$None], using
            = classOf[CustomGetSetPositionsDeserializer]) '
          items: {description: Lan Dscp Wan To Lan, type: integer}
          type: array
        lan_origination_id: {description: Lan Origination Id, type: string}
        lan_termination_id: {description: Lan Termination Id, type: string}
        lan_to_wan: {description: Lan To Wan, type: boolean}
        max_jitter_c2s: {description: 'Max Jitter C2s: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          format: float, type: number}
        max_jitter_s2c: {description: 'Max Jitter S2c: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          format: float, type: number}
        max_mos_c2s: {description: 'Max Mos C2s: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        max_mos_s2c: {description: 'Max Mos S2c: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        max_ntt: {description: 'Max Ntt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        max_packet_loss_c2s: {description: 'Max Packet Loss C2s: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', format: float, type: number}
        max_packet_loss_s2c: {description: 'Max Packet Loss S2c: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', format: float, type: number}
        max_pg: {description: 'Max Pg: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        max_rtt: {description: 'Max Rtt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        max_srt: {description: 'Max Srt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        max_udp_trt: {description: 'Max Udp Trt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        media_type: {description: 'Media Type: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', type: string}
        min_mos_c2s: {description: 'Min Mos C2s: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        min_mos_s2c: {description: 'Min Mos S2c: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        min_ntt: {description: 'Min Ntt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        min_pg: {description: 'Min Pg: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        min_rtt: {description: 'Min Rtt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        min_srt: {description: 'Min Srt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        min_udp_trt: {description: 'Min Udp Trt: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', format: float,
          type: number}
        network_policy_dst_prefix_id: {description: Network Policy Dst Prefix Id,
          type: string}
        network_policy_id: {description: Network Policy Id, type: string}
        network_policy_nctx_id: {description: Network Policy Nctx Id, type: string}
        network_policy_set_id: {description: Network Policy Set Id, type: string}
        network_policy_src_prefix_id: {description: Network Policy Src Prefix Id,
          type: string}
        network_policy_stack_id: {description: Network Policy Stack Id, type: string}
        new_flow: {description: New Flow, type: boolean}
        ooo_pkts_c2s: {description: Ooo Pkts C2s, format: int64, type: integer}
        ooo_pkts_s2c: {description: Ooo Pkts S2c, format: int64, type: integer}
        packets_c2s: {description: Packets C2s, format: int64, type: integer}
        packets_s2c: {description: Packets S2c, format: int64, type: integer}
        path_id: {description: Path Id, type: string}
        path_type: {description: Path Type, type: string}
        policy_id: {description: Policy Id, type: string}
        priority_class: {description: 'Priority Class: JsonInclude(content = ALWAYS,
            contentFilter = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ',
          type: integer}
        priority_policy_default_rule_mapping_incoming_dscp: {description: Priority
            Policy Default Rule Mapping Incoming Dscp, format: int64, type: integer}
        priority_policy_dst_prefix_id: {description: Priority Policy Dst Prefix Id,
          type: string}
        priority_policy_id: {description: Priority Policy Id, type: string}
        priority_policy_nctx_id: {description: Priority Policy Nctx Id, type: string}
        priority_policy_remark_dscp: {description: Priority Policy Remark Dscp, format: int64,
          type: integer}
        priority_policy_set_id: {description: Priority Policy Set Id, type: string}
        priority_policy_src_prefix_id: {description: Priority Policy Src Prefix Id,
          type: string}
        priority_policy_stack_id: {description: Priority Policy Stack Id, type: string}
        protocol: {description: Protocol, type: integer}
        reset_c2s: {description: Reset C2s, format: int64, type: integer}
        reset_s2c: {description: Reset S2c, format: int64, type: integer}
        retransmit_bytes_c2s: {description: Retransmit Bytes C2s, format: int64, type: integer}
        retransmit_bytes_s2c: {description: Retransmit Bytes S2c, format: int64, type: integer}
        retransmit_pkts_c2s: {description: Retransmit Pkts C2s, format: int64, type: integer}
        retransmit_pkts_s2c: {description: Retransmit Pkts S2c, format: int64, type: integer}
        sack_pkts_c2s: {description: Sack Pkts C2s, format: int64, type: integer}
        sack_pkts_s2c: {description: Sack Pkts S2c, format: int64, type: integer}
        sec_fc_app_id:
          description: Sec Fc App Id
          items: {description: Sec Fc App Id, type: string}
          type: array
        security_policy_rules:
          description: 'Security Policy Rules: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = NON_EMPTY, valueFilter = classOf[Void]) '
          items: {$ref: '#/components/schemas/SecurityPolicyRules'}
          type: array
        service_endpoint_id: {description: 'Service Endpoint Id: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', type: string}
        source_ip: {description: Source Ip, type: string}
        source_lan_network_id: {description: Source Lan Network Id, type: string}
        source_lan_vlan_id: {description: Source Lan Vlan Id, type: integer}
        source_port: {description: Source Port, type: integer}
        success_transactions: {description: 'Success Transactions: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', format: int64, type: integer}
        syn_c2s: {description: Syn C2s, format: int64, type: integer}
        syn_s2c: {description: Syn S2c, format: int64, type: integer}
        traffic_type: {description: 'Traffic Type: JsonInclude(content = ALWAYS, contentFilter
            = classOf[Void], value = ALWAYS, valueFilter = classOf[Void]) ', type: string}
        unknown_domain: {description: Unknown Domain, type: string}
        unknown_reason: {description: Unknown Reason, type: string}
        vlan_id: {description: Vlan Id, type: integer}
        wan_path_change_reason: {description: 'Wan Path Change Reason: JsonInclude(content
            = ALWAYS, contentFilter = classOf[Void], value = ALWAYS, valueFilter =
            classOf[Void]) ', type: string}
        waninterface_id: {description: Waninterface Id, type: string}
        win_scaler_c2s: {description: Win Scaler C2s, format: int64, type: integer}
        win_scaler_s2c: {description: Win Scaler S2c, format: int64, type: integer}
        win_size_c2s: {description: Win Size C2s, format: int64, type: integer}
        win_size_s2c: {description: Win Size S2c, format: int64, type: integer}
    FlowTupple:
      properties:
        destination_ip:
          description: Destination Ip
          items: {description: Destination Ip, type: string}
          type: array
        destination_port:
          description: Destination Port
          items: {description: Destination Port, type: integer}
          type: array
        protocol: {description: Protocol, type: integer}
        source_ip:
          description: Source Ip
          items: {description: Source Ip, type: string}
          type: array
        source_port:
          description: Source Port
          items: {description: Source Port, type: integer}
          type: array
    Flows:
      properties:
        debug_level: {description: Debug Level, type: string}
        end_time: {description: End Time, type: string}
        items:
          description: Items
          items: {$ref: '#/components/schemas/FlowDetails'}
          type: array
        start_time: {description: Start Time, type: string}
    FlowsFilter:
      properties:
        app:
          description: App
          items: {description: App, type: string}
          type: array
        element:
          description: Element
          items: {description: Element, type: string}
          type: array
        flow: {$ref: '#/components/schemas/FlowTupple', description: Flow}
        flow_type:
          description: Flow Type
          enum: [local, wan, all]
          type: string
        path:
          description: Path
          items: {description: Path, type: string}
          type: array
        path_type:
          description: Path Type
          items:
            description: Path Type
            enum: [public_direct, public_vpn, private_direct, private_vpn, unknown,
              servicelink]
            type: string
          type: array
        security_policy_destination_zone:
          description: Security Policy Destination Zone
          items: {description: Security Policy Destination Zone, type: string}
          type: array
        security_policy_rule:
          description: Security Policy Rule
          items: {description: Security Policy Rule, type: string}
          type: array
        security_policy_rule_action:
          description: Security Policy Rule Action
          enum: [allow, deny, reject]
          type: string
        security_policy_source_zone:
          description: Security Policy Source Zone
          items: {description: Security Policy Source Zone, type: string}
          type: array
        site:
          description: Site
          items: {description: Site, type: string}
          type: array
        waninterface:
          description: Waninterface
          items: {description: Waninterface, type: string}
          type: array
    FlowsQuery:
      properties:
        debug_level:
          description: Debug Level
          enum: [summary, tcp-flags, traffic, all]
          type: string
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/FlowsFilter', description: Filter}
        max_datapoints: {description: Max Datapoints, type: integer}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
    FlowsQueryResponse:
      properties:
        flows: {$ref: '#/components/schemas/Flows', description: Flows}
    LqmStatsAggregateHealthScoreRequest:
      properties:
        aggregation:
          description: 'Aggregation: Required(error = AGGREGATION_REQUIRED: Aggregate
            is a required field) '
          enum: [min, max, avg]
          type: string
        end_time: {format: date, type: string}
        healthscore_type:
          description: 'Healthscore Type: Required(error = HEALTHSCORE_TYPE_REQUIRED:
            Healthscore type is a required field) '
          enum: [Site, Circuit, AnynetLink]
          type: string
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
      required: [healthscore_type, aggregation]
    LqmStatsAggregateHealthScoreResponse:
      properties:
        aggregation:
          description: Aggregation
          enum: [min, max, avg]
          type: string
        end_time: {description: End Time, type: string}
        healthscore_type:
          description: Healthscore Type
          enum: [Site, Circuit, AnynetLink]
          type: string
        items:
          description: Items
          items: {$ref: '#/components/schemas/LqmStatsHealthScoreAggregateData'}
          type: array
        start_time: {description: Start Time, type: string}
    LqmStatsClientHealthScoreAggregateData:
      properties:
        value: {description: Value, format: int32, type: integer}
    LqmStatsHealthScoreAggregateData:
      properties:
        count: {description: Count, format: int32, type: integer}
        data:
          description: Data
          items: {$ref: '#/components/schemas/LqmStatsClientHealthScoreAggregateData'}
          type: array
        health:
          description: Health
          enum: [others, poor, fair, good]
          type: string
    MetricSchema:
      properties:
        description: {description: Description, type: string}
        name: {description: Name, type: string}
        statistics:
          description: Statistics
          items: {description: Statistics, type: string}
          type: array
        units:
          description: Units
          items: {description: Units, type: string}
          type: array
    MetricSchemaResponse:
      properties:
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/MetricSchema'}
          type: array
    Metrics:
      properties:
        series:
          description: Series
          items: {$ref: '#/components/schemas/Series'}
          type: array
    MonitorMetricsFilter:
      properties:
        anynet_link:
          description: Anynet Link
          items: {description: Anynet Link, type: string}
          type: array
        app:
          description: App
          items: {description: App, type: string}
          type: array
        direction:
          description: Direction
          enum: [Ingress, Egress]
          type: string
        element:
          description: Element
          items: {description: Element, type: string}
          type: array
        path:
          description: Path
          items: {description: Path, type: string}
          type: array
        path_type:
          description: Path Type
          items:
            description: Path Type
            enum: [public_direct, public_vpn, private_direct, private_vpn, unknown,
              servicelink]
            type: string
          type: array
        remote_site:
          description: Remote Site
          items: {description: Remote Site, type: string}
          type: array
        site:
          description: Site
          items: {description: Site, type: string}
          type: array
        sprid: {description: Sprid, type: string}
        waninterface:
          description: Waninterface
          items: {description: Waninterface, type: string}
          type: array
    MonitorMetricsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/MonitorMetricsFilter', description: Filter}
        interval:
          description: 'Interval: Required(error = REQUIRED_PROPERTY: Schema check
            failed - {} is a required property) '
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        max_datapoints: {description: Max Datapoints, format: int32, type: integer}
        metrics:
          description: 'Metrics: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 0, error = INVALID_FILTER: Schema
            check failed - Invalid value for param {}, required = true) '
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
      required: [interval, metrics]
    MonitorMetricsResponse:
      properties:
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
    MulticastRouteIncomingInterface:
      properties:
        iif: {description: Iif, type: string}
        is_site_interface: {description: Is Site Interface, type: boolean}
        wanpath: {description: Wanpath, type: string}
    MulticastRouteOutgoingInterface:
      properties:
        is_site_interface: {description: Is Site Interface, type: boolean}
        oif: {description: Oif, type: string}
        wanpaths:
          description: Wanpaths
          items: {description: Wanpaths, type: string}
          type: array
    MulticastRouteOutgoingInterfaceStatsData:
      properties:
        is_site_interface: {description: Is Site Interface, type: boolean}
        oif: {description: Oif, type: string}
        wanpaths:
          description: Wanpaths
          items: {$ref: '#/components/schemas/MulticastRouteWanpathStatsData'}
          type: array
    MulticastRouteOutgoingInterfaceStatsResponse:
      properties:
        end_time: {description: End Time, type: string}
        oif_list:
          description: Oif List
          items: {$ref: '#/components/schemas/MulticastRouteOutgoingInterfaceStatsData'}
          type: array
        start_time: {description: Start Time, type: string}
    MulticastRouteSourceGroupStatsData:
      properties:
        flags: {description: Flags, type: string}
        group: {description: Group, type: string}
        incoming_interface: {$ref: '#/components/schemas/MulticastRouteIncomingInterface',
          description: Incoming Interface}
        outgoing_interfaces:
          description: Outgoing Interfaces
          items: {$ref: '#/components/schemas/MulticastRouteOutgoingInterface'}
          type: array
        rx_bytes: {description: Rx Bytes, format: int64, type: integer}
        rx_packets: {description: Rx Packets, format: int64, type: integer}
        source: {description: Source, type: string}
    MulticastRouteSourceGroupStatsResponse:
      properties:
        end_time: {description: End Time, type: string}
        source_group_list:
          description: Source Group List
          items: {$ref: '#/components/schemas/MulticastRouteSourceGroupStatsData'}
          type: array
        start_time: {description: Start Time, type: string}
    MulticastRouteStatsFilter:
      properties:
        element:
          description: 'Element: Required(error = MULTICAST_QUERY_MISSING_ELEMENT_ID:
            Element ID is required) ListString(allowDuplicate = true, allowEmpty =
            true, allowNull = false, length = 0, listMaxSize = 1, error = MULTICAST_QUERY_INVALID_ELEMENT_ID:
            Provide single valid element ID in filter, noTrim = false, regex = ^[0-9]{1,20}$,
            required = true) '
          items: {description: Element, type: string}
          type: array
        group:
          description: 'Group: ListIPAddress(bcast = DENY, listMaxSize = 1, error
            = MULTICAST_MROUTE_QUERY_INVALID_GROUP_IP: Provide single valid group
            ip in filter, required = false, type = IP) '
          items: {description: Group, type: string}
          type: array
        site:
          description: 'Site: Required(error = MULTICAST_QUERY_MISSING_SITE_ID: Site
            ID is required) ListString(allowDuplicate = true, allowEmpty = true, allowNull
            = false, length = 0, listMaxSize = 1, error = MULTICAST_QUERY_INVALID_SITE_ID:
            Provide single valid site ID in filter, noTrim = false, regex = ^[0-9]{1,20}$,
            required = true) '
          items: {description: Site, type: string}
          type: array
        source:
          description: 'Source: ListString(allowDuplicate = true, allowEmpty = true,
            allowNull = false, length = 0, listMaxSize = 1, error = MULTICAST_MROUTE_QUERY_INVALID_SOURCE_IP:
            Provide single valid source ip in filter, noTrim = false, regex = , required
            = false) '
          items: {description: Source, type: string}
          type: array
      required: [source, site, element]
    MulticastRouteStatsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/MulticastRouteStatsFilter', description: 'Filter:
            Required(error = MULTICAST_QUERY_MISSING_FILTER: Filter field is required)
            Valid '}
        is_active: {description: 'Is Active: Required(error = MULTICAST_MROUTE_QUERY_MISSING_IS_ACTIVE:
            is_active field is required) ', type: boolean}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        type:
          description: 'Type: ValidateEnum(enumClass = classOf[MulticastRouteType],
            error = MULTICAST_MROUTE_QUERY_MISSING_TYPE: type field is either missing
            or unsupported value is provided, nullAllowed = false) '
          enum: [WAN, LAN]
          type: string
      required: [is_active, type, filter]
    MulticastRouteWanpathStatsData:
      properties:
        last_active: {format: date, type: string}
        tx_bytes: {description: Tx Bytes, format: int64, type: integer}
        tx_packets: {description: Tx Packets, format: int64, type: integer}
        wanpath: {description: Wanpath, type: string}
    MulticastWANNeighborStatsFilter:
      properties:
        element:
          description: 'Element: Required(error = MULTICAST_QUERY_MISSING_ELEMENT_ID:
            Element ID is required) ListString(allowDuplicate = true, allowEmpty =
            true, allowNull = false, length = 0, listMaxSize = 1, error = MULTICAST_QUERY_INVALID_ELEMENT_ID:
            Provide single valid element ID in filter, noTrim = false, regex = ^[0-9]{1,20}$,
            required = true) '
          items: {description: Element, type: string}
          type: array
        remote_site:
          description: 'Remote Site: Required(error = MULTICAST_WAN_NEIGHBOR_QUERY_MISSING_REMOTE_SITE_ID:
            Remote site ID is required) ListString(allowDuplicate = true, allowEmpty
            = true, allowNull = false, length = 0, listMaxSize = 1, error = MULTICAST_WAN_NEIGHBOR_QUERY_INVALID_REMOTE_SITE_ID:
            Provide single remote site ID in filter, noTrim = false, regex = ^[0-9]{1,20}$,
            required = true) '
          items: {description: Remote Site, type: string}
          type: array
        site:
          description: 'Site: Required(error = MULTICAST_QUERY_MISSING_SITE_ID: Site
            ID is required) ListString(allowDuplicate = true, allowEmpty = true, allowNull
            = false, length = 0, listMaxSize = 1, error = MULTICAST_QUERY_INVALID_SITE_ID:
            Provide single valid site ID in filter, noTrim = false, regex = ^[0-9]{1,20}$,
            required = true) '
          items: {description: Site, type: string}
          type: array
      required: [remote_site, site, element]
    MulticastWANNeighborStatsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/MulticastWANNeighborStatsFilter', description: 'Filter:
            Required(error = MULTICAST_QUERY_MISSING_FILTER: Filter field is required)
            Valid '}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        object_type:
          description: 'Object Type: ValidateEnum(enumClass = classOf[MulticastStatsType],
            error = MULTICAST_WAN_NEIGHBOR_QUERY_MISSING_OBJECT_TYPE: object_type
            field is either missing or unsupported value is provided, nullAllowed
            = false) '
          enum: [MulticastWANTrafficStatistics, MulticastWANPIMStatistics, MulticastWANPathStatistics]
          type: string
        start_time: {format: date, type: string}
      required: [filter, object_type]
    MulticastWANPIMStatsData:
      properties:
        end_time: {description: End Time, type: string}
        pim_assert_rx_pkts: {description: Pim Assert Rx Pkts, format: int64, type: integer}
        pim_assert_tx_pkts: {description: Pim Assert Tx Pkts, format: int64, type: integer}
        pim_bsm_rx_pkts: {description: Pim Bsm Rx Pkts, format: int64, type: integer}
        pim_bsm_tx_pkts: {description: Pim Bsm Tx Pkts, format: int64, type: integer}
        pim_hello_rx_pkts: {description: Pim Hello Rx Pkts, format: int64, type: integer}
        pim_hello_tx_pkts: {description: Pim Hello Tx Pkts, format: int64, type: integer}
        pim_join_prune_rx_pkts: {description: Pim Join Prune Rx Pkts, format: int64,
          type: integer}
        pim_join_prune_tx_pkts: {description: Pim Join Prune Tx Pkts, format: int64,
          type: integer}
        pim_register_rx_pkts: {description: Pim Register Rx Pkts, format: int64, type: integer}
        pim_register_stop_rx_pkts: {description: Pim Register Stop Rx Pkts, format: int64,
          type: integer}
        pim_register_stop_tx_pkts: {description: Pim Register Stop Tx Pkts, format: int64,
          type: integer}
        pim_register_tx_pkts: {description: Pim Register Tx Pkts, format: int64, type: integer}
        remote_site_id: {description: Remote Site Id, type: string}
        start_time: {description: Start Time, type: string}
    MulticastWANPIMStatsResponse:
      properties:
        data: {$ref: '#/components/schemas/MulticastWANPIMStatsData', description: Data}
    MulticastWANPathStats:
      properties:
        rx_bytes: {description: Rx Bytes, format: int64, type: integer}
        rx_packets: {description: Rx Packets, format: int64, type: integer}
        tx_bytes: {description: Tx Bytes, format: int64, type: integer}
        tx_packets: {description: Tx Packets, format: int64, type: integer}
        wanpath: {description: Wanpath, type: string}
    MulticastWANPathStatsData:
      properties:
        end_time: {description: End Time, type: string}
        remote_site_id: {description: Remote Site Id, type: string}
        start_time: {description: Start Time, type: string}
        wanpath_list:
          description: Wanpath List
          items: {$ref: '#/components/schemas/MulticastWANPathStats'}
          type: array
    MulticastWANPathStatsResponse:
      properties:
        data: {$ref: '#/components/schemas/MulticastWANPathStatsData', description: Data}
    MulticastWANTrafficStatsData:
      properties:
        end_time: {description: End Time, type: string}
        remote_site_id: {description: Remote Site Id, type: string}
        rx_bytes: {description: Rx Bytes, format: int64, type: integer}
        rx_packets: {description: Rx Packets, format: int64, type: integer}
        start_time: {description: Start Time, type: string}
        tx_bytes: {description: Tx Bytes, format: int64, type: integer}
        tx_packets: {description: Tx Packets, format: int64, type: integer}
    MulticastWANTrafficStatsResponse:
      properties:
        data: {$ref: '#/components/schemas/MulticastWANTrafficStatsData', description: Data}
    NetworkPointMetrics:
      properties:
        name: {description: Name, type: string}
        sites:
          description: Sites
          items: {$ref: '#/components/schemas/PointMetricsSites'}
          type: array
        unit: {description: Unit, type: string}
    NetworkPointMetricsFilter:
      properties:
        direction:
          description: Direction
          items: {description: Direction, type: string}
          type: array
        element:
          description: Element
          items: {description: Element, type: string}
          type: array
        interface:
          description: Interfaces
          items: {description: Interfaces, type: string}
          type: array
        site: {description: Site, type: string}
        sites:
          description: Sites
          items: {description: Sites, type: string}
          type: array
        waninterface:
          description: Waninterface
          items: {description: Waninterface, type: string}
          type: array
    NetworkPointMetricsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/NetworkPointMetricsFilter', description: 'Filter:
            Required(FILTER_REQUIRED) Valid '}
        interval:
          description: 'Interval: Required(error = INTERVAL_REQUIRED: Interval is
            required as part of the request) '
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        metrics:
          description: 'Metrics: Required(error = METRICS_LIST_REQUIRED: Metrics list
            is required, please provide at least one metric ) '
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
      required: [filter, metrics, interval]
    NetworkPointMetricsResponse:
      properties:
        interval:
          description: Interval
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/NetworkPointMetrics'}
          type: array
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
    ObjectStatsFilter:
      properties:
        element:
          description: 'Element: Size(max = 1, error = OBJECT_STATS_QUERY_ELEMENT_LIST_LENGTH_EXCEEDED:
            Only one element is supported in element id list, min = 0) '
          items: {description: Element, type: string}
          type: array
        site:
          description: 'Site: Required(error = OBJECT_STATS_QUERY_FILTER_SITE_ID_REQUIRED:
            Site is required in object stats query filter) Size(max = 1, error = OBJECT_STATS_QUERY_SITE_LIST_LENGTH_EXCEEDED:
            Only one site is supported in site id list, min = 0) '
          items: {description: Site, type: string}
          type: array
      required: [site]
    ObjectStatsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/ObjectStatsFilter', description: 'Filter:
            Required(error = OBJECT_STATS_QUERY_FILTER_REQUIRED: Filter is required
            in object stats query) Valid '}
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        object_id: {description: 'Object Id: Required(error = OBJECT_STATS_QUERY_OBJECT_ID_REQUIRED:
            Object id is required in object stats query) Pattern(error = OBJECT_STATS_QUERY_OBJECT_ID_INVALID_VALUE:
            Invalid value for object id in object stats query, regexp = ^[0-9]{1,20}$) ',
          type: string}
        object_type:
          description: 'Object Type: Required(error = OBJECT_STATS_QUERY_OBJECT_TYPE_REQUIRED:
            Object type is required in object stats query) '
          enum: [PeerStatistics, IntfStatistics, CellularModuleStatistics, CellularAPNStatistics,
            MulticastStatistics, SecurityPolicyRule]
          type: string
        start_time: {format: date, type: string}
      required: [filter, object_id, object_type]
    ObjectStatsResponse:
      properties:
        data: {type: object}
    ObjectStatsType:
      properties:
        description: {description: Description, type: string}
        name: {description: Name, type: string}
    ObjectStatsTypeResponse:
      properties:
        object_statistics:
          description: Object Statistics
          items: {$ref: '#/components/schemas/ObjectStatsType'}
          type: array
    PointData:
      properties:
        avail_disk: {description: Avail Disk, type: number}
        avail_mem: {description: Avail Mem, type: number}
        avidle: {description: Avidle, type: number}
        avidlemn: {description: Avidlemn, type: number}
        avidlemx: {description: Avidlemx, type: number}
        bad_link_health_reason_bitmap: {description: Bad Link Health Reason Bitmap,
          type: number}
        downlink_jitter_avg: {description: Downlink Jitter Avg, type: number}
        downlink_mos_avg: {description: Downlink Mos Avg, type: number}
        downlink_mos_max: {description: Downlink Mos Max, type: number}
        downlink_mos_min: {description: Downlink Mos Min, type: number}
        downlink_pkt_loss_avg: {description: Downlink Pkt Loss Avg, type: number}
        dskmn: {description: Dskmn, type: number}
        dskmx: {description: Dskmx, type: number}
        egress: {description: Egress, type: number}
        ingress: {description: Ingress, type: number}
        link_healthy: {description: Link Healthy, type: number}
        memmn: {description: Memmn, type: number}
        memmx: {description: Memmx, type: number}
        rtt_latency: {description: Rtt Latency, type: number}
        sample_completeness: {description: Sample Completeness, type: number}
        tunnel_healthscore: {description: Tunnel Healthscore, type: number}
        uplink_jitter_avg: {description: Uplink Jitter Avg, type: number}
        uplink_mos_avg: {description: Uplink Mos Avg, type: number}
        uplink_mos_max: {description: Uplink Mos Max, type: number}
        uplink_mos_min: {description: Uplink Mos Min, type: number}
        uplink_pkt_loss_avg: {description: Uplink Pkt Loss Avg, type: number}
    PointMetricsAnynet:
      properties:
        anynet_link_id: {description: Anynet Link Id, type: string}
        data: {$ref: '#/components/schemas/PointData', description: Data}
    PointMetricsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/Filter', description: Filter}
        interval:
          description: Interval
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
    PointMetricsResponse:
      properties:
        interval: {description: Interval, type: string}
        metrics: {description: Metrics, type: object}
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
    PointMetricsSites:
      properties:
        data: {$ref: '#/components/schemas/PointData', description: Data}
        site_id: {description: Site Id, type: string}
        waninterfaces:
          description: Waninterfaces
          items: {$ref: '#/components/schemas/PointMetricsWanPath'}
          type: array
    PointMetricsWanPath:
      properties:
        anynetlinks:
          description: Anynetlinks
          items: {$ref: '#/components/schemas/PointMetricsAnynet'}
          type: array
        data: {$ref: '#/components/schemas/PointData', description: Data}
        wn_path_id: {description: Wn Path Id, type: string}
    QosMetricsFilter:
      properties:
        direction:
          description: Direction
          enum: [Ingress, Egress]
          type: string
        element:
          description: Element
          items: {description: Element, type: string}
          type: array
        priority:
          description: 'Priority: ListEnum(enumClass = classOf[QosStatsPriority],
            length = 0, listMaxSize = 4, error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, nullAllowed = false) '
          items: {description: Priority, type: string}
          type: array
        site:
          description: Site
          items: {description: Site, type: string}
          type: array
        traffic_type:
          description: 'Traffic Type: ListEnum(enumClass = classOf[QosStatsTrafficType],
            length = 0, listMaxSize = 4, error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, nullAllowed = false) '
          items: {description: Traffic Type, type: string}
          type: array
        waninterface:
          description: Waninterface
          items: {description: Waninterface, type: string}
          type: array
      required: [traffic_type, priority]
    QosMetricsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/QosMetricsFilter', description: 'Filter:
            Valid Required(error = REQUIRED_PROPERTY: Schema check failed - {} is
            a required property) '}
        interval:
          description: 'Interval: Required(error = REQUIRED_PROPERTY: Schema check
            failed - {} is a required property) '
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        max_datapoints: {description: Max Datapoints, format: int32, type: integer}
        metrics:
          description: 'Metrics: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 0, error = INVALID_FILTER: Schema
            check failed - Invalid value for param {}, required = true) '
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
      required: [filter, interval, metrics]
    QosMetricsResponse:
      properties:
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
    SecurityPolicyRules:
      properties:
        bytes_c2s: {format: int64, type: integer}
        bytes_s2c: {format: int64, type: integer}
        packets_c2s: {format: int64, type: integer}
        packets_s2c: {format: int64, type: integer}
        security_destination_zone_id: {description: 'Security Destination Zone Id:
            JsonAlias(value = [dst_zone_id]) ', type: string}
        security_policy_rule_action: {description: 'Security Policy Rule Action: JsonAlias(value
            = [action]) ', type: string}
        security_policy_rule_id: {description: 'Security Policy Rule Id: JsonAlias(value
            = [rule_id]) ', type: string}
        security_source_zone_id: {description: 'Security Source Zone Id: JsonAlias(value
            = [src_zone_id]) ', type: string}
        time: {description: Time, format: int64, type: integer}
    Series:
      properties:
        data:
          description: Data
          items: {$ref: '#/components/schemas/Data'}
          type: array
        interval: {description: Interval, type: string}
        name: {description: Name, type: string}
        unit: {description: Unit, type: string}
        view: {description: View, type: object}
    SysMetricsFilter:
      properties:
        direction:
          description: Direction
          enum: [Ingress, Egress]
          type: string
        element:
          description: Element
          items: {description: Element, type: string}
          type: array
        interface:
          description: Interfaces
          items: {description: Interfaces, type: string}
          type: array
        site:
          description: Site
          items: {description: Site, type: string}
          type: array
    SysMetricsQuery:
      properties:
        end_time: {format: date, type: string}
        filter: {$ref: '#/components/schemas/SysMetricsFilter', description: Filter}
        interval:
          description: 'Interval: Required(error = REQUIRED_PROPERTY: Schema check
            failed - {} is a required property) '
          enum: [TEN_SEC, ONE_MIN, FIVE_MIN, ONE_HOUR, ONE_DAY]
          type: string
        max_datapoints: {description: Max Datapoints, format: int32, type: integer}
        metrics:
          description: 'Metrics: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 0, error = INVALID_FILTER: Schema
            check failed - Invalid value for param {}, required = true) '
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
        name: {description: 'Name: Pattern(error = INVALID_FILTER: Schema check failed
            - Invalid value for param {}, regexp = ^[A-Za-z]+$) ', type: string}
        start_time: {format: date, type: string}
        view: {$ref: '#/components/schemas/View', description: View}
      required: [interval, metrics]
    SysMetricsResponse:
      properties:
        metrics:
          description: Metrics
          items: {$ref: '#/components/schemas/Metrics'}
          type: array
    View:
      properties:
        app_id: {description: App Id, type: string}
        cellular_module_id: {description: Cellular Module Id, type: string}
        direction:
          description: Direction
          enum: [Ingress, Egress]
          type: string
        element_id: {description: Element Id, type: string}
        interface_id: {description: Interface Id, type: string}
        path_id: {description: Path Id, type: string}
        path_type:
          description: Path Type
          enum: [public_direct, public_vpn, private_direct, private_vpn, unknown,
            servicelink]
          type: string
        priority: {description: Priority, type: string}
        site_id: {description: Site Id, type: string}
        traffic_type: {description: Traffic Type, type: string}
        waninterface_id: {description: Waninterface Id, type: string}
info:
  contact: {}
  description: List of APIs used to retrieve SDWAN metrics such as badnwidth utilization,
    TCP transaction, application health, application performance, LQM, flows, interface
    & system metrics.
  title: Metrics
  version: Latest
openapi: 3.0.0
paths:
  /sdwan/v2.0/api/monitor/aggregates/multicast/mroute:
    post:
      description: Query Multicast statistics API v2.0
      operationId: post-sdwan-v2.0-api-monitor-aggregates-multicast-mroute
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastRouteStatsQuery'}
        description: Details of object stats query
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                - {$ref: '#/components/schemas/MulticastRouteSourceGroupStatsResponse'}
                - {$ref: '#/components/schemas/MulticastRouteOutgoingInterfaceStatsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: MULTICAST_QUERY_MISSING_FILTER}
                  - {code: MULTICAST_QUERY_MISSING_ELEMENT_ID}
                  - {code: MULTICAST_QUERY_INVALID_ELEMENT_ID}
                  - {code: MULTICAST_QUERY_MISSING_SITE_ID}
                  - {code: MULTICAST_QUERY_INVALID_SITE_ID}
                  - {code: MULTICAST_MROUTE_QUERY_MISSING_IS_ACTIVE}
                  - {code: MULTICAST_MROUTE_QUERY_INVALID_SOURCE_IP}
                  - {code: MULTICAST_MROUTE_QUERY_INVALID_GROUP_IP}
                  - {code: MULTICAST_MROUTE_QUERY_UNSUPPORTED_TIME_FIELDS}
                  - {code: MULTICAST_MROUTE_QUERY_MISSING_SOURCE_OR_GROUP}
                  - {code: MULTICAST_MROUTE_QUERY_MISSING_TYPE}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query Multicast statistics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/aggregates/multicast/wan_neighbor:
    post:
      description: Query WAN Neighbor statistics API v2.0
      operationId: post-sdwan-v2.0-api-monitor-aggregates-multicast-wan_neighbor
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastWANNeighborStatsQuery'}
        description: Details of object stats query
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                - {$ref: '#/components/schemas/MulticastWANPathStatsResponse'}
                - {$ref: '#/components/schemas/MulticastWANPIMStatsResponse'}
                - {$ref: '#/components/schemas/MulticastWANTrafficStatsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: MULTICAST_WAN_NEIGHBOR_QUERY_MISSING_OBJECT_TYPE}
                  - {code: MULTICAST_WAN_NEIGHBOR_QUERY_MISSING_REMOTE_SITE_ID}
                  - {code: MULTICAST_WAN_NEIGHBOR_QUERY_INVALID_REMOTE_SITE_ID}
                  - {code: MULTICAST_QUERY_MISSING_FILTER}
                  - {code: MULTICAST_QUERY_MISSING_ELEMENT_ID}
                  - {code: MULTICAST_QUERY_INVALID_ELEMENT_ID}
                  - {code: MULTICAST_QUERY_MISSING_SITE_ID}
                  - {code: MULTICAST_QUERY_INVALID_SITE_ID}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query WAN Neighbor statistics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/cellular_metrics:
    get:
      description: 'Returns cellular metrics schema for Version 2.0

        '
      operationId: get-sdwan-v2.0-api-monitor-cellular_metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/CellularmetricsSchemaResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: UNSUPPORTED_SCHEMA_VERSION}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Returns cellular metrics schema for Version 2.0 (v2.0)
      tags: [Metrics]
    post:
      description: "Get cellular metrics like SNR, Cellular bandwidth usage etc. External\
        \ API used for stats queries.\nBelow are the tenet for queries\n* interval\
        \ is required\n* start_time, end_time and max_datapoints are optional with\
        \ the following restrictions, at least one of them needs to be specified.\n\
        \  all the three can not be specified, as the result is ambiguous.\nNote\n\
        * Start time, if not specified, default to epoch.\n* End time, if not specified,\
        \ default to now.\n* Limit, if not specified, defaults to None..\n* Start\
        \ and end times need to be specified in ISO8601 UTC format.\n* Metrics need\
        \ to specified according to 2.1 specifications. Invalid metrics will be ignored\
        \ and the result will not include them.\n* Filters need to be specified according\
        \ to the specifications.\n"
      operationId: post-sdwan-v2.0-api-monitor-cellular_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/CellularmetricsQuery'}
        description: Query request for getting cellularmetrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/CellularmetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_FILTER_IN_VERSION}
                  - {code: UNSUPPORTED_FILTER_FOR_METRIC}
                  - {code: MISSING_INTERFACE_FILTER_PROPERTY}
                  - {code: MISSING_ELEMENT_FILTER_PROPERTY}
                  - {code: UNSUPPORTED_DIRECTION_FILTER}
                  - {code: DIRECTION_FILTER_EMPTY}
                  - {code: DIRECTION_VIEW_NOT_SUPPORTED}
                  - {code: MAX_DATAPOINTS_END_TIME}
                  - {code: VERSION_NOT_SUPPORTED}
                  - {code: METRIC_STATISTICS_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: SERVER_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Cellular metrics for Version 2.0 (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/cellular_metrics/topn:
    post:
      description: Get cellular Top N data
      operationId: post-sdwan-v2.0-api-monitor-cellular_metrics-topn
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BaseTopNQuery'}
        description: Filter for top N
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BaseTopNResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: APP_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: SITE_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: FILTER_NOT_SUPPORTED_WITHOUT_SITE}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: PATH_NOT_SUPPORTED_WITH_PATH_TYPE}
                  - {code: TOPN_BASIS_NOT_SUPPORTED_WITHOUT_FILTER}
                  - {code: INVALID_LIMIT}
                  - {code: TOPN_BASIS_REQUIRED}
                  - {code: TOP_N_REQUIRED}
                  - {code: TOPN_TYPE_REQUIRED}
                  - {code: PATH_TYPE_LIST_LENGTH_EXCEEDED}
                  - {code: FILTER_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Cellular metrics Top N (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/lqm_point_metrics:
    post:
      description: 'Get link quality point metrics for LqmLatencyPointMetric, LqmMosPointMetric,
        LqmPktLossPointMetric, and LqmJitterPointMetric.

        * interval is required

        * start_time is required

        Note

        * Start time need to be specified in ISO8601 UTC format.

        * Metrics need to specified according to 2.0 specifications.

        * Filters need to be specified according to the specifications.

        '
      operationId: post-sdwan-v2.0-api-monitor-lqm_point_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PointMetricsQuery'}
        description: Query request for getting lqm metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PointMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: FUTURE_TIME_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: LQM Point metrics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/network_point_metrics:
    post:
      description: 'Get network point metrics like BandwidthUsage for sites across
        tenants . External API used for stats queries. Below are the tenet for queries

        * interval is required

        Note

        * Start time, is required

        * interval, is required

        '
      operationId: post-sdwan-v2.0-api-monitor-network_point_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/NetworkPointMetricsQuery'}
        description: Query request for getting network point metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NetworkPointMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: VERSION_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Network Point Metrics BandwidthUsage (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/network_point_metrics_bw:
    post:
      description: 'Get network point metrics like BandwidthUsage for sites across
        tenants . External API used for stats queries. Below are the tenet for queries

        * interval is required

        Note

        * Start time, is required

        * interval, is required

        '
      operationId: post-sdwan-v2.0-api-monitor-network_point_metrics_bw
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/NetworkPointMetricsQuery'}
        description: Query request for getting network point metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NetworkPointMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: VERSION_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Network Point Metrics BandwidthUsage (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/network_point_metrics_hs:
    post:
      description: 'Get network point metrics like HealthScore for sites across tenants
        . External API used for stats queries. Below are the tenet for queries

        * interval is required

        Note

        * Start time, is required

        * interval, is required

        '
      operationId: post-sdwan-v2.0-api-monitor-network_point_metrics_hs
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/NetworkPointMetricsQuery'}
        description: Query request for getting network point metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NetworkPointMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: VERSION_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Network Point Metrics HealthScore (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/object_stats:
    get:
      description: Get object stats API v2.0
      operationId: get-sdwan-v2.0-api-monitor-object_stats
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsTypeResponse'}
          description: Successful Operation
      summary: Get name and description of all object stats (v2.0)
      tags: [Metrics]
    post:
      description: Query and get object stats API v2.0
      operationId: post-sdwan-v2.0-api-monitor-object_stats
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ObjectStatsQuery'}
        description: Details of object stats query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_SITE_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_UNSUPPORTED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_SITE_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_SITE_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_START_TIME_BEFORE_END_TIME}
                  - {code: INVALID_STATS_REQUEST_BODY}
                  - {code: FUTURE_TIME_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query and get object statistics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/qos_metrics:
    get:
      description: Get details of Qos metrics
      operationId: get-sdwan-v2.0-api-monitor-qos_metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MetricSchemaResponse'}
          description: Successful Operation
      summary: Get details of Qos metrics (v2.0)
      tags: [Metrics]
    post:
      description: Provides time series data for QOS stats
      operationId: post-sdwan-v2.0-api-monitor-qos_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/QosMetricsQuery'}
        description: Details of qos metrics query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/QosMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: REQUIRED_PROPERTY}
                  - {code: INVALID_FILTER}
                  - {code: MAX_DATAPOINTS_NOT_SUPPORTED}
                  - {code: REQUESTED_VIEW_NOT_SUPPORTED}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: REQUESTED_METRIC_NOT_SUPPORTED}
                  - {code: REQUESTED_METRIC_UNIT_NOT_SUPPORTED}
                  - {code: REQUESTED_METRIC_STATISTICS_NOT_SUPPORTED}
                  - {code: INVALID_STATS_REQUEST_BODY}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query Qos metrics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/sys_metrics:
    get:
      description: 'Returns sysmetrics schema for Version 2.0

        '
      operationId: get-sdwan-v2.0-api-monitor-sys_metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MetricSchemaResponse'}
          description: Successful Operation
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Returns sysmetrics schema for Version 2.0 (v2.0)
      tags: [Metrics]
    post:
      description: "Get system metrics like CPU, Memory and Disk usage. External API\
        \ used for stats queries. Below are the tenet for queries\n* interval is required\n\
        * start_time, end_time and max_datapoints are optional with the following\
        \ restrictions, at least one of them needs to be specified.\n  all the three\
        \ can not be specified, as the result is ambiguous.\nNote\n* Start time, if\
        \ not specified, default to epoch.\n* End time, if not specified, default\
        \ to now.\n* Limit, if not specified, defaults to None..\n* Start and end\
        \ times need to be specified in ISO8601 UTC format.\n* Metrics need to specified\
        \ according to 2.1 specifications. Invalid metrics will be ignored and the\
        \ result will not include them.\n* Filters need to be specified according\
        \ to the specifications.\n"
      operationId: post-sdwan-v2.0-api-monitor-sys_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SysMetricsQuery'}
        description: Query request for getting sysmetrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SysMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_FILTER_IN_VERSION}
                  - {code: UNSUPPORTED_FILTER_FOR_METRIC}
                  - {code: MISSING_INTERFACE_FILTER_PROPERTY}
                  - {code: MISSING_ELEMENT_FILTER_PROPERTY}
                  - {code: UNSUPPORTED_DIRECTION_FILTER}
                  - {code: DIRECTION_FILTER_EMPTY}
                  - {code: MAX_DATAPOINTS_END_TIME}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: System metrics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/sys_metrics/topn:
    post:
      description: Get Interface Top N data
      operationId: post-sdwan-v2.0-api-monitor-sys_metrics-topn
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BaseTopNQuery'}
        description: Filter for top N
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BaseTopNResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: APP_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: SITE_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: FILTER_NOT_SUPPORTED_WITHOUT_SITE}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: PATH_NOT_SUPPORTED_WITH_PATH_TYPE}
                  - {code: TOPN_BASIS_NOT_SUPPORTED_WITHOUT_FILTER}
                  - {code: INVALID_LIMIT}
                  - {code: REQUIRED_PROPERTY}
                  - {code: LENGTH_EXCEEDED}
                  - {code: PATH_TYPE_LIST_LENGTH_EXCEEDED}
                  - {code: INVALID_FILTER}
                  - {code: FILTER_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Sysmetrics Top N (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/monitor/sys_point_metrics:
    post:
      description: 'Get system point metrics for CPU, Memory and Disk usage.

        * interval is required

        * start_time is required

        Note

        * Start time need to be specified in ISO8601 UTC format.

        * Metrics need to specified according to 2.0 specifications.

        * Filters need to be specified according to the specifications.

        '
      operationId: post-sdwan-v2.0-api-monitor-sys_point_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PointMetricsQuery'}
        description: Query request for getting sysmetrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PointMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: FUTURE_TIME_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Sys Point metrics (v2.0)
      tags: [Metrics]
  /sdwan/v2.0/api/tenants/{esp_tenant_id}/monitor/aggregates/healthscore:
    post:
      description: HealthScore Aggregate categorized as poor, fair and good for MSP
        and its clients
      operationId: post-sdwan-v2.0-api-tenants-esp_tenant_id-monitor-aggregates-healthscore
      parameters:
      - description: MSP Tenant Id
        in: path
        name: esp_tenant_id
        required: true
        schema: {description: Esp Tenant Id, type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/LqmStatsAggregateHealthScoreRequest'}
        description: Filters for Aggregate HealthScore
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LqmStatsAggregateHealthScoreResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: AGGREGATION_REQUIRED}
                  - {code: HEALTHSCORE_TYPE_REQUIRED}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Aggregate HealthScore (v2.0)
      tags: [Metrics]
  /sdwan/v2.1/api/monitor/metrics:
    post:
      description: Query and get monitor metrics API v2.1
      operationId: post-sdwan-v2.1-api-monitor-metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MonitorMetricsQuery'}
        description: Details of monitor metrics query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MonitorMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: EMPTY_REQ_BODY}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_FILTER_FOR_VERSION}
                  - {code: UNSUPPORTED_INDIVIDUAL_DIMENSION}
                  - {code: VIEW_DIRECTION_AND_FILTER_DIRECTION_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_DIRECTION_FILTER}
                  - {code: METRIC_AND_VIEW_NOT_SUPPORTED}
                  - {code: MISSING_DIRECTION}
                  - {code: MAX_DATAPOINTS_END_TIME}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: METRIC_STATISTICS_NOT_SUPPORTED}
                  - {code: PATH_AND_PATH_TYPE_NOT_SUPPORTED}
                  - {code: SITE_WITH_PATH_MISSING}
                  - {code: SITE_WITH_WANINTERFACE_MISSING}
                  - {code: WANINTERFACE_WITH_ANYNETLINK_MISSING}
                  - {code: SITE_WITH_ELEMENT_MISSING}
                  - {code: METRIC_MISSING_SITE}
                  - {code: METRIC_MISSING_APP}
                  - {code: METRIC_SUPPORTS_SINGLE_SITE}
                  - {code: METRIC_SUPPORTS_SINGLE_REMOTE_SITE}
                  - {code: METRIC_SUPPORTS_SINGLE_APP}
                  - {code: METRIC_NOT_SUPPORTED_WITH_PATH_FILTER}
                  - {code: METRIC_NOT_SUPPORTED_WITH_WAN_INTERFACE}
                  - {code: METRIC_MISSING_PATH_ID}
                  - {code: METRIC_SUPPORTS_SINGLE_PATH_ID}
                  - {code: METRIC_SUPPORTS_SINGLE_FILTER_WITH_LIST}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query and get monitor metrics (v2.1)
      tags: [Metrics]
  /sdwan/v2.1/api/monitor/metrics/{mtype}:
    get:
      description: Get details of monitor metrics API v2.1
      operationId: get-sdwan-v2.1-api-monitor-metrics-mtype
      parameters:
      - description: Metric Type
        in: path
        name: mtype
        required: true
        schema: {description: Mtype, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MetricSchemaResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: METRIC_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Get details of monitor metrics (v2.1)
      tags: [Metrics]
  /sdwan/v2.1/api/monitor/object_stats:
    get:
      description: Get object stats API v2.1
      operationId: get-sdwan-v2.1-api-monitor-object_stats
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsTypeResponse'}
          description: Successful Operation
      summary: Get name and description of all object stats (v2.1)
      tags: [Metrics]
    post:
      description: Query and get object stats API v2.1
      operationId: post-sdwan-v2.1-api-monitor-object_stats
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ObjectStatsQuery'}
        description: Details of object stats query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_SITE_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_UNSUPPORTED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_SITE_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_SITE_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_START_TIME_BEFORE_END_TIME}
                  - {code: INVALID_STATS_REQUEST_BODY}
                  - {code: FUTURE_TIME_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query and get object statistics (v2.1)
      tags: [Metrics]
  /sdwan/v2.1/api/monitor/sys_metrics:
    get:
      description: 'Returns sysmetrics schema for Version 2.1

        '
      operationId: get-sdwan-v2.1-api-monitor-sys_metrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MetricSchemaResponse'}
          description: Successful Operation
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Returns sysmetrics schema for Version 2.1 (v2.1)
      tags: [Metrics]
    post:
      description: "Get system metrics like CPU, Memory and Disk usage. External API\
        \ used for stats queries. In addition to __CPUUsage__, Memory Usage and DiskUsage\n\
        additional metrics like __InterfaceBandwidthUsage, InterfaceDroppedPackets,\
        \ InterfaceErrors, InterfaceFifoErrors, InterfaceIngressCRCErrors, InterfaceIngressFrameErrors,\
        \ InterfaceEgressCarrierErrors__\nBelow are the tenet for queries\n* interval\
        \ is required\n* start_time, end_time and max_datapoints are optional with\
        \ the following restrictions, at least one of them needs to be specified.\n\
        \  all the three can not be specified, as the result is ambiguous.\nNote\n\
        * Start time, if not specified, default to epoch.\n* End time, if not specified,\
        \ default to now.\n* Limit, if not specified, defaults to None..\n* Start\
        \ and end times need to be specified in ISO8601 UTC format.\n* Metrics need\
        \ to specified according to 2.1 specifications. Invalid metrics will be ignored\
        \ and the result will not include them.\n* Filters need to be specified according\
        \ to the specifications.\n"
      operationId: post-sdwan-v2.1-api-monitor-sys_metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SysMetricsQuery'}
        description: Query request for getting sysmetrics
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SysMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_FILTER_IN_VERSION}
                  - {code: UNSUPPORTED_FILTER_FOR_METRIC}
                  - {code: MISSING_INTERFACE_FILTER_PROPERTY}
                  - {code: MISSING_ELEMENT_FILTER_PROPERTY}
                  - {code: UNSUPPORTED_DIRECTION_FILTER}
                  - {code: DIRECTION_FILTER_EMPTY}
                  - {code: DIRECTION_VIEW_NOT_SUPPORTED}
                  - {code: MAX_DATAPOINTS_END_TIME}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: System metrics for Version 2.1 (v2.1)
      tags: [Metrics]
  /sdwan/v2.2/api/monitor/metrics:
    post:
      description: Query and get monitor metrics API v2.2
      operationId: post-sdwan-v2.2-api-monitor-metrics
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MonitorMetricsQuery'}
        description: Details of monitor metrics query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MonitorMetricsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: EMPTY_REQ_BODY}
                  - {code: SCHEMA_MISMATCH}
                  - {code: METRIC_NOT_SUPPORTED}
                  - {code: METRIC_UNIT_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_INDIVIDUAL_DIMENSION}
                  - {code: VIEW_DIRECTION_AND_FILTER_DIRECTION_NOT_SUPPORTED}
                  - {code: UNSUPPORTED_DIRECTION_FILTER}
                  - {code: METRIC_AND_VIEW_NOT_SUPPORTED}
                  - {code: MISSING_DIRECTION}
                  - {code: MAX_DATAPOINTS_END_TIME}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: METRIC_STATISTICS_NOT_SUPPORTED}
                  - {code: PATH_AND_PATH_TYPE_NOT_SUPPORTED}
                  - {code: SITE_WITH_PATH_MISSING}
                  - {code: SITE_WITH_WANINTERFACE_MISSING}
                  - {code: WANINTERFACE_WITH_ANYNETLINK_MISSING}
                  - {code: SITE_WITH_ELEMENT_MISSING}
                  - {code: METRIC_MISSING_SITE}
                  - {code: METRIC_MISSING_APP}
                  - {code: METRIC_SUPPORTS_SINGLE_SITE}
                  - {code: METRIC_SUPPORTS_SINGLE_REMOTE_SITE}
                  - {code: METRIC_SUPPORTS_SINGLE_APP}
                  - {code: METRIC_NOT_SUPPORTED_WITH_PATH_FILTER}
                  - {code: METRIC_NOT_SUPPORTED_WITH_WAN_INTERFACE}
                  - {code: METRIC_MISSING_PATH_ID}
                  - {code: METRIC_SUPPORTS_SINGLE_PATH_ID}
                  - {code: METRIC_SUPPORTS_SINGLE_FILTER_WITH_LIST}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query and get monitor metrics (v2.2)
      tags: [Metrics]
  /sdwan/v2.2/api/monitor/metrics/{mtype}:
    get:
      description: Get details of monitor metrics API v2.2
      operationId: get-sdwan-v2.2-api-monitor-metrics-mtype
      parameters:
      - description: Metric Type
        in: path
        name: mtype
        required: true
        schema: {description: Mtype, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MetricSchemaResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: METRIC_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Get details of monitor metrics (v2.2)
      tags: [Metrics]
  /sdwan/v2.2/api/monitor/object_stats:
    get:
      description: Get object stats API v2.2
      operationId: get-sdwan-v2.2-api-monitor-object_stats
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsTypeResponse'}
          description: Successful Operation
      summary: Get name and description of all object statistics (v2.2)
      tags: [Metrics]
    post:
      description: Query and get object stats API v2.2
      operationId: post-sdwan-v2.2-api-monitor-object_stats
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ObjectStatsQuery'}
        description: Details of object stats query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_SITE_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_UNSUPPORTED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_SITE_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_SITE_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_START_TIME_BEFORE_END_TIME}
                  - {code: INVALID_STATS_REQUEST_BODY}
                  - {code: FUTURE_TIME_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query and get object statistics (v2.2)
      tags: [Metrics]
  /sdwan/v2.3/api/monitor/object_stats:
    get:
      description: Get object stats API v2.3
      operationId: get-sdwan-v2.3-api-monitor-object_stats
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsTypeResponse'}
          description: Successful Operation
      summary: Get name and description of all object statistics (v2.3)
      tags: [Metrics]
    post:
      description: Query and get object stats API v2.3
      operationId: post-sdwan-v2.3-api-monitor-object_stats
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ObjectStatsQuery'}
        description: Details of object stats query
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ObjectStatsResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_FILTER_SITE_ID_REQUIRED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_TYPE_UNSUPPORTED}
                  - {code: OBJECT_STATS_QUERY_OBJECT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_SITE_ID_INVALID_VALUE}
                  - {code: OBJECT_STATS_QUERY_ELEMENT_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_SITE_LIST_LENGTH_EXCEEDED}
                  - {code: OBJECT_STATS_QUERY_START_TIME_BEFORE_END_TIME}
                  - {code: INVALID_STATS_REQUEST_BODY}
                  - {code: FUTURE_TIME_ERROR}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query and get object statistics (v2.3)
      tags: [Metrics]
  /sdwan/v3.0/api/monitor/aggregates:
    get:
      description: Summary of supported aggregates
      operationId: get-sdwan-v3.0-api-monitor-aggregates
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AppStatsSupportedAggregatesResponse'}
          description: Successful Operation
      summary: Supported App stats Aggregates (v3.0)
      tags: [Metrics]
    post:
      description: Aggregate app_stats and app_prefix stats based on different metrics
      operationId: post-sdwan-v3.0-api-monitor-aggregates
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AppStatsAggregatesQuery'}
        description: Filters and Metrics for Aggregating App stats
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AppStatsAggregateQueryResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: REQUIRED_PROPERTY}
                  - {code: LENGTH_EXCEEDED}
                  - {code: INVALID_FILTER}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: FUTURE_TIME_ERROR}
                  - {code: PATH_AND_PATH_TYPE_NOT_SUPPORTED}
                  - {code: AGGREGATE_FILTER_MANDATORY}
                  - {code: AGGREGATE_UNIT_REQUIRED}
                  - {code: AGGREGATE_UNIT_NOT_SUPPORTED}
                  - {code: AGGREGATE_FILTER_PARAMETER_NOT_ALLOWED}
                  - {code: AGGREGATE_FILTER_PARAMETER_REQUIRED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Aggregate App stats (v3.0)
      tags: [Metrics]
  /sdwan/v3.0/api/monitor/topn:
    post:
      description: Get Top N data
      operationId: post-sdwan-v3.0-api-monitor-topn
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AppStatsTopNQuery'}
        description: Filter for top N
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AppStatsTopNResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: APP_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: SITE_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: FILTER_NOT_SUPPORTED_WITHOUT_SITE}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: PATH_NOT_SUPPORTED_WITH_PATH_TYPE}
                  - {code: TOPN_BASIS_NOT_SUPPORTED_WITHOUT_FILTER}
                  - {code: INVALID_LIMIT}
                  - {code: REQUIRED_PROPERTY}
                  - {code: LENGTH_EXCEEDED}
                  - {code: PATH_TYPE_LIST_LENGTH_EXCEEDED}
                  - {code: INVALID_FILTER}
                  - {code: FILTER_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Top N (v3.0)
      tags: [Metrics]
  /sdwan/v3.1/api/monitor/topn:
    post:
      description: Get Top N data
      operationId: post-sdwan-v3.1-api-monitor-topn
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AppStatsTopNQuery'}
        description: Filter for top N
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AppStatsTopNResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: APP_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: SITE_FILTER_NOT_SUPPORTED_FOR_TYPE}
                  - {code: FILTER_NOT_SUPPORTED_WITHOUT_SITE}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: PATH_NOT_SUPPORTED_WITH_PATH_TYPE}
                  - {code: TOPN_BASIS_NOT_SUPPORTED_WITHOUT_FILTER}
                  - {code: INVALID_LIMIT}
                  - {code: REQUIRED_PROPERTY}
                  - {code: PATH_TYPE_LIST_LENGTH_EXCEEDED}
                  - {code: LENGTH_EXCEEDED}
                  - {code: INVALID_FILTER}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Top N (v3.1)
      tags: [Metrics]
  /sdwan/v3.4/api/monitor/flows:
    post:
      description: Get flows information for v3.4
      operationId: post-sdwan-v3.4-api-monitor-flows
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/FlowsQuery'}
        description: Filter for flows
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/FlowsQueryResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: EMPTY_REQ_BODY}
                  - {code: SCHEMA_MISMATCH}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: EMPTY_FILTER}
                  - {code: PATH_AND_PATH_TYPE_NOT_SUPPORTED}
                  - {code: SITE_WITH_PATH_MISSING}
                  - {code: SITE_WITH_WANINTERFACE_MISSING}
                  - {code: SITE_WITH_ELEMENT_MISSING}
                  - {code: SITE_WITH_FLOW_TUPLE_MISSING}
                  - {code: INVALID_IP}
                  - {code: INVALID_FLOW_TYPE}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Flows (v3.4)
      tags: [Metrics]
  /sdwan/v3.5/api/monitor/flows:
    post:
      description: Get flows information for v3.5
      operationId: post-sdwan-v3.5-api-monitor-flows
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/FlowsQuery'}
        description: Filter for flows
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/FlowsQueryResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: EMPTY_REQ_BODY}
                  - {code: SCHEMA_MISMATCH}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: EMPTY_FILTER}
                  - {code: PATH_AND_PATH_TYPE_NOT_SUPPORTED}
                  - {code: SITE_WITH_PATH_MISSING}
                  - {code: SITE_WITH_WANINTERFACE_MISSING}
                  - {code: SITE_WITH_ELEMENT_MISSING}
                  - {code: SITE_WITH_FLOW_TUPLE_MISSING}
                  - {code: INVALID_IP}
                  - {code: INVALID_FLOW_TYPE}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Flows (v3.5)
      tags: [Metrics]
  /sdwan/v3.6/api/monitor/flows:
    post:
      description: Get flows information for v3.6
      operationId: post-sdwan-v3.6-api-monitor-flows
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/FlowsQuery'}
        description: Filter for flows
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/FlowsQueryResponse'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: EMPTY_REQ_BODY}
                  - {code: SCHEMA_MISMATCH}
                  - {code: START_TIME_GREATER_THAN_END_TIME}
                  - {code: INVALID_REQUEST_ERROR_0001}
                  - {code: EMPTY_FILTER}
                  - {code: PATH_AND_PATH_TYPE_NOT_SUPPORTED}
                  - {code: SITE_WITH_PATH_MISSING}
                  - {code: SITE_WITH_WANINTERFACE_MISSING}
                  - {code: SITE_WITH_ELEMENT_MISSING}
                  - {code: SITE_WITH_FLOW_TUPLE_MISSING}
                  - {code: INVALID_IP}
                  - {code: INVALID_FLOW_TYPE}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
        '500':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Error'}
          description: Internal Server Error
      summary: Flows (v3.6)
      tags: [Metrics]
tags:
- {name: Metrics}
