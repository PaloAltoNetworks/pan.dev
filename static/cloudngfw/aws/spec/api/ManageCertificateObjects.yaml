components:
  schemas:
    CreateCertificateObjectRequest:
      additionalProperties: false
      properties:
        AuditComment: {description: 'Audit remarks.

            ', maxLength: 512, title: Auditcomment, type: string}
        CertificateSelfSigned: {default: false, description: 'A self-signed root CA
            certificate.

            ', title: Certificateselfsigned, type: boolean}
        CertificateSignerArn: {description: "Certificate Signer ARN       \n", title: Certificatesignerarn,
          type: string}
        Description: {description: 'A description of the certificate object.

            ', maxLength: 512, title: Description, type: string}
        Name: {maxLength: 63, minLength: 1, pattern: '^[a-zA-Z0-9-]+$', title: Name,
          type: string}
      required: [Name]
      title: CreateCertificateObjectRequest
      type: object
    CreateCertificateObjectResponse:
      additionalProperties: false
      properties:
        Response: {$ref: '#/components/schemas/CreateCertificateObjectResponse.ResponseData',
          description: 'The API call response.

            '}
        ResponseStatus: {$ref: '#/components/schemas/CreateCertificateObjectResponse.Result',
          description: 'The API call response status.

            '}
      title: CreateCertificateObjectResponse
      type: object
    CreateCertificateObjectResponse.CertificateDetails:
      additionalProperties: false
      properties:
        AuditComment: {description: 'Audit remarks.

            ', title: Auditcomment, type: string}
        CertificateSelfSigned: {description: 'A self-signed root CA certificate.

            ', title: Certificateselfsigned, type: boolean}
        CertificateSignerArn: {description: "Certificate signer ARN. \n", title: Certificatesignerarn,
          type: string}
        Description: {description: 'A description of certificate object.

            ', title: Description, type: string}
        UpdateToken: {description: "Refresh token.    \n", title: Updatetoken, type: string}
      title: CertificateDetails
      type: object
    CreateCertificateObjectResponse.ResponseData:
      additionalProperties: false
      properties:
        CertificateObjectEntry: {$ref: '#/components/schemas/CreateCertificateObjectResponse.CertificateDetails',
          description: 'The certificate object entry.

            '}
        Name: {description: "Name of the certificate object entry.    \n", title: Name,
          type: string}
        RuleStackName: {description: "Name of the rulestack. \n", title: Rulestackname,
          type: string}
      title: ResponseData
      type: object
    CreateCertificateObjectResponse.Result:
      additionalProperties: false
      properties:
        ErrorCode: {default: 0, description: "Default value of a successful response\
            \ is 0. Any other number indicates an error code.  \n\n400\u2014HTTP bad\
            \ request\n* InvalidRequestException\u2014Operation failed due to invalid\
            \ request. For example, unsupported parameter name or value in the request.\n\
            * LimitExceededException\u2014Operation failed due to violation in limit\
            \ settings.\n* ThrottlingException\u2014Operation failed due to throttling\
            \ limitations.\n* AccessDeniedException\u2014You do not have sufficient\
            \ access to perform this action.\n\n500\u2014Bad request \n* InternalServerError\u2014\
            Your request is valid but Cloud NGFW could not perform the operation due\
            \ to a system issue.\n* InsufficientCapacityException\u2014AWS currently\
            \ does not have enough capacity to fulfill your request.\n", title: Errorcode,
          type: integer}
        Reason: {description: 'The error description.

            ', title: Reason, type: string}
      title: Result
      type: object
    DeleteCertificateObjectRequest:
      additionalProperties: false
      properties: {}
      title: DeleteCertificateObjectRequest
      type: object
    DeleteCertificateObjectResponse:
      additionalProperties: false
      properties:
        Response: {$ref: '#/components/schemas/DeleteCertificateObjectResponse.ResponseData',
          description: 'The API call response.

            '}
        ResponseStatus: {$ref: '#/components/schemas/DeleteCertificateObjectResponse.Result',
          description: 'The API call response status.

            '}
      title: DeleteCertificateObjectResponse
      type: object
    DeleteCertificateObjectResponse.CertificateDetails:
      additionalProperties: false
      properties:
        AuditComment: {description: 'Audit remarks.

            ', title: Auditcomment, type: string}
        CertificateSelfSigned: {description: 'A self-signed root CA certificate.

            ', title: Certificateselfsigned, type: boolean}
        CertificateSignerArn: {description: 'Certificate signer ARN.

            ', title: Certificatesignerarn, type: string}
        Description: {description: 'A description of certificate object.

            ', title: Description, type: string}
        UpdateToken: {description: "Refresh token.    \n", title: Updatetoken, type: string}
      title: CertificateDetails
      type: object
    DeleteCertificateObjectResponse.ResponseData:
      additionalProperties: false
      properties:
        CertificateObjectEntry: {$ref: '#/components/schemas/DeleteCertificateObjectResponse.CertificateDetails',
          description: 'The certificate object entry.

            '}
        Name: {description: "Name of the certificate object entry.    \n", title: Name,
          type: string}
        RuleStackName: {description: "Name of the rulestack. \n", title: Rulestackname,
          type: string}
      title: ResponseData
      type: object
    DeleteCertificateObjectResponse.Result:
      additionalProperties: false
      properties:
        ErrorCode: {default: 0, description: "Default value of a successful response\
            \ is 0. Any other number indicates an error code.  \n\n400\u2014HTTP bad\
            \ request\n* InvalidRequestException\u2014Operation failed due to invalid\
            \ request. For example, unsupported parameter name or value in the request.\n\
            * LimitExceededException\u2014Operation failed due to violation in limit\
            \ settings.\n* ResourceNotFoundException\u2014Unable to locate a resource\
            \ using the parameters you provided.\n* ThrottlingException\u2014Operation\
            \ failed due to throttling limitations.\n* AccessDeniedException\u2014\
            You do not have sufficient access to perform this action.\n\n500\u2014\
            Bad request \n* InternalServerError\u2014Your request is valid but Cloud\
            \ NGFW could not perform the operation due to a system issue.\n* InsufficientCapacityException\u2014\
            AWS currently does not have enough capacity to fulfill your request.\n",
          title: Errorcode, type: integer}
        Reason: {description: 'The error description.

            ', title: Reason, type: string}
      title: Result
      type: object
    DescribeCertificateObjectRequest:
      additionalProperties: false
      properties:
        Candidate: {default: true, description: 'certificate object candidate.

            ', title: Candidate, type: boolean}
        MaxResults: {default: 100, description: "The maximum number of certificate\
            \ objects that you want NGFW to return for this request. \n", exclusiveMaximum: 101,
          exclusiveMinimum: 0, title: Maxresults, type: integer}
        NextToken: {description: 'If the number of certificate objects available for
            retrieval exceeds the maximum you requested, NGFW returns a NextToken
            value in response. To retrieve the next batch of certificate objects,
            use this token in your next request.

            ', maxLength: 2048, minLength: 1, pattern: '^[-0-9A-Za-z:\/+=]+$', title: Nexttoken,
          type: string}
        Running: {default: false, description: 'certificate objects in run state.

            ', title: Running, type: boolean}
      title: DescribeCertificateObjectRequest
      type: object
    DescribeCertificateObjectResponse:
      additionalProperties: false
      properties:
        Response: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.ResponseData',
          description: 'The API call response.

            '}
        ResponseStatus: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.Result',
          description: 'The API call response status.

            '}
      title: DescribeCertificateObjectResponse
      type: object
    DescribeCertificateObjectResponse.CertificateDetails:
      additionalProperties: false
      properties:
        AuditComment: {description: 'Audit remarks.

            ', title: Auditcomment, type: string}
        CertificateSelfSigned: {description: 'A self-signed root CA certificate.

            ', title: Certificateselfsigned, type: boolean}
        CertificateSignerArn: {description: "Certificate signer ARN. \n", title: Certificatesignerarn,
          type: string}
        Description: {description: 'A description of certificate object.

            ', title: Description, type: string}
        UpdateToken: {description: 'Refresh token.

            ', title: Updatetoken, type: string}
      title: CertificateDetails
      type: object
    DescribeCertificateObjectResponse.ResponseData:
      additionalProperties: false
      properties:
        CertificateObjectCandidate: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.CertificateDetails',
          description: 'The certificate object candidate.

            '}
        CertificateObjectRunning: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.CertificateDetails',
          description: 'The certificate objects on run state.

            '}
        Name: {description: "Name of the certificate object entry.    \n", title: Name,
          type: string}
        RuleStackName: {description: "Name of the rulestack. \n", title: Rulestackname,
          type: string}
      title: ResponseData
      type: object
    DescribeCertificateObjectResponse.Result:
      additionalProperties: false
      properties:
        ErrorCode: {default: 0, description: "Default value of a successful response\
            \ is 0. Any other number indicates an error code.  \n\n400\u2014HTTP bad\
            \ request\n* InvalidRequestException\u2014Operation failed due to invalid\
            \ request. For example, unsupported parameter name or value in the request.\n\
            * LimitExceededException\u2014Operation failed due to violation in limit\
            \ settings.\n* ThrottlingException\u2014Operation failed due to throttling\
            \ limitations.\n* AccessDeniedException\u2014You do not have sufficient\
            \ access to perform this action.\n\n500\u2014Bad request \n* InternalServerError\u2014\
            Your request is valid but Cloud NGFW could not perform the operation due\
            \ to a system issue.\n* InsufficientCapacityException\u2014AWS currently\
            \ does not have enough capacity to fulfill your request.\n", title: Errorcode,
          type: integer}
        Reason: {description: 'The error description.

            ', title: Reason, type: string}
      title: Result
      type: object
    ListCertificateObjectResponse:
      additionalProperties: false
      properties:
        Response: {$ref: '#/components/schemas/ListCertificateObjectResponse.ResponseData',
          description: 'The API call response.

            '}
        ResponseStatus: {$ref: '#/components/schemas/ListCertificateObjectResponse.Result',
          description: 'The API call response status.

            '}
      title: ListCertificateObjectResponse
      type: object
    ListCertificateObjectResponse.ResponseData:
      additionalProperties: false
      properties:
        CertificateObjectCandidate:
          description: 'certificate object candidate.

            '
          items: {type: string}
          title: Certificateobjectcandidate
          type: array
        CertificateObjectRunning:
          description: 'certificate objects on run state.

            '
          items: {type: string}
          title: Certificateobjectrunning
          type: array
        CertificateObjectUncommitted:
          description: 'Uncommitted certificate objects.

            '
          items: {$ref: '#/components/schemas/ListCertificateObjectResponse.UncommittedCertificateObjectDetails'}
          title: Certificateobjectuncommitted
          type: array
        NextToken: {description: 'If the number of certificate objects available for
            retrieval exceeds the maximum you requested, NGFW returns a NextToken
            value in response. To retrieve the next batch of certificate objects,
            use this token in your next request.

            ', maxLength: 2048, minLength: 1, pattern: '^[-0-9A-Za-z:\/+=]+$', title: Nexttoken,
          type: string}
        RuleStackName: {description: 'Name of the rulestack.

            ', title: Rulestackname, type: string}
      title: ResponseData
      type: object
    ListCertificateObjectResponse.Result:
      additionalProperties: false
      properties:
        ErrorCode: {default: 0, description: "Default value of a successful response\
            \ is 0. Any other number indicates an error code.  \n\n400\u2014HTTP bad\
            \ request\n* InvalidRequestException\u2014Operation failed due to invalid\
            \ request. For example, unsupported parameter name or value in the request.\n\
            * ResourceNotFoundException\u2014Unable to locate a resource using the\
            \ parameters you provided.\n* ThrottlingException\u2014Operation failed\
            \ due to throttling limitations.\n\n500\u2014Bad request \n* InternalServerError\u2014\
            Your request is valid but Cloud NGFW could not perform the operation due\
            \ to a system issue.\n", title: Errorcode, type: integer}
        Reason: {description: "The error description. \n", title: Reason, type: string}
      title: Result
      type: object
    ListCertificateObjectResponse.UncommittedCertificateObjectDetails:
      additionalProperties: false
      properties:
        Name: {description: 'Name of the certificate object.

            ', maxLength: 128, minLength: 1, pattern: '^[a-zA-Z0-9-]+$', title: Name,
          type: string}
        Operation: {description: 'Certificate object operation.

            ', title: Operation, type: string}
      required: [Name, Operation]
      title: UncommittedCertificateObjectDetails
      type: object
    UpdateCertificateObjectRequest:
      additionalProperties: false
      properties:
        AuditComment: {description: 'Audit remarks.

            ', maxLength: 512, title: Auditcomment, type: string}
        CertificateSelfSigned: {default: false, description: 'A self-signed root CA
            certificate.

            ', title: Certificateselfsigned, type: boolean}
        CertificateSignerArn: {description: "Certificate Signer ARN \n", title: Certificatesignerarn,
          type: string}
        Description: {description: 'A description of certificate object.

            ', maxLength: 512, title: Description, type: string}
        UpdateToken: {description: 'Refresh token.

            ', title: Updatetoken, type: string}
      title: UpdateCertificateObjectRequest
      type: object
    UpdateCertificateObjectResponse:
      additionalProperties: false
      properties:
        Response: {$ref: '#/components/schemas/UpdateCertificateObjectResponse.ResponseData',
          description: 'The API call response.

            '}
        ResponseStatus: {$ref: '#/components/schemas/UpdateCertificateObjectResponse.Result',
          description: 'The API call response status.

            '}
      title: UpdateCertificateObjectResponse
      type: object
    UpdateCertificateObjectResponse.CertificateDetails:
      additionalProperties: false
      properties:
        AuditComment: {description: 'Audit remarks.

            ', title: Auditcomment, type: string}
        CertificateSelfSigned: {description: 'A self-signed root CA certificate.

            ', title: Certificateselfsigned, type: boolean}
        CertificateSignerArn: {description: 'Certificate signer ARN.

            ', title: Certificatesignerarn, type: string}
        Description: {description: 'A description of certificate object.

            ', title: Description, type: string}
        UpdateToken: {description: "Refresh token.    \n", title: Updatetoken, type: string}
      title: CertificateDetails
      type: object
    UpdateCertificateObjectResponse.ResponseData:
      additionalProperties: false
      properties:
        CertificateObjectEntry: {$ref: '#/components/schemas/UpdateCertificateObjectResponse.CertificateDetails',
          description: 'The certificate object entry.

            '}
        Name: {description: "Name of the certificate object entry.    \n", title: Name,
          type: string}
        RuleStackName: {description: "Name of the rulestack. \n", title: Rulestackname,
          type: string}
      title: ResponseData
      type: object
    UpdateCertificateObjectResponse.Result:
      additionalProperties: false
      properties:
        ErrorCode: {default: 0, description: "Default value of a successful response\
            \ is 0. Any other number indicates an error code.  \n\n400\u2014HTTP bad\
            \ request\n* InvalidRequestException\u2014Operation failed due to invalid\
            \ request. For example, unsupported parameter name or value in the request.\n\
            * LimitExceededException\u2014Operation failed due to violation in limit\
            \ settings.\n* ThrottlingException\u2014Operation failed due to throttling\
            \ limitations.\n* AccessDeniedException\u2014You do not have sufficient\
            \ access to perform this action.\n\n500\u2014Bad request \n* InternalServerError\u2014\
            Your request is valid but Cloud NGFW could not perform the operation due\
            \ to a system issue.\n* InsufficientCapacityException\u2014AWS currently\
            \ does not have enough capacity to fulfill your request.\n", title: Errorcode,
          type: integer}
        Reason: {description: 'The error description.

            ', title: Reason, type: string}
      title: Result
      type: object
info:
  contact: {}
  description: "Cloud NGFW uses certificates to access an intelligent feed and to\
    \ enable outbound decryption. These certificates are stored in the [AWS Secrets\
    \ Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html).\
    \ \n"
  title: Manage Certificate Objects
  version: 1.0.0
openapi: 3.0.3
paths:
  /v1/config/rulestacks/{rulestackname}/certificates:
    get:
      description: 'Returns the list of certificate objects associated with the specified
        rulestack.

        '
      operationId: get-v1-config-rulestacks-rulestackname-certificates
      parameters:
      - description: 'The name of the rulestack.

          '
        in: path
        name: rulestackname
        required: true
        schema: {type: string}
      - description: 'If the number of certificate objects available for retrieval
          exceeds the maximum you requested, NGFW returns a NextToken value in response.
          To retrieve the next batch of certificate objects, use this token in your
          next request.

          '
        in: query
        name: nexttoken
        required: false
        schema: {maxLength: 2048, minLength: 1, pattern: '^[-0-9A-Za-z:\/+=]+$', title: Nexttoken,
          type: string}
      - description: 'Certificate object candidate.

          '
        in: query
        name: candidate
        required: false
        schema: {default: true, title: Candidate, type: boolean}
      - description: 'Certificate objects in run state.

          '
        in: query
        name: running
        required: false
        schema: {default: false, title: Running, type: boolean}
      - description: 'Uncommitted certificate objects.

          '
        in: query
        name: uncommitted
        required: false
        schema: {default: false, title: Uncommitted, type: boolean}
      - description: 'The maximum number of certificate objects that you want NGFW
          to return for this request.

          '
        in: query
        name: maxresults
        required: false
        schema: {default: 1024, maximum: 1024, minimum: 1, title: Maxresults, type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ListCertificateObjectResponse'}
          description: OK
      summary: List CertificateObjects
      tags: [ManageCertificateObjects]
    post:
      description: 'Create a server certificate object for the specified rulestack.

        '
      operationId: post-v1-config-rulestacks-rulestackname-certificates
      parameters:
      - description: 'The name of the rulestack.

          '
        in: path
        name: rulestackname
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/CreateCertificateObjectRequest'}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/CreateCertificateObjectResponse'}
          description: OK
      summary: Create a CertificateObject
      tags: [ManageCertificateObjects]
  /v1/config/rulestacks/{rulestackname}/certificates/{name}:
    delete:
      description: 'Delete a certificate object associated with the specified rulestack.

        '
      operationId: delete-v1-config-rulestacks-rulestackname-certificates-name
      parameters:
      - description: 'The name of the rulestack.

          '
        in: path
        name: rulestackname
        required: true
        schema: {type: string}
      - description: 'The name of the certificate.

          '
        in: path
        name: name
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/DeleteCertificateObjectRequest'}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/DeleteCertificateObjectResponse'}
          description: OK
      summary: Delete a CertificateObject
      tags: [ManageCertificateObjects]
    get:
      description: "Returns the certificate object metadata associated with the specified\
        \ rulestack. \n"
      operationId: get-v1-config-rulestacks-rulestackname-certificates-name
      parameters:
      - description: 'The name of the rulestack.

          '
        in: path
        name: rulestackname
        required: true
        schema: {type: string}
      - description: 'The name of the certificate.

          '
        in: path
        name: name
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/DescribeCertificateObjectRequest'}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/DescribeCertificateObjectResponse'}
          description: OK
      summary: Describe a CertificateObject
      tags: [ManageCertificateObjects]
    put:
      description: 'Update the certificate object associated with the specified rulestack.

        '
      operationId: put-v1-config-rulestacks-rulestackname-certificates-name
      parameters:
      - description: 'The name of the rulestack.

          '
        in: path
        name: rulestackname
        required: true
        schema: {type: string}
      - description: 'The name of the certificate.

          '
        in: path
        name: name
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UpdateCertificateObjectRequest'}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/UpdateCertificateObjectResponse'}
          description: OK
      summary: Update a CertificateObject
      tags: [ManageCertificateObjects]
servers:
- {url: 'https://api.us-east-1.aws.cloudngfw.paloaltonetworks.com'}
tags:
- {name: ManageCertificateObjects}
