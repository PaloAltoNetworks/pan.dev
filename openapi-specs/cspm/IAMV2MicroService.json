{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "https://api.prismacloud.io"
    },
    {
      "url": "https://api2.prismacloud.io"
    },
    {
      "url": "https://api3.prismacloud.io"
    },
    {
      "url": "https://api4.prismacloud.io"
    },
    {
      "url": "https://api.anz.prismacloud.io"
    },
    {
      "url": "https://api.eu.prismacloud.io"
    },
    {
      "url": "https://api2.eu.prismacloud.io"
    },
    {
      "url": "https://api.gov.prismacloud.io"
    },
    {
      "url": "https://api.prismacloud.cn"
    },
    {
      "url": "https://api.ca.prismacloud.io"
    },
    {
      "url": "https://api.sg.prismacloud.io"
    },
    {
      "url": "https://api.uk.prismacloud.io"
    },
    {
      "url": "https://api.ind.prismacloud.io"
    },
    {
      "url": "https://api.jp.prismacloud.io"
    },
    {
      "url": "https://api.fr.prismacloud.io"
    }
  ],
  "paths": {
    "/iam/api/v4/search/permission": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get permissions V4",
        "description": "Returns permissions grouped by requested fields and a page token for the next page if applicable",
        "operationId": "permission-search-v4_1",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query records limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 5
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSearchV4RequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSearchV4ResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v3/permission/{permission-id}/list_access": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get accesses of a permission V3",
        "description": "Returns a page of permission's last acceses and a page token for the next page if applicable",
        "operationId": "permissions-accesses-v3",
        "parameters": [
          {
            "name": "permission-id",
            "in": "path",
            "description": "The permission id. Can be retrieved from search/permission api",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The permission id. Can be retrieved from search/permission api",
              "example": "06c3cb4403ac276ff59679139b8e6afca2afe93100c8b39014f033ca0339ff0f"
            },
            "example": "06c3cb4403ac276ff59679139b8e6afca2afe93100c8b39014f033ca0339ff0f"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query records limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionAccessRequestDtoV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionAccessResponseDtoV3"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/suggestion": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Suggest RQL V2",
        "description": "Suggest auto completion for RQL and notify whether the current RQL is valid or not",
        "operationId": "iam-suggest-v2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/search/iam_config": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get permissions role/policy definition V2",
        "description": "Returns the raw config (policy/role definition) which the permission was calculated from",
        "operationId": "permission-raw-config-definition-v2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRawDataRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRawDataResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/search/graph/source_to_granter": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get graph source to granter v2",
        "description": "Get a stream of unique source and granted by values for a given permissions query",
        "operationId": "permissions-graph-source-to-granter-v2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionGraphRequestDtoV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceToGranterPermissionResponseDtoV2"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/search/graph/granter_to_dest": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get graph granter to dest v2",
        "description": "Get a stream of unique granted by and dest by values for a given permissions query",
        "operationId": "permissions-graph-granter-to-dest-v2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionGraphRequestDtoV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GranterToDestPermissionResponseDtoV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/permission/{permission-id}/list_access": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get accesses of a permission V2",
        "description": "Returns a page of permission's last accesses and a page token for the next page if applicable",
        "operationId": "permissions-accesses-v2",
        "parameters": [
          {
            "name": "permission-id",
            "in": "path",
            "description": "The permission id. Can be retrieved from search/permission api",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The permission id. Can be retrieved from search/permission api",
              "example": "06c3cb4403ac276ff59679139b8e6afca2afe93100c8b39014f033ca0339ff0f"
            },
            "example": "06c3cb4403ac276ff59679139b8e6afca2afe93100c8b39014f033ca0339ff0f"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query records limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 5
          },
          {
            "name": "page-token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionAccessRequestDtoV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionAccessResponseDtoV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/asset/{asset-id}/related-asset": {
      "post": {
        "tags": [
          "Asset Relationship Controller V2"
        ],
        "description": "Get resource related assets and a page token for the next page if applicable",
        "operationId": "getCloudAssetRelatedAssetsResponseAsCsv_1",
        "parameters": [
          {
            "name": "asset-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query client records limit, return MAX(0, MIN(client.limit, service.limit))",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 5
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudAssetRelatedAssetsRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAssetRelatedAssetsResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/asset/relationship/search": {
      "post": {
        "tags": [
          "Asset Relationship Controller V2"
        ],
        "description": "Get resource relationships first page and a page token for the next page if applicable",
        "operationId": "getCloudAssetRelationshipResponse",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query records limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 5
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudAssetRelationshipSearchRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAssetRelationshipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/asset/{asset-id}/related-asset": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get Cloud Identity Inventory (CII) resource related assets",
        "description": "Get the related assets of a resource",
        "operationId": "cii-related-assets-v1_1",
        "parameters": [
          {
            "name": "asset-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query client records limit, return MAX(0, MIN(client.limit, service.limit))",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 5
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudAssetRelatedAssetsRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAssetRelatedAssetsResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/asset/relationship/search": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get Cloud Identity Inventory (CII) resource relationships",
        "description": "Get the relationships of a resource",
        "operationId": "cii-asset-relationships-v1",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query records limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 5
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudAssetRelationshipSearchRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAssetRelationshipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/admin-identities": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get admin identities",
        "description": "Returns admin identities by cloud provider for each level",
        "operationId": "admin-identities",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminIdentitiesRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminIdentitiesResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/suggest": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Suggest RQL V1",
        "description": "Suggest auto completion for RQL and notify whether the current RQL is valid or not",
        "operationId": "iam-suggest-v1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get permissions V1",
        "description": "Returns the first page of permissions and a page token for the next page if applicable",
        "operationId": "search-permissions-v1_1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSearchRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSearchResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/graph/source_to_granter": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get graph source to granter v1",
        "description": "Get a stream of unique source and granted by values for a given permissions query",
        "operationId": "permissions-graph-source-to-granter-v1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionGraphRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/graph/granter_to_dest": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get graph granter to dest v1",
        "description": "Get a stream of unique granted by and dest by values for a given permissions query",
        "operationId": "permissions-graph-granter-to-dest-v1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionGraphRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/alert/remediation": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get alert remediation command V1",
        "description": "Get remediation command for an alert",
        "operationId": "alert-remediation-command",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemediationRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemediationResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/access": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get permission last access first page v1",
        "description": "Returns the first page of permission's last access and a page token for the next page if applicable",
        "operationId": "permissions-accesses-v1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionAccessRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionAccessResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/access/page": {
      "post": {
        "tags": [
          "IAM"
        ],
        "summary": "Get permission last access next page v1",
        "description": "Returns page of permission's last access from a given next page token",
        "operationId": "permissions-accesses-next-page-v1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionAccessPageRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionAccessResultDataDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/alert/{alertId}/remediation_command": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Get alert remediation command V2",
        "description": "Get remediation command for an alert",
        "operationId": "alert-remediation-command-v2",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Alert Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Alert Id",
              "example": "I-837629"
            },
            "example": "I-837629"
          }
        ],
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemediationResponseDtoV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v2/alert/{alertId}/query": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Investigate alert V2",
        "description": "Returns the query associated with an alert instance",
        "operationId": "investigate-alert-v2",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The alert id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The alert id",
              "example": "I-34537"
            },
            "example": "I-34537"
          }
        ],
        "responses": {
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RqlResponseDtoV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/resources/{resourceId}/over-permissive-metadata": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Get Least Privilege Access metadata for resource V1",
        "description": "Returns metadata describing whether an asset has potential for access optimization",
        "operationId": "least-privilege-access-metadata-by-resource-v1",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "the resource ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the resource ID",
              "example": "arn:aws:iam::accountId:role/roleName for AWS\n\"(should be encoded - arn%3Aaws%3Aiam%3A%3AaccountId%3Arole%2FroleName),\n 1f50e22a-46b6-3ac9-174d-537287ed9523 for Azure\n"
            },
            "example": "arn:aws:iam::accountId:role/roleName for AWS\n\"(should be encoded - arn%3Aaws%3Aiam%3A%3AaccountId%3Arole%2FroleName),\n 1f50e22a-46b6-3ac9-174d-537287ed9523 for Azure\n"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverPermissiveMetadataResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/resources/{resourceId}/existing-least-privileged-access": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Generates existing Least Privilege Access suggestion for asset V1",
        "description": "Suggest the least privileged access based on existing IAM configurations. This configuration will minimize the number of policies/roles used preserving all the actions used in the last specified X days",
        "operationId": "existing-least-privilege-access-by-resource-v1",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "the resource ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the resource ID",
              "example": "arn:aws:iam::accountId:role/roleName for AWS\n\"(should be encoded - arn%3Aaws%3Aiam%3A%3AaccountId%3Arole%2FroleName),\n 1f50e22a-46b6-3ac9-174d-537287ed9523 for Azure\n"
            },
            "example": "arn:aws:iam::accountId:role/roleName for AWS\n\"(should be encoded - arn%3Aaws%3Aiam%3A%3AaccountId%3Arole%2FroleName),\n 1f50e22a-46b6-3ac9-174d-537287ed9523 for Azure\n"
          },
          {
            "name": "output_format",
            "in": "query",
            "description": "Output format type. One of: JSON / TERRAFORM/ CF",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "JSON"
          },
          {
            "name": "lookback_duration_days",
            "in": "query",
            "description": "Amount of days to look back for used actions",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 90
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExistingLeastPrivilegedAccessResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/resources/{resourceId}/custom-least-privileged-access": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Generates custom (new) Least Privilege Access suggestion for asset V1",
        "description": "Generate a custom least privileged access configuration for the resource. Applying this configuration will minimize the number of policies/roles used while preserving all the actions used in the last specified X days",
        "operationId": "custom-least-privilege-access-by-resource-v1",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "the resource ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the resource ID",
              "example": "arn:aws:iam::accountId:role/roleName for AWS\n\"(should be encoded - arn%3Aaws%3Aiam%3A%3AaccountId%3Arole%2FroleName),\n 1f50e22a-46b6-3ac9-174d-537287ed9523 for Azure\n"
            },
            "example": "arn:aws:iam::accountId:role/roleName for AWS\n\"(should be encoded - arn%3Aaws%3Aiam%3A%3AaccountId%3Arole%2FroleName),\n 1f50e22a-46b6-3ac9-174d-537287ed9523 for Azure\n"
          },
          {
            "name": "output_format",
            "in": "query",
            "description": "Output format type. One of: JSON / TERRAFORM/ CF",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "JSON"
          },
          {
            "name": "lookback_duration_days",
            "in": "query",
            "description": "Amount of days to look back for used actions",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 90
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomLeastPrivilegedAccessResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/assets/{assetId}/over-permissive-metadata": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Get Least Privilege Access metadata for asset V1",
        "description": "Return a metadata and info about the improvement potential for an assert of Least Privilege Access",
        "operationId": "least-privilege-access-metadata-by-uai-v1",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "the UAI asset Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the UAI asset Id",
              "example": "681390424b288d835f5cd03e7bfb0993"
            },
            "example": "681390424b288d835f5cd03e7bfb0993"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverPermissiveMetadataResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/assets/{assetId}/existing-least-privileged-access": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Generates existing Least Privilege Access suggestion for asset V1",
        "description": "Suggest least privileged access from existing resources according to the asset. This configuration will minimize the amount of policies/roles used while preserve all the actions used in the last specified last X days",
        "operationId": "existing-least-privilege-access-by-uai-v1",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "the UAI asset Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the UAI asset Id",
              "example": "681390424b288d835f5cd03e7bfb0993"
            },
            "example": "681390424b288d835f5cd03e7bfb0993"
          },
          {
            "name": "output_format",
            "in": "query",
            "description": "Output format type. One of: JSON / TERRAFORM/ CF",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "JSON"
          },
          {
            "name": "lookback_duration_days",
            "in": "query",
            "description": "Amount of days to look back for used actions",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 90
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExistingLeastPrivilegedAccessResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/iam/api/v1/assets/{assetId}/custom-least-privileged-access": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Generates custom (new) Least Privilege Access suggestion for asset V1",
        "description": "Generate Custom least privileged access configuration for the asset. Applying this configuration will minimize the amount of policies/roles used while preserve all the actions used in the last specified last X days",
        "operationId": "custom-least-privilege-access-by-uai-v1",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "the UAI asset Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the UAI asset Id",
              "example": "681390424b288d835f5cd03e7bfb0993"
            },
            "example": "681390424b288d835f5cd03e7bfb0993"
          },
          {
            "name": "output_format",
            "in": "query",
            "description": "Output format type. One of: JSON / TERRAFORM/ CF",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "JSON"
          },
          {
            "name": "lookback_duration_days",
            "in": "query",
            "description": "Amount of days to look back for used actions",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 90
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "429": {
            "description": "Throttled",
            "headers": {
              "X-RateLimit-Remaining": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Requested-Tokens": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Burst-Capacity": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Replenish-Rate": {
                "style": "simple",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomLeastPrivilegedAccessResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/raw/{permissionId}": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Get permissions role/policy definition V1",
        "description": "Returns the raw config (policy/role definition) which the permission was calculated from",
        "operationId": "permission-raw-config-definition-v1",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    },
    "/api/v1/permission/alert/search": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Investigate alert V1",
        "description": "Returns the query associated with an alert instance",
        "operationId": "investigate-alert-v1",
        "parameters": [
          {
            "name": "alertId",
            "in": "query",
            "description": "Alert id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "I-983167"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RqlResponseDto"
                }
              }
            }
          }
        },
        "x-microservice": "true",
        "x-public": "true",
        "security": [
          {
            "x-redlock-auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiErrorResponseBodyDto": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "innerError": {
            "$ref": "#/components/schemas/ApiErrorResponseDto"
          }
        }
      },
      "ApiErrorResponseDto": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ApiErrorResponseBodyDto"
          }
        }
      },
      "PermissionSearchV4RequestDto": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "RQL query (default: empty string)",
            "example": "config from iam where dest.cloud.type='AWS'"
          },
          "searchId": {
            "type": "string",
            "description": "Saved search id",
            "example": "ff4fcb80-03f6-41dd-8bd8-6179fd46b3a4"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Page Token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          },
          "groupByFields": {
            "uniqueItems": true,
            "type": "array",
            "description": "Fields to group results by. Empty or missing array is considered the same as an array with all possible fields",
            "example": [
              "source",
              "sourceCloudAccount",
              "grantedByEntity",
              "entityCloudAccount",
              "grantedByPolicy",
              "policyCloudAccount",
              "grantedByLevel",
              "action",
              "destination",
              "destCloudAccount",
              "lastAccess"
            ],
            "items": {
              "type": "string",
              "description": "Fields to group results by. Empty or missing array is considered the same as an array with all possible fields",
              "example": "[\"source\",\"sourceCloudAccount\",\"grantedByEntity\",\"entityCloudAccount\",\"grantedByPolicy\",\"policyCloudAccount\",\"grantedByLevel\",\"action\",\"destination\",\"destCloudAccount\",\"lastAccess\"]",
              "enum": [
                "source",
                "sourceCloudAccount",
                "grantedByEntity",
                "entityCloudAccount",
                "grantedByPolicy",
                "policyCloudAccount",
                "grantedByLevel",
                "action",
                "destination",
                "destCloudAccount",
                "lastAccess"
              ]
            }
          }
        }
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP response code",
            "example": "Not found"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Reason"
          }
        }
      },
      "ExceptionResponseDto": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorResponseDto"
          }
        }
      },
      "AbsoluteTimeRangeDto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        ]
      },
      "PermissionExceptionDto": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string",
            "description": "Message code",
            "example": "LIMITED_BY_DENY_STATEMENT"
          }
        },
        "description": "Permission exception list"
      },
      "PermissionSearchV4ResponseDataDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/PermissionV4DataItemDto"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          },
          "searchedDestCloudResourceNames": {
            "uniqueItems": true,
            "type": "array",
            "description": "Searched destination cloud resource names",
            "example": [],
            "items": {
              "type": "string",
              "description": "Searched destination cloud resource names",
              "example": "[]"
            }
          }
        }
      },
      "PermissionSearchV4ResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionSearchV4ResponseDataDto"
          },
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where ..."
          },
          "id": {
            "type": "string",
            "description": "Request user Id",
            "example": "111111"
          },
          "saved": {
            "type": "boolean",
            "description": "Is search saved",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Search name",
            "example": "search-name"
          },
          "timeRange": {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          "searchType": {
            "type": "string",
            "description": "Search type",
            "example": "search-type"
          },
          "description": {
            "type": "string",
            "description": "Search description",
            "example": "search-description"
          },
          "cloudType": {
            "type": "string",
            "description": "Cloud Type",
            "example": "aws"
          }
        }
      },
      "PermissionV4DataItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message id",
            "example": "13"
          },
          "sourcePublic": {
            "type": "boolean",
            "description": "Is source public",
            "example": false
          },
          "sourceCloudType": {
            "type": "string",
            "description": "Source cloud type",
            "example": "AWS"
          },
          "sourceCloudAccount": {
            "type": "string",
            "description": "Source cloud account",
            "example": "123456789"
          },
          "sourceCloudRegion": {
            "type": "string",
            "description": "Source cloud region",
            "example": "AWS London"
          },
          "sourceCloudServiceName": {
            "type": "string",
            "description": "Source cloud service name",
            "example": "iam"
          },
          "sourceResourceName": {
            "type": "string",
            "description": "Source cloud resource name",
            "example": "john"
          },
          "sourceResourceType": {
            "type": "string",
            "description": "Source cloud resource type",
            "example": "user"
          },
          "sourceResourceId": {
            "type": "string",
            "description": "Source cloud resource id",
            "example": "arn:aws:iam::111111:user/john"
          },
          "sourceCloudResourceUai": {
            "type": "string",
            "description": "Source cloud resource UAI",
            "example": "681390624b288d835f4cd03e7bfb0994"
          },
          "sourceIdpService": {
            "type": "string",
            "description": "Source IDP service",
            "example": "AWS Identity Center"
          },
          "sourceIdpDomain": {
            "type": "string",
            "description": "Source IDP domain",
            "example": "idp.com"
          },
          "sourceIdpEmail": {
            "type": "string",
            "description": "Source IDP email",
            "example": "idp@email.com"
          },
          "sourceIdpUserId": {
            "type": "string",
            "description": "Source IDP user id",
            "example": "123456789"
          },
          "sourceIdpUsername": {
            "type": "string",
            "description": "Source IDP user name",
            "example": "idp-user"
          },
          "sourceIdpGroup": {
            "type": "string",
            "description": "Source IDP group",
            "example": "IdpGroup"
          },
          "sourceIdpUai": {
            "type": "string",
            "description": "Source idp UAI",
            "example": "681390424b288d835f5cd03e7bfb0993"
          },
          "destCloudType": {
            "type": "string",
            "description": "Destination cloud type",
            "example": "AWS"
          },
          "destCloudAccount": {
            "type": "string",
            "description": "Destination cloud account",
            "example": "123456789"
          },
          "destCloudRegion": {
            "type": "string",
            "description": "Destination cloud region",
            "example": "AWS London"
          },
          "destCloudServiceName": {
            "type": "string",
            "description": "Destination cloud service name",
            "example": "iam"
          },
          "destResourceName": {
            "type": "string",
            "description": "Destination cloud resource name",
            "example": "john"
          },
          "destResourceType": {
            "type": "string",
            "description": "Destination cloud resource type",
            "example": "user"
          },
          "destResourceId": {
            "type": "string",
            "description": "Destination cloud resource id",
            "example": "arn:aws:iam::111111:user/john"
          },
          "destCloudResourceUai": {
            "type": "string",
            "description": "Destination cloud resource UAI",
            "example": "181390424b298d835f4cd03e7bfb0991"
          },
          "grantedByCloudType": {
            "type": "string",
            "description": "Granted by cloud type",
            "example": "AWS"
          },
          "grantedByCloudPolicyId": {
            "type": "string",
            "description": "Granted by cloud policy Id",
            "example": "arn:aws:iam::aws:policy/aws-policy"
          },
          "grantedByCloudPolicyName": {
            "type": "string",
            "description": "Granted by cloud policy name",
            "example": "my-policy"
          },
          "grantedByCloudPolicyType": {
            "type": "string",
            "description": "Granted by cloud policy type",
            "example": "Customer Managed Policy"
          },
          "grantedByCloudPolicyUai": {
            "type": "string",
            "description": "Granted by cloud policy UAI",
            "example": "771390424b298d835f4cd03e7bfb0232"
          },
          "grantedByCloudPolicyAccount": {
            "type": "string",
            "description": "Granted by cloud policy account",
            "example": "123456789"
          },
          "grantedByCloudEntityId": {
            "type": "string",
            "description": "Granted by cloud entity id",
            "example": "arn:aws:iam::<account>:role/my-role"
          },
          "grantedByCloudEntityName": {
            "type": "string",
            "description": "Granted by cloud entity name",
            "example": "my-role"
          },
          "grantedByCloudEntityType": {
            "type": "string",
            "description": "Granted by cloud entity type",
            "example": "user"
          },
          "grantedByCloudEntityAccount": {
            "type": "string",
            "description": "Granted by cloud entity account",
            "example": "123456789"
          },
          "grantedByCloudEntityUai": {
            "type": "string",
            "description": "Granted by cloud entity UAI",
            "example": "223390424b298d835f4cd03e7bfb0111"
          },
          "grantedByLevelType": {
            "type": "string",
            "description": "Granted by level type",
            "example": "GCP Folder"
          },
          "grantedByLevelId": {
            "type": "string",
            "description": "Granted by level id",
            "example": "level_id"
          },
          "grantedByLevelName": {
            "type": "string",
            "description": "Granted by level name",
            "example": "level_name"
          },
          "grantedByLevelUai": {
            "type": "string",
            "description": "Granted by level UAI",
            "example": "123390424cb99d835f4cd03e7bfb0991"
          },
          "lastAccessDate": {
            "type": "string",
            "description": "Last accessed data",
            "example": "2024-01-02"
          },
          "lastAccessStatus": {
            "type": "string",
            "description": "Last accessed status",
            "example": "ACCESSED",
            "enum": [
              "NOT_AVAILABLE",
              "NOT_ACCESSED_IN_TRACKING_PERIOD",
              "ACCESSED"
            ]
          },
          "accessedResourcesCount": {
            "type": "integer",
            "description": "Accessed resource count",
            "format": "int64",
            "example": 12
          },
          "effectiveActionName": {
            "type": "string",
            "description": "Effective action name",
            "example": "sso:ListApplications"
          },
          "exceptions": {
            "type": "array",
            "description": "Permission exception list",
            "example": [
              {
                "messageCode": "LIMITED_BY_DENY_STATEMENT"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/PermissionExceptionDto"
            }
          },
          "nonNullValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wildCardDestCloudResourceName": {
            "type": "boolean"
          }
        },
        "description": "items list"
      },
      "RelativeTimeRangeDto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/Value"
              }
            }
          }
        ]
      },
      "TimeRangeDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "The time range which the query run at to generate the alert",
        "example": "{''type': 'relative', 'value': {'unit': 'day', 'amount': 7} }",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ToNowTimeRangeDto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Time range value",
                "example": "epoch"
              }
            }
          }
        ]
      },
      "Value": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Unit and amount",
        "example": {
          "unit": "day",
          "amount": 7
        }
      },
      "PermissionSearchRequestDtoV3": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query body (default: empty string)",
            "example": "config from iam where ..."
          },
          "id": {
            "type": "string",
            "description": "Requested search id",
            "example": "123456"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Page Token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          }
        }
      },
      "PermissionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message id",
            "example": "13"
          },
          "sourcePublic": {
            "type": "boolean",
            "description": "Is source public",
            "example": false
          },
          "sourceCloudType": {
            "type": "string",
            "description": "Source cloud type",
            "example": "AWS"
          },
          "sourceCloudAccount": {
            "type": "string",
            "description": "Source cloud account",
            "example": "123456789"
          },
          "sourceCloudRegion": {
            "type": "string",
            "description": "Source cloud region",
            "example": "AWS London"
          },
          "sourceCloudServiceName": {
            "type": "string",
            "description": "Source cloud service name",
            "example": "iam"
          },
          "sourceResourceName": {
            "type": "string",
            "description": "Source cloud resource name",
            "example": "john"
          },
          "sourceResourceType": {
            "type": "string",
            "description": "Source cloud resource type",
            "example": "user"
          },
          "sourceResourceId": {
            "type": "string",
            "description": "Source cloud resource id",
            "example": "arn:aws:iam::111111:user/john"
          },
          "sourceIdpService": {
            "type": "string",
            "description": "Source IDP service"
          },
          "sourceIdpDomain": {
            "type": "string",
            "description": "Source IDP domain"
          },
          "sourceIdpEmail": {
            "type": "string",
            "description": "Source IDP email"
          },
          "sourceIdpUsername": {
            "type": "string",
            "description": "Source IDP user name"
          },
          "sourceIdpGroup": {
            "type": "string",
            "description": "Source IDP group"
          },
          "sourceIdpRrn": {
            "type": "string",
            "description": "Source idp RRN",
            "example": "rrn::other::idp-account-id::idp-user-id"
          },
          "sourceIdpUai": {
            "type": "string",
            "description": "Source idp UAI",
            "example": "681390424b288d835f5cd03e7bfb0993"
          },
          "sourceCloudResourceRrn": {
            "type": "string",
            "description": "Source cloud resource RRN",
            "example": "rrn::iamUser::123456789012::AIDAIDAIDAIDAIDAIDAID"
          },
          "sourceCloudResourceUai": {
            "type": "string",
            "description": "Source cloud resource UAI",
            "example": "681390624b288d835f4cd03e7bfb0994"
          },
          "destCloudType": {
            "type": "string",
            "description": "Destination cloud type",
            "example": "AWS"
          },
          "destCloudAccount": {
            "type": "string",
            "description": "Destination cloud account",
            "example": "123456789"
          },
          "destCloudRegion": {
            "type": "string",
            "description": "Destination cloud region",
            "example": "AWS London"
          },
          "destCloudServiceName": {
            "type": "string",
            "description": "Destination cloud service name",
            "example": "iam"
          },
          "destResourceName": {
            "type": "string",
            "description": "Destination cloud resource name",
            "example": "john"
          },
          "destResourceType": {
            "type": "string",
            "description": "Destination cloud resource type",
            "example": "user"
          },
          "destResourceId": {
            "type": "string",
            "description": "Destination cloud resource id",
            "example": "arn:aws:iam::111111:user/john"
          },
          "destCloudResourceRrn": {
            "type": "string",
            "description": "Destination cloud resource RRN",
            "example": "rrn::other:eu-west-2:123456789012::my-function"
          },
          "destCloudResourceUai": {
            "type": "string",
            "description": "Destination cloud resource UAI",
            "example": "181390424b298d835f4cd03e7bfb0991"
          },
          "effectiveActionName": {
            "type": "string",
            "description": "Effective action name"
          },
          "grantedByCloudType": {
            "type": "string",
            "description": "Granted by cloud type",
            "example": "AWS"
          },
          "grantedByCloudPolicyId": {
            "type": "string",
            "description": "Granted by cloud policy Id",
            "example": "arn:aws:iam::aws:policy/aws-policy"
          },
          "grantedByCloudPolicyName": {
            "type": "string",
            "description": "Granted by cloud policy name",
            "example": "my-policy"
          },
          "grantedByCloudPolicyType": {
            "type": "string",
            "description": "Granted by cloud policy type",
            "example": "Customer Managed Policy"
          },
          "grantedByCloudPolicyRrn": {
            "type": "string",
            "description": "Granted by cloud policy rrn",
            "example": "rrn::iamPolicy::123456789012::arn:aws:iam:eu-west-2"
          },
          "grantedByCloudPolicyUai": {
            "type": "string",
            "description": "Granted by cloud policy UAI",
            "example": "771390424b298d835f4cd03e7bfb0232"
          },
          "grantedByCloudEntityId": {
            "type": "string",
            "description": "Granted by cloud entity id",
            "example": "arn:aws:iam::<account>:role/my-role"
          },
          "grantedByCloudEntityName": {
            "type": "string",
            "description": "Granted by cloud entity name",
            "example": "my-role"
          },
          "grantedByCloudEntityType": {
            "type": "string",
            "description": "Granted by cloud entity type",
            "example": "user"
          },
          "accessedResourcesCount": {
            "type": "integer",
            "description": "Accessed resource count",
            "format": "int64"
          },
          "lastAccessDate": {
            "type": "string",
            "description": "Last accessed data"
          },
          "lastAccessStatus": {
            "type": "string",
            "description": "Last accessed status"
          },
          "grantedByCloudEntityRrn": {
            "type": "string",
            "description": "Granted by cloud entity rrn",
            "example": "rrn::other::123456789:AIDAIDAIDAIDAIDAIDAID"
          },
          "grantedByCloudEntityUai": {
            "type": "string",
            "description": "Granted by cloud entity UAI",
            "example": "223390424b298d835f4cd03e7bfb0111"
          },
          "isWildCardDestCloudResourceName": {
            "type": "boolean",
            "description": "Is destination cloud resource name a wildcard",
            "example": false
          },
          "exceptions": {
            "type": "array",
            "description": "Permission exception list",
            "items": {
              "$ref": "#/components/schemas/PermissionExceptionDto"
            }
          },
          "grantedByLevelType": {
            "type": "string",
            "description": "Granted by level type",
            "example": "GCP Folder"
          },
          "grantedByLevelId": {
            "type": "string",
            "description": "Granted by level id",
            "example": "level_id"
          },
          "grantedByLevelName": {
            "type": "string",
            "description": "Granted by level name",
            "example": "level_name"
          },
          "grantedByLevelRrn": {
            "type": "string",
            "description": "Granted by level rrn",
            "example": "level_rrn"
          },
          "grantedByLevelUai": {
            "type": "string",
            "description": "Granted by level UAI",
            "example": "123390424cb99d835f4cd03e7bfb0991"
          }
        },
        "description": "items list"
      },
      "PermissionSearchResponseDtoV3": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionSearchResultDataDtoV3"
          },
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where ..."
          },
          "id": {
            "type": "string",
            "description": "Request user Id",
            "example": "111111"
          },
          "saved": {
            "type": "boolean",
            "description": "Is search saved",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Search name",
            "example": "search-name"
          },
          "timeRange": {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          "searchType": {
            "type": "string",
            "description": "Search type",
            "example": "search-type"
          },
          "description": {
            "type": "string",
            "description": "Search description",
            "example": "search-description"
          },
          "cloudType": {
            "type": "string",
            "description": "Cloud Type",
            "example": "aws"
          }
        }
      },
      "PermissionSearchResultDataDtoV3": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          },
          "searchedDestCloudResourceNames": {
            "uniqueItems": true,
            "type": "array",
            "description": "Searched destination cloud resource names",
            "example": [],
            "items": {
              "type": "string",
              "description": "Searched destination cloud resource names",
              "example": "[]"
            }
          }
        }
      },
      "PermissionAccessRequestDtoV3": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where ..."
          },
          "nextPageToken": {
            "type": "string",
            "description": "Page Token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          }
        }
      },
      "PermissionAccessResponseDtoV3": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionAccessResultDataDtoV3"
          }
        }
      },
      "PermissionAccessResultDataDtoV3": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/PermissionLastAccessDto"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          }
        },
        "description": "Permissions last access list",
        "readOnly": true
      },
      "PermissionLastAccessDto": {
        "type": "object",
        "properties": {
          "destCloudResourceName": {
            "type": "string",
            "description": "Destination cloud resource name",
            "example": "my-function"
          },
          "lastAccessDate": {
            "type": "string",
            "description": "Action last access date in the format of a unix timestamp",
            "example": "1593691785"
          },
          "destCloudRegion": {
            "type": "string",
            "description": "Action last access region",
            "example": "AWS Virginia"
          },
          "destCloudAccount": {
            "type": "string",
            "description": "Action last access account name",
            "example": "account_name"
          }
        },
        "description": "items list"
      },
      "SuggestRequestDto": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query to validate",
            "example": "config from iam where dest.cloud.type='AWS'"
          }
        }
      },
      "SuggestResponseDto": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Is query valid",
            "readOnly": true,
            "example": true
          },
          "suggestions": {
            "uniqueItems": true,
            "type": "array",
            "description": "Suggestion list",
            "readOnly": true,
            "example": [
              "AND"
            ],
            "items": {
              "type": "string",
              "description": "Suggestion list",
              "readOnly": true,
              "example": "[\"AND\"]"
            }
          },
          "translate": {
            "type": "boolean",
            "description": "Should translate",
            "readOnly": true,
            "example": false
          },
          "needsOffsetUpdate": {
            "type": "boolean",
            "description": "Should add offset from the query beginning",
            "readOnly": true,
            "example": true
          },
          "offset": {
            "type": "integer",
            "description": "The number of characters of offset from the query beginning",
            "format": "int32",
            "readOnly": true,
            "example": 43
          }
        }
      },
      "PermissionSearchRequestDtoV2": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query body",
            "example": "config from iam where source.cloud.type = 'aws'"
          },
          "id": {
            "type": "string",
            "description": "Saved search id",
            "example": "b75169aa-650a-4f03-b748-76cb7e66e383"
          }
        }
      },
      "PermissionSearchResponseDtoV2": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionSearchResultDataDtoV2"
          },
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where source.cloud.type = 'aws'"
          },
          "id": {
            "type": "string",
            "description": "Request user Id",
            "example": "111111"
          },
          "saved": {
            "type": "boolean",
            "description": "Is search saved",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Search name",
            "example": "search-name"
          },
          "timeRange": {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          "searchType": {
            "type": "string",
            "description": "Search type",
            "example": "search-type"
          },
          "description": {
            "type": "string",
            "description": "Search description",
            "example": "search-description"
          },
          "cloudType": {
            "type": "string",
            "description": "Cloud Type",
            "example": "aws"
          }
        }
      },
      "PermissionSearchResultDataDtoV2": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "nextPage": {
            "type": "string",
            "description": "Next page url with the token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          },
          "searchedDestCloudResourceNames": {
            "uniqueItems": true,
            "type": "array",
            "description": "Searched destination cloud resource names",
            "example": [],
            "items": {
              "type": "string",
              "description": "Searched destination cloud resource names",
              "example": "[]"
            }
          }
        }
      },
      "PermissionRawDataRequestDto": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "PermissionId to get the raw config for",
            "example": "06c3cb4403ac276ff59679139b8e6afca2afe93100c8b39014f033ca0339ff0f"
          }
        }
      },
      "PermissionRawDataResponseDto": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string",
            "description": "raw iam config (role/policy) which the permission was calculated from"
          }
        }
      },
      "PermissionGraphRequestDtoV2": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "RQL query",
            "example": "config from iam where source.cloud.type = 'aws'"
          }
        }
      },
      "SourceToGranterPermissionResponseDtoV2": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SourceToGranterPermissionResultDtoV2"
          }
        }
      },
      "SourceToGranterPermissionResultDtoV2": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/SourceToGranterPermissionResultItemDtoV2"
            }
          }
        }
      },
      "SourceToGranterPermissionResultItemDtoV2": {
        "type": "object",
        "properties": {
          "sourceCloudType": {
            "type": "string",
            "example": "AWS",
            "enum": [
              "UNKNOWN",
              "ALL",
              "AWS",
              "AZURE",
              "GCP",
              "ALIBABA_CLOUD",
              "OCI",
              "IBM"
            ]
          },
          "sourceIsPublic": {
            "type": "boolean"
          },
          "sourceCloudAccountId": {
            "type": "string",
            "example": "123456789"
          },
          "sourceCloudServiceName": {
            "type": "string",
            "example": "iam"
          },
          "sourceCloudResourceName": {
            "type": "string",
            "example": "john"
          },
          "sourceIdpService": {
            "type": "string",
            "example": "OKTA",
            "enum": [
              "UNKNOWN",
              "OKTA",
              "AZURE_AD",
              "AWS_IC"
            ]
          },
          "sourceIdpGroup": {
            "type": "string"
          },
          "sourceIdpUsername": {
            "type": "string"
          },
          "grantedByCloudType": {
            "type": "string",
            "example": "AWS",
            "enum": [
              "UNKNOWN",
              "ALL",
              "AWS",
              "AZURE",
              "GCP",
              "ALIBABA_CLOUD",
              "OCI",
              "IBM"
            ]
          },
          "grantedByEntityType": {
            "type": "string",
            "example": "user"
          },
          "grantedByEntityName": {
            "type": "string",
            "example": "my-role"
          }
        },
        "description": "items list"
      },
      "GranterToDestPermissionResponseDtoV2": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GranterToDestPermissionResultDtoV2"
          }
        }
      },
      "GranterToDestPermissionResultDtoV2": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/GranterToDestPermissionResultItemDtoV2"
            }
          }
        }
      },
      "GranterToDestPermissionResultItemDtoV2": {
        "type": "object",
        "properties": {
          "grantedByCloudType": {
            "type": "string",
            "example": "AWS",
            "enum": [
              "UNKNOWN",
              "ALL",
              "AWS",
              "AZURE",
              "GCP",
              "ALIBABA_CLOUD",
              "OCI",
              "IBM"
            ]
          },
          "grantedByEntityType": {
            "type": "string",
            "example": "user"
          },
          "grantedByEntityName": {
            "type": "string",
            "example": "my-role"
          },
          "destCloudType": {
            "type": "string",
            "example": "AWS",
            "enum": [
              "UNKNOWN",
              "ALL",
              "AWS",
              "AZURE",
              "GCP",
              "ALIBABA_CLOUD",
              "OCI",
              "IBM"
            ]
          },
          "destCloudServiceName": {
            "type": "string",
            "example": "iam"
          },
          "destCloudResourceName": {
            "type": "string",
            "example": "john"
          }
        },
        "description": "items list"
      },
      "PolicyValidationRequestDtoV2": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query body",
            "example": "config from iam where source.cloud.type = 'aws'"
          }
        }
      },
      "PolicyValidationResponseDtoV2": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Is policy RQL valid",
            "example": true
          },
          "error": {
            "type": "string",
            "description": "Error description in case of a failure"
          }
        }
      },
      "PermissionAccessRequestDtoV2": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where source.cloud.type = 'aws'"
          }
        }
      },
      "PermissionAccessResponseDtoV2": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionAccessResultDataDtoV2"
          }
        }
      },
      "PermissionAccessResultDataDtoV2": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/PermissionLastAccessDto"
            }
          },
          "nextPage": {
            "type": "string",
            "description": "Next page url with the token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          }
        },
        "description": "Permissions last access list",
        "readOnly": true
      },
      "CloudAssetRelatedAssetsRequestDto": {
        "type": "object",
        "properties": {
          "relationshipType": {
            "type": "string",
            "description": "Relationship Type",
            "example": "aws_policy_role",
            "enum": [
              "aws_role_policy",
              "aws_role_trusted",
              "aws_group_user",
              "aws_group_policy",
              "aws_policy_group",
              "aws_policy_role",
              "aws_policy_resource",
              "aws_ec2_role",
              "azure_userAssigned_serviceApp",
              "azure_userAssigned_roleDefinition",
              "azure_roleDefinition_userAssigned",
              "azure_roleDefinition_user",
              "azure_group_members",
              "azure_group_roleDefinition",
              "azure_roleDefinition_group",
              "azure_servicePrincipal_appRegistration",
              "azure_servicePrincipal_roleDefinition",
              "azure_roleDefinition_servicePrincipal"
            ]
          },
          "lastAccessFromTime": {
            "type": "integer",
            "description": "Last accessed From epoch (epoch)",
            "format": "int64",
            "example": 1678785157
          },
          "lastAccessToTime": {
            "type": "integer",
            "description": "Last accessed To epoch (epoch)",
            "format": "int64",
            "example": 1678785157
          },
          "nextPageToken": {
            "type": "string",
            "description": "Page Token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          }
        }
      },
      "CloudAssetRelatedAssetDto": {
        "type": "object",
        "properties": {
          "targetAssetId": {
            "type": "string",
            "description": "Target Asset Id (unifiedAssetId)",
            "example": "1593691785"
          },
          "targetCloudResourceId": {
            "type": "string",
            "description": "Target Asset Cloud Resource Id",
            "example": "1593691785"
          },
          "targetDisplayName": {
            "type": "string",
            "description": "Target DisplayName"
          },
          "targetResourceType": {
            "type": "string",
            "description": "Target resource type"
          },
          "lastAccessDate": {
            "type": "string",
            "description": "Action last access date in the format of a unix timestamp",
            "example": "1593691785"
          },
          "lastAccessStatus": {
            "type": "string",
            "description": "Last accessed status"
          },
          "grantedByLevelType": {
            "type": "string",
            "description": "Granted by level type"
          }
        },
        "description": "items list"
      },
      "CloudAssetRelatedAssetsResponseDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/CloudAssetRelatedAssetDto"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          }
        }
      },
      "CloudAssetRelationshipSearchRequestDto": {
        "required": [
          "targetApiIds"
        ],
        "type": "object",
        "properties": {
          "sourceApiIds": {
            "type": "array",
            "description": "Prisma Api Ids of the source assets. Can't be supplied together with sourceAssetIds.",
            "example": [
              1
            ],
            "items": {
              "type": "integer",
              "description": "Prisma Api Ids of the source assets. Can't be supplied together with sourceAssetIds.",
              "format": "int32"
            }
          },
          "sourceAssetIds": {
            "type": "array",
            "description": "Asset ids of the source asset (request for its relationships). Can't be supplied together with sourceApiIds.",
            "example": [
              "assetId1"
            ],
            "items": {
              "type": "string",
              "description": "Asset ids of the source asset (request for its relationships). Can't be supplied together with sourceApiIds.",
              "example": "[\"assetId1\"]"
            }
          },
          "targetApiIds": {
            "type": "array",
            "description": "Prisma Api Ids of the target assets",
            "example": [
              2
            ],
            "items": {
              "type": "integer",
              "description": "Prisma Api Ids of the target assets",
              "format": "int32"
            }
          },
          "lastAccessFromTime": {
            "type": "integer",
            "description": "Last accessed From epoch (epoch)",
            "format": "int64",
            "example": 1678785157
          },
          "lastAccessToTime": {
            "type": "integer",
            "description": "Last accessed To time (epoch)",
            "format": "int64",
            "example": 1678785157
          },
          "cloudProviderType": {
            "type": "string",
            "description": "Prisma Cloud Provider Type from this query",
            "example": "AWS",
            "enum": [
              "UNKNOWN",
              "ALL",
              "AWS",
              "AZURE",
              "GCP",
              "ALIBABA_CLOUD",
              "OCI",
              "IBM"
            ]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Page Token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          }
        }
      },
      "CloudAssetRelationshipDto": {
        "type": "object",
        "properties": {
          "targetAssetId": {
            "type": "string",
            "description": "Target Asset Id (unifiedAssetId)",
            "example": "1593691785"
          },
          "targetCloudResourceId": {
            "type": "string",
            "description": "Target Asset Cloud Resource Id",
            "example": "1593691785"
          },
          "targetDisplayName": {
            "type": "string",
            "description": "Target DisplayName"
          },
          "targetResourceType": {
            "type": "string",
            "description": "Target resource type"
          },
          "lastAccessDate": {
            "type": "string",
            "description": "Action last access date in the format of a unix timestamp",
            "example": "1593691785"
          },
          "lastAccessStatus": {
            "type": "string",
            "description": "Last accessed status"
          },
          "grantedByLevelType": {
            "type": "string",
            "description": "Granted by level type"
          },
          "sourceAssetId": {
            "type": "string",
            "description": "Source Asset Id (unifiedAssetId)"
          },
          "sourceCloudResourceId": {
            "type": "string",
            "description": "Source Asset Cloud Resource Id",
            "example": "1593691785"
          },
          "sourceDisplayName": {
            "type": "string",
            "description": "Source Display Name"
          },
          "sourceResourceType": {
            "type": "string",
            "description": "Source Resource type"
          }
        },
        "description": "items list"
      },
      "CloudAssetRelationshipResponseDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/CloudAssetRelationshipDto"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          }
        }
      },
      "PolicyFindingSearchRequestDto": {
        "type": "object",
        "properties": {
          "uaiIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "Set of UAIs",
            "example": "[681390624b288d835f4cd03e7bfb0994]",
            "items": {
              "type": "string",
              "description": "Set of UAIs",
              "example": "[681390624b288d835f4cd03e7bfb0994]"
            }
          },
          "distinctFields": {
            "uniqueItems": true,
            "type": "array",
            "description": "Set of fields to distinct by",
            "example": "[grantedByCloudType, grantedByEntityType, grantedByEntityName, destCloudType, destCloudServiceName, destCloudResourceName, grantedByEntityTypeId, destResourceTypeId, grantedByEntityAssetId, destResourceAssetId ]",
            "items": {
              "type": "string",
              "description": "Set of fields to distinct by",
              "example": "[grantedByCloudType, grantedByEntityType, grantedByEntityName, destCloudType, destCloudServiceName, destCloudResourceName, grantedByEntityTypeId, destResourceTypeId, grantedByEntityAssetId, destResourceAssetId ]",
              "enum": [
                "grantedByCloudType",
                "grantedByEntityType",
                "grantedByEntityName",
                "destCloudType",
                "destCloudServiceName",
                "destCloudResourceName",
                "grantedByEntityTypeId",
                "destResourceTypeId",
                "grantedByEntityAssetId",
                "destResourceAssetId"
              ]
            }
          }
        }
      },
      "PrismaApiCollectionResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "type": "object",
              "description": "items list"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token to be used to fetch the next page",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          }
        }
      },
      "AdminIdentitiesRequestDto": {
        "type": "object",
        "properties": {
          "accountNamesFilter": {
            "type": "array",
            "description": "Account names to filter with",
            "example": "account1,account2",
            "items": {
              "type": "string",
              "description": "Account names to filter with",
              "example": "account1,account2"
            }
          },
          "accountGroupNamesFilter": {
            "type": "array",
            "description": "Account groups names to filter with",
            "example": "account_group1,account_group2",
            "items": {
              "type": "string",
              "description": "Account groups names to filter with",
              "example": "account_group1,account_group2"
            }
          }
        }
      },
      "AdminIdentitiesCloudProviderResponseDto": {
        "type": "object",
        "properties": {
          "levels": {
            "type": "array",
            "description": "Number of admin identities per level",
            "items": {
              "$ref": "#/components/schemas/AdminLevelDto"
            }
          },
          "allIdentitiesCount": {
            "type": "integer",
            "description": "All identities count",
            "format": "int64",
            "example": 100
          },
          "adminIdentitiesCount": {
            "type": "integer",
            "description": "Admin identities count",
            "format": "int64",
            "example": 50
          }
        },
        "description": "All admin identities of AZURE by granted level"
      },
      "AdminIdentitiesResponseDto": {
        "type": "object",
        "properties": {
          "aws": {
            "$ref": "#/components/schemas/AdminIdentitiesCloudProviderResponseDto"
          },
          "gcp": {
            "$ref": "#/components/schemas/AdminIdentitiesCloudProviderResponseDto"
          },
          "azure": {
            "$ref": "#/components/schemas/AdminIdentitiesCloudProviderResponseDto"
          }
        }
      },
      "AdminLevelDto": {
        "type": "object",
        "properties": {
          "levelType": {
            "type": "string",
            "description": "Granted Admin level type",
            "example": "GCP_ORGANIZATION",
            "enum": [
              "UNKNOWN",
              "AWS_ORGANIZATION",
              "AWS_ACCOUNT",
              "GCP_ORGANIZATION",
              "GCP_FOLDER",
              "GCP_PROJECT",
              "GCP_SERVICE",
              "AZURE_RESOURCE",
              "AZURE_MANAGEMENT_GROUP",
              "AZURE_SUBSCRIPTION"
            ]
          },
          "count": {
            "type": "integer",
            "description": "Number of admin identities in this specific level",
            "format": "int64",
            "example": 10
          }
        },
        "description": "Number of admin identities per level"
      },
      "PermissionSearchRequestDto": {
        "required": [
          "limit",
          "query"
        ],
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Query records limit",
            "format": "int32",
            "example": 5
          },
          "query": {
            "type": "string",
            "description": "Query body",
            "example": "config from iam where source.cloud.type = 'aws'"
          },
          "id": {
            "type": "string",
            "description": "Saved search id",
            "example": "b75169aa-650a-4f03-b748-76cb7e66e383"
          }
        }
      },
      "PermissionSearchResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionSearchResultDataDto"
          },
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where ..."
          },
          "id": {
            "type": "string",
            "description": "Request user Id",
            "example": "111111"
          },
          "saved": {
            "type": "boolean",
            "description": "Is search saved",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Search name",
            "example": "search-name"
          },
          "timeRange": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AbsoluteTimeRangeDto"
              },
              {
                "$ref": "#/components/schemas/RelativeTimeRangeDto"
              },
              {
                "$ref": "#/components/schemas/ToNowTimeRangeDto"
              }
            ]
          },
          "searchType": {
            "type": "string",
            "description": "Search type",
            "example": "search-type"
          },
          "description": {
            "type": "string",
            "description": "Search description",
            "example": "search-description"
          },
          "cloudType": {
            "type": "string",
            "description": "Cloud Type",
            "example": "aws"
          }
        }
      },
      "PermissionSearchResultDataDto": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "example": 1243
          },
          "items": {
            "type": "array",
            "description": "Requested permissions list",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "searchedDestCloudResourceNames": {
            "uniqueItems": true,
            "type": "array",
            "description": "Searched destination cloud resource names",
            "example": [],
            "items": {
              "type": "string",
              "description": "Searched destination cloud resource names",
              "example": "[]"
            }
          }
        }
      },
      "PolicyValidationRequestDto": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "RQL Query",
            "example": "config from iam where source.cloud.type = 'aws'"
          }
        }
      },
      "PermissionSearchPageRequestDto": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "pageToken": {
            "type": "string"
          }
        }
      },
      "PermissionGraphRequestDto": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "RQL Query",
            "example": "config from iam where source.cloud.type = 'aws'"
          }
        }
      },
      "RemediationRequestDto": {
        "required": [
          "alerts"
        ],
        "type": "object",
        "properties": {
          "alerts": {
            "type": "array",
            "description": "List of relevant alerts",
            "example": [
              "I-1234",
              "I-1235"
            ],
            "items": {
              "type": "string",
              "description": "List of relevant alerts",
              "example": "[\"I-1234\",\"I-1235\"]"
            }
          }
        }
      },
      "RemediationResponseDto": {
        "type": "object",
        "properties": {
          "alertIdVsCliScript": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "List of relevant remediations",
              "readOnly": true,
              "example": "{\"I-1234\":\"cli command1\",\"I-1235\":\"cli command2\"}"
            },
            "description": "List of relevant remediations",
            "readOnly": true,
            "example": {
              "I-1234": "cli command1",
              "I-1235": "cli command2"
            }
          },
          "cliDescription": {
            "type": "string",
            "description": "Cli Description",
            "readOnly": true,
            "example": "The following are CLI commands required for remediation. Successful execution will limit the relevant permissions of the violating resource.}"
          }
        }
      },
      "PermissionAccessRequestDto": {
        "required": [
          "permissionId",
          "query"
        ],
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "Permission Id",
            "example": "111111"
          },
          "limit": {
            "type": "integer",
            "description": "Query records limit (default 0)",
            "format": "int32",
            "example": 5
          },
          "query": {
            "type": "string",
            "description": "Query string",
            "example": "config from iam where ..."
          }
        }
      },
      "PermissionAccessResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PermissionAccessResultDataDto"
          }
        }
      },
      "PermissionAccessResultDataDto": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "readOnly": true,
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          },
          "totalRows": {
            "type": "integer",
            "description": "Total rows count",
            "format": "int64",
            "readOnly": true,
            "example": 1243
          },
          "items": {
            "type": "array",
            "description": "Permissions list",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PermissionLastAccessDto"
            }
          }
        },
        "description": "Permissions last access list",
        "readOnly": true
      },
      "PermissionAccessPageRequestDto": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Query records limit (default: 0)",
            "format": "int32",
            "example": 5
          },
          "pageToken": {
            "type": "string",
            "description": "Page token (default: empty string)",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          }
        }
      },
      "DbAccountAttributesRequestDto": {
        "required": [
          "accountIds",
          "cloudTypes",
          "tenantIds"
        ],
        "type": "object",
        "properties": {
          "tenantIds": {
            "type": "array",
            "description": "Tenant id of the accounts. if only one tenant id, update all accounts in the tenant. If [-1], update all accounts in the environment",
            "example": 321423423,
            "items": {
              "type": "integer",
              "description": "Tenant id of the accounts. if only one tenant id, update all accounts in the tenant. If [-1], update all accounts in the environment",
              "format": "int32",
              "example": 321423423
            }
          },
          "accountIds": {
            "type": "array",
            "description": "List of account ids. If [-1], update all accounts of tenant",
            "example": "[234234,23q423423]",
            "items": {
              "type": "string",
              "description": "List of account ids. If [-1], update all accounts of tenant",
              "example": "[234234,23q423423]"
            }
          },
          "rootAccountIds": {
            "type": "array",
            "description": "List of root account ids. If [-1], update all root accounts of tenant",
            "example": "[234234,23q423423]",
            "items": {
              "type": "string",
              "description": "List of root account ids. If [-1], update all root accounts of tenant",
              "example": "[234234,23q423423]"
            }
          },
          "cloudTypes": {
            "type": "array",
            "description": "List of cloud types.",
            "example": "AWS",
            "items": {
              "type": "string",
              "description": "List of cloud types.",
              "example": "AWS",
              "enum": [
                "UNKNOWN",
                "ALL",
                "AWS",
                "AZURE",
                "GCP",
                "ALIBABA_CLOUD",
                "OCI",
                "IBM"
              ]
            }
          },
          "epcCalculationTypeNoUnionOnAdd": {
            "type": "boolean",
            "description": "Whether or not to change the calculation type to NO_UNION_ON_ADD",
            "example": true,
            "default": false
          },
          "epcCalculationTypeRegular": {
            "type": "boolean",
            "description": "Whether or not to change the calculation type to REGULAR",
            "example": true,
            "default": false
          },
          "epcRecalcNeeded": {
            "type": "boolean",
            "description": "Whether or not to perform a epc recalc.",
            "example": true,
            "default": false
          },
          "epcStatusTooManyFailures": {
            "type": "boolean",
            "description": "Whether or not to set EPC status to TOO_MANY_FAILURES.",
            "example": true,
            "default": false
          },
          "epcWorkerTypeSmall": {
            "type": "boolean",
            "description": "Whether or not to set EPC worker type to SMALL.",
            "example": true,
            "default": false
          },
          "epcWorkerTypeLarge": {
            "type": "boolean",
            "description": "Whether or not to set EPC worker type to LARGE.",
            "example": true,
            "default": false
          },
          "adminIdentitiesRecalcNeeded": {
            "type": "boolean",
            "description": "Whether or not to perform an admin identities recalc.",
            "example": true,
            "default": false
          },
          "policyIsAccessiveRecalcNeeded": {
            "type": "boolean",
            "description": "Whether or not to perform a policy isAccessive recalc.",
            "example": true,
            "default": false
          },
          "releaseEpcCalculation": {
            "type": "boolean",
            "description": "Whether or not to release stuck accounts.",
            "example": true,
            "default": false
          },
          "rescanNeeded": {
            "type": "boolean",
            "description": "Whether or not to perform a rescan.",
            "example": true,
            "default": false
          }
        },
        "description": "A list of account update requests.",
        "example": "{\"data\":[{\"tenantIds\":-9,\"accountIds\":[\"123456789012\"],\"cloudType\":\"AWS\",\"epcCalculationTypeNoUnionOnAdd\":true,\"epcCalculationTypeRegular\":false,\"epcRecalcNeeded\":true,\"rescanNeeded\":true\"epcStatusTooManyFailures\":false,\"epcWorkerTypeSmall\":false,\"epcWorkerTypeLarge\":true,\"adminIdentitiesRecalcNeeded\":true,\"policyIsAccessiveRecalcNeeded\":true,\"releaseEpcCalculation\":true}]}"
      },
      "DbAccountEpcAttributesChangeRequestDto": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of account update requests.",
            "example": "{\"data\":[{\"tenantIds\":-9,\"accountIds\":[\"123456789012\"],\"cloudType\":\"AWS\",\"epcCalculationTypeNoUnionOnAdd\":true,\"epcCalculationTypeRegular\":false,\"epcRecalcNeeded\":true,\"rescanNeeded\":true\"epcStatusTooManyFailures\":false,\"epcWorkerTypeSmall\":false,\"epcWorkerTypeLarge\":true,\"adminIdentitiesRecalcNeeded\":true,\"policyIsAccessiveRecalcNeeded\":true,\"releaseEpcCalculation\":true}]}",
            "items": {
              "$ref": "#/components/schemas/DbAccountAttributesRequestDto"
            }
          }
        }
      },
      "ResourceDtoV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "example": "a4e1d00b-b835-49c3-a194-16ee8d9aa837"
          },
          "name": {
            "type": "string",
            "example": "groups/01baon6m1j3014o"
          }
        },
        "description": "items list"
      },
      "ResourceIdsResponseV2Dto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResourceIdsResultDtoV2"
          }
        }
      },
      "ResourceIdsResultDtoV2": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "items list",
            "items": {
              "$ref": "#/components/schemas/ResourceDtoV2"
            }
          },
          "nextPage": {
            "type": "string",
            "description": "Next page url with the token",
            "example": "iam/api/{apiVersion}/{apiPath}?page-token=Q74589g444gg"
          }
        }
      },
      "RemediationResponseDtoV2": {
        "type": "object",
        "properties": {
          "cliCommand": {
            "type": "string",
            "description": "Relevant cli command for remediation",
            "example": "cli command"
          },
          "cliDescription": {
            "type": "string",
            "description": "Cli Description",
            "example": "The following are CLI command is required for remediation. Successful execution will limit the relevant permissions of the violating resource.}"
          }
        }
      },
      "RqlResponseDtoV2": {
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRangeDto"
          },
          "query": {
            "type": "string",
            "example": "config from iam where source.cloud.type = 'AWS'"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResourceDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Resource ids and names array",
        "example": [
          {
            "id": "a4e1d00b-b835-49c3-a194-16ee8d9aa837",
            "name": "groups/01baon6m1j3014o"
          }
        ]
      },
      "ResourceIdsResponseDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "Resource ids and names array",
            "example": [
              {
                "id": "a4e1d00b-b835-49c3-a194-16ee8d9aa837",
                "name": "groups/01baon6m1j3014o"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ResourceDto"
            }
          },
          "nextPage": {
            "type": "string",
            "description": "Next page url with the token",
            "example": "iam/api/v1/tenants/{prismaCustomerId}/cloud_types/{cloudType}/accounts/{accountId}/resource_types/{resourceType}/resources?pageToken=Q74589g444gg"
          }
        }
      },
      "OverPermissiveMetadataResponseDto": {
        "type": "object",
        "properties": {
          "totalIamResourceCount": {
            "type": "integer",
            "description": "The total number of iam resources attached to the asset",
            "format": "int32",
            "example": 15
          },
          "overPermissiveCount": {
            "type": "integer",
            "description": "The number of over permissive iam resources attached to the asset",
            "format": "int32",
            "example": 10
          },
          "isCustomLeastPrivilegedSupported": {
            "type": "boolean",
            "description": "Is custom least privileged access supported for asset",
            "example": true
          },
          "isExistingLeastPrivilegedSupported": {
            "type": "boolean",
            "description": "Is existing least privileged access supported for asset",
            "example": true
          },
          "iamResourceType": {
            "type": "string",
            "description": "The type of resources attached to the asset",
            "example": "AWS IAM Policy"
          }
        }
      },
      "ExistingLeastPrivilegedAccessDto": {
        "type": "object",
        "properties": {
          "iamResourceName": {
            "type": "string",
            "description": "The name of the iam resource",
            "example": "MyIamResource"
          },
          "iamResourceId": {
            "type": "string",
            "description": "The id of the iam resource",
            "example": "rrn:aws:iamRole::123456789012:3fab987adf7c268519219cdfe5a4c4c2d4dc:AROAXHNDH53GWC2HSVKSR"
          },
          "iamResourceType": {
            "type": "string",
            "description": "The type of iam resource",
            "example": "AWS_POLICY"
          },
          "formatType": {
            "type": "string",
            "description": "Format type of the access policy",
            "example": "TERRAFORM"
          },
          "snippet": {
            "type": "string",
            "description": "The access policy",
            "example": "Terraform code for creating a policy"
          }
        },
        "description": "Least Privileged Access items"
      },
      "ExistingLeastPrivilegedAccessResponseDto": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          },
          "permissionsInAssetCount": {
            "type": "integer",
            "description": "Number of actions in asset",
            "format": "int32",
            "example": 10
          },
          "permissionsInLeastPrivilegedCount": {
            "type": "integer",
            "description": "Number of actions in least privileged access",
            "format": "int32",
            "example": 10
          },
          "verdicts": {
            "type": "array",
            "description": "Least Privileged result verdicts",
            "items": {
              "$ref": "#/components/schemas/LeastPrivilegedPermissionVerdict"
            }
          },
          "value": {
            "type": "array",
            "description": "Least Privileged Access items",
            "items": {
              "$ref": "#/components/schemas/ExistingLeastPrivilegedAccessDto"
            }
          }
        }
      },
      "LeastPrivilegedPermissionVerdict": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "iamResourceName": {
            "type": "string"
          },
          "keep": {
            "type": "boolean"
          }
        },
        "description": "Least Privileged result verdicts"
      },
      "CustomLeastPrivilegedAccessDto": {
        "type": "object",
        "properties": {
          "formatType": {
            "type": "string",
            "description": "Format type of the access policy",
            "example": "TERRAFORM"
          },
          "snippet": {
            "type": "string",
            "description": "The access policy",
            "example": "Terraform code for creating a policy"
          }
        },
        "description": "Least Privileged Access items"
      },
      "CustomLeastPrivilegedAccessResponseDto": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "++fdfkjsdlfsdfdFDSFDFSDFdfdssfdFDS"
          },
          "permissionsInAssetCount": {
            "type": "integer",
            "description": "Number of actions in asset",
            "format": "int32",
            "example": 10
          },
          "permissionsInLeastPrivilegedCount": {
            "type": "integer",
            "description": "Number of actions in least privileged access",
            "format": "int32",
            "example": 10
          },
          "verdicts": {
            "type": "array",
            "description": "Least Privileged result verdicts",
            "items": {
              "$ref": "#/components/schemas/LeastPrivilegedPermissionVerdict"
            }
          },
          "value": {
            "type": "array",
            "description": "Least Privileged Access items",
            "items": {
              "$ref": "#/components/schemas/CustomLeastPrivilegedAccessDto"
            }
          }
        }
      },
      "RqlResponseDto": {
        "type": "object",
        "properties": {
          "timeRange": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AbsoluteTimeRangeDto"
              },
              {
                "$ref": "#/components/schemas/RelativeTimeRangeDto"
              },
              {
                "$ref": "#/components/schemas/ToNowTimeRangeDto"
              }
            ]
          },
          "query": {
            "type": "string",
            "example": "config from iam where source.cloud.type = 'AWS'"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AzureGroupIdsResponseDto": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "Group ids array",
            "example": [
              "a8eb7d22-a93b-470b-a5dd-cdca638ec4bb",
              "b8eb7d22-a93b-470b-a5dd-cdca638ec4dd"
            ],
            "items": {
              "type": "string",
              "description": "Group ids array",
              "example": "[\"a8eb7d22-a93b-470b-a5dd-cdca638ec4bb\",\"b8eb7d22-a93b-470b-a5dd-cdca638ec4dd\"]"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Query string",
            "example": "=Q74589g444gg"
          }
        }
      }
    },
    "securitySchemes": {
      "x-redlock-auth": {
        "description": "The x-redlock-auth value is a JSON Web Token (JWT).",
        "in": "header",
        "name": "x-redlock-auth",
        "type": "apiKey"
      }
    }
  }
}
