components:
  schemas:
    Aggregate:
      properties:
        field: {description: Field, type: string}
        operator:
          description: Operator
          enum: [max, count, min, avg, sum]
          type: string
    Error:
      properties:
        _error:
          items: {$ref: '#/components/schemas/ErrorResponse'}
          type: array
    ErrorResponse:
      properties:
        code: {type: string}
        message: {type: string}
    Group:
      properties:
        ipv4_prefix: {description: Ipv4 Prefix, type: string}
        is_active_rp: {description: Is Active Rp, type: boolean}
    ListQueryResponse:
      properties:
        count: {format: int32, type: integer}
        deleted_count: {format: int64, type: integer}
        deleted_ids:
          items: {type: string}
          type: array
        id: {type: string}
        next_query: {type: object}
        total_count: {format: int64, type: integer}
      type: object
    ListResponse:
      properties:
        count: {format: int32, type: integer}
        id: {type: string}
      type: object
    MulticastGlobalConfig:
      properties:
        id: {description: Id, type: string}
        spt_switchover_enabled: {description: Spt Switchover Enabled, type: boolean}
    MulticastGlobalConfigScreen:
      properties:
        id: {description: Id, type: string}
        spt_switchover_enabled: {description: Spt Switchover Enabled, type: boolean}
    MulticastGlobalConfigScreenV2N1:
      properties:
        bsm_enabled: {description: Bsm Enabled, type: boolean}
        dr_priority: {description: 'Dr Priority: Range(max = 4294967295L, message
            = MULTICAST_INVALID_DR_PRIORITY, min = 1L) ', format: int64, type: integer}
        id: {description: Id, type: string}
        igmp_protocol_parameters: {$ref: '#/components/schemas/MulticastIgmpProtocolConfig',
          description: 'Igmp Protocol Parameters: Valid '}
        pim_protocol_parameters: {$ref: '#/components/schemas/MulticastPimProtocolConfig',
          description: 'Pim Protocol Parameters: Valid '}
        spt_switchover_enabled: {description: Spt Switchover Enabled, type: boolean}
    MulticastGlobalConfigV2N1:
      properties:
        bsm_enabled: {description: Bsm Enabled, type: boolean}
        dr_priority: {description: 'Dr Priority: Range(max = 4294967295L, message
            = MULTICAST_INVALID_DR_PRIORITY, min = 1L) ', format: int64, type: integer}
        id: {description: Id, type: string}
        igmp_protocol_parameters: {$ref: '#/components/schemas/MulticastIgmpProtocolConfig',
          description: 'Igmp Protocol Parameters: Valid '}
        pim_protocol_parameters: {$ref: '#/components/schemas/MulticastPimProtocolConfig',
          description: 'Pim Protocol Parameters: Valid '}
        spt_switchover_enabled: {description: Spt Switchover Enabled, type: boolean}
    MulticastIgmpProtocolConfig:
      properties:
        last_member_query_count: {description: Last Member Query Count, format: int64,
          type: integer}
        last_member_query_interval: {description: Last Member Query Interval, format: int64,
          type: integer}
        query_interval: {description: Query Interval, format: int64, type: integer}
        query_max_response_time: {description: Query Max Response Time, format: int64,
          type: integer}
    MulticastNeighbor:
      properties:
        address: {description: Address, type: string}
        dr: {description: Dr, type: boolean}
        dr_prio: {description: Dr Prio, type: string}
        expires: {description: Expires, type: string}
        uptime: {description: Uptime, type: string}
    MulticastPimProtocolConfig:
      properties:
        hello_hold_time: {description: Hello Hold Time, format: int64, type: integer}
        hello_interval: {description: Hello Interval, format: int64, type: integer}
        join_prune_interval: {description: Join Prune Interval, format: int64, type: integer}
    MulticastProtocolParameter:
      properties:
        dr_priority: {description: 'Dr Priority: PositiveOrZero(message = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ',
          format: int64, type: integer}
        id: {description: Id, type: string}
        igmp_last_member_query_count: {description: 'Igmp Last Member Query Count:
            PositiveOrZero(message = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ',
          format: int64, type: integer}
        igmp_last_member_query_response_interval: {description: 'Igmp Last Member
            Query Response Interval: PositiveOrZero(message = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ',
          format: int64, type: integer}
        igmp_querier_timeout: {description: 'Igmp Querier Timeout: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        igmp_query_interval: {description: 'Igmp Query Interval: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        igmp_query_response_interval: {description: 'Igmp Query Response Interval:
            PositiveOrZero(message = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ',
          format: int64, type: integer}
        pim_hello_hold_time: {description: 'Pim Hello Hold Time: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        pim_hello_interval: {description: 'Pim Hello Interval: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        pim_join_hold_interval: {description: 'Pim Join Hold Interval: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        pim_join_prune_interval: {description: 'Pim Join Prune Interval: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        pim_spt_threshold: {description: 'Pim Spt Threshold: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        pim_triggered_hello_delay: {description: 'Pim Triggered Hello Delay: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
        pim_ttl_threshold: {description: 'Pim Ttl Threshold: PositiveOrZero(message
            = INVALID_MULTICAST_PROTOCOL_PARAMETER_VALUE) ', format: int64, type: integer}
    MulticastRPConfig:
      properties:
        description: {description: 'Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT:
            Description length exceeds limit, min = 0) ', type: string}
        groups:
          description: 'Groups: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 1024, message = MULTICAST_INVALID_RP_CONFIG_GROUP_LIST,
            required = false) '
          items: {$ref: '#/components/schemas/Group'}
          type: array
        id: {description: Id, type: string}
        ipv4_address: {description: 'Ipv4 Address: IPAddress(allowEmpty = false, allowLinkLocal
            = false, allowNull = false, bcast = DENY, defaultRoute = false, dnsCheck
            = false, message = MULTICAST_RP_CONFIG_INVALID_ADDRESS, type = IP) ',
          type: string}
        name: {description: 'Name: Required(error = NAME_REQD: Please provide resource
            name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource
            exceeds limit., min = 0) ', type: string}
        tags:
          description: 'Tags: ListString(allowDuplicate = false, allowEmpty = true,
            allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG:
            Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false,
            regex = [^,\\s]+, required = false) '
          items: {description: Tags, type: string}
          type: array
      required: [groups, ipv4_address, name]
    MulticastRPConfigQuery:
      properties:
        aggregate: {$ref: '#/components/schemas/Aggregate', description: Aggregate}
        dest_page: {description: Dest Page, format: int32, type: integer}
        getDeleted: {description: GetDeleted, type: boolean}
        group_by:
          description: Group By
          items: {description: Group By, type: string}
          type: array
        id: {description: Id, type: string}
        last_query_ts: {description: Last Query Ts, format: int64, type: integer}
        limit: {description: Limit, format: int32, type: integer}
        next_query: {type: object}
        query_params: {type: object}
        retrieved_fields:
          description: Retrieved Fields
          items: {description: Retrieved Fields, type: string}
          type: array
        retrieved_fields_mask: {description: Retrieved Fields Mask, type: boolean}
        sort_params: {type: object}
        total_count: {description: Total Count, format: int64, type: integer}
    MulticastRPConfigQueryFilter:
      properties:
        description: {description: 'Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT:
            Description length exceeds limit, min = 0) ', type: string}
        groups:
          description: 'Groups: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 1024, message = MULTICAST_INVALID_RP_CONFIG_GROUP_LIST,
            required = false) '
          items: {$ref: '#/components/schemas/Group'}
          type: array
        id: {description: Id, type: string}
        ipv4_address: {description: 'Ipv4 Address: IPAddress(allowEmpty = false, allowLinkLocal
            = false, allowNull = false, bcast = DENY, defaultRoute = false, dnsCheck
            = false, message = MULTICAST_RP_CONFIG_INVALID_ADDRESS, type = IP) ',
          type: string}
        name: {description: 'Name: Required(error = NAME_REQD: Please provide resource
            name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource
            exceeds limit., min = 0) ', type: string}
        tags:
          description: 'Tags: ListString(allowDuplicate = false, allowEmpty = true,
            allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG:
            Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false,
            regex = [^,\\s]+, required = false) '
          items: {description: Tags, type: string}
          type: array
      required: [groups, ipv4_address, name]
    MulticastRPConfigScreen:
      properties:
        description: {description: 'Description: Size(max = 1024, error = DESCRIPTION_EXCEEDS_LIMIT:
            Description length exceeds limit, min = 0) ', type: string}
        groups:
          description: 'Groups: Valid ListObject(allowDuplicate = true, allowEmpty
            = false, allowNull = false, listMaxSize = 1024, message = MULTICAST_INVALID_RP_CONFIG_GROUP_LIST,
            required = false) '
          items: {$ref: '#/components/schemas/Group'}
          type: array
        id: {description: Id, type: string}
        ipv4_address: {description: 'Ipv4 Address: IPAddress(allowEmpty = false, allowLinkLocal
            = false, allowNull = false, bcast = DENY, defaultRoute = false, dnsCheck
            = false, message = MULTICAST_RP_CONFIG_INVALID_ADDRESS, type = IP) ',
          type: string}
        name: {description: 'Name: Required(error = NAME_REQD: Please provide resource
            name.) Size(max = 128, error = NAME_EXCEEDS_LIMIT: Name of the resource
            exceeds limit., min = 0) ', type: string}
        tags:
          description: 'Tags: ListString(allowDuplicate = false, allowEmpty = true,
            allowNull = true, length = 1024, listMaxSize = 10, error = INVALID_TAG:
            Maximum 10 Unique tags of length 1024 each are allowed, noTrim = false,
            regex = [^,\\s]+, required = false) '
          items: {description: Tags, type: string}
          type: array
      required: [groups, ipv4_address, name]
    MulticastRoute:
      properties:
        element_rp: {description: Element Rp, type: boolean}
        flags: {description: Flags, type: string}
        group: {description: Group, type: string}
        incoming_interface: {description: Incoming Interface, type: string}
        outgoing_interfaces:
          description: Outgoing Interfaces
          items: {description: Outgoing Interfaces, type: string}
          type: array
        rp_address: {description: Rp Address, type: string}
        source: {description: Source, type: string}
    MulticastRouteTableQuery:
      properties:
        aggregate: {$ref: '#/components/schemas/Aggregate', description: Aggregate}
        dest_page: {description: Dest Page, format: int32, type: integer}
        getDeleted: {description: GetDeleted, type: boolean}
        group_by:
          description: Group By
          items: {description: Group By, type: string}
          type: array
        id: {description: Id, type: string}
        last_query_ts: {description: Last Query Ts, format: int64, type: integer}
        limit: {description: Limit, format: int32, type: integer}
        next_query: {type: object}
        query_params: {type: object}
        retrieved_fields:
          description: Retrieved Fields
          items: {description: Retrieved Fields, type: string}
          type: array
        retrieved_fields_mask: {description: Retrieved Fields Mask, type: boolean}
        sort_params: {type: object}
        total_count: {description: Total Count, format: int64, type: integer}
    MulticastRouteTableQueryFilter:
      properties:
        element_id: {description: Element Id, type: string}
        id: {description: Id, type: string}
        mroutes:
          description: 'Mroutes: ListObject(allowDuplicate = true, allowEmpty = true,
            allowNull = false, listMaxSize = 5000, error = MULTICAST_ROUTES_REQUIRED:
            Multicast routes are required and the number of routes should be less
            than 5K., required = false) Valid NotNull(error = MULTICAST_ROUTES_REQUIRED:
            Multicast routes are required and the number of routes should be less
            than 5K.) '
          items: {$ref: '#/components/schemas/MulticastRoute'}
          type: array
        site_id: {description: 'Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID)
            NotNull ', type: string}
      required: [mroutes, site_id]
    MulticastRouteTableRequest:
      properties:
        id: {description: Id, type: string}
        mroutes:
          description: 'Mroutes: ListObject(allowDuplicate = true, allowEmpty = true,
            allowNull = false, listMaxSize = 5000, error = MULTICAST_ROUTES_REQUIRED:
            Multicast routes are required and the number of routes should be less
            than 5K., required = false) Valid NotNull(error = MULTICAST_ROUTES_REQUIRED:
            Multicast routes are required and the number of routes should be less
            than 5K.) '
          items: {$ref: '#/components/schemas/MulticastRoute'}
          type: array
      required: [mroutes]
    MulticastStatusQuery:
      properties:
        aggregate: {$ref: '#/components/schemas/Aggregate', description: Aggregate}
        dest_page: {description: Dest Page, format: int32, type: integer}
        getDeleted: {description: GetDeleted, type: boolean}
        group_by:
          description: Group By
          items: {description: Group By, type: string}
          type: array
        id: {description: Id, type: string}
        last_query_ts: {description: Last Query Ts, format: int64, type: integer}
        limit: {description: Limit, format: int32, type: integer}
        next_query: {type: object}
        query_params: {type: object}
        retrieved_fields:
          description: Retrieved Fields
          items: {description: Retrieved Fields, type: string}
          type: array
        retrieved_fields_mask: {description: Retrieved Fields Mask, type: boolean}
        sort_params: {type: object}
        total_count: {description: Total Count, format: int64, type: integer}
    MulticastStatusQueryFilter:
      properties:
        address: {description: 'Address: IPAddress(allowEmpty = false, allowLinkLocal
            = false, allowNull = false, bcast = DENY, defaultRoute = true, dnsCheck
            = false, error = MULTICAST_STATUS_INTERFACE_ADDRESS_REQUIRED: Multicast
            status interface address required., type = IP) ', type: string}
        element_id: {description: Element Id, type: string}
        id: {description: Id, type: string}
        interface_id: {description: Interface Id, type: string}
        name: {description: 'Name: NotNull(error = MULTICAST_STATUS_INTERFACE_NAME_REQUIRED:
            Multicast status interface name required) Size(max = 256, error = MULTICAST_STATUS_INTERFACE_NAME_REQUIRED:
            Multicast status interface name required, min = 1) ', type: string}
        pim_neighbors:
          description: 'Pim Neighbors: ListObject(allowDuplicate = false, allowEmpty
            = true, allowNull = false, listMaxSize = 100, error = MULTICAST_STATUS_NEIGHBORS_TOO_MANY:
            Too many multicast status neighbors., required = false) NotNull(error
            = MULTICAST_STATUS_NEIGHBORS_REQUIRED: Multicast status neighbors required)
            Valid '
          items: {$ref: '#/components/schemas/MulticastNeighbor'}
          type: array
        site_id: {description: 'Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID)
            NotNull ', type: string}
        state: {description: 'State: NotNull(error = MULTICAST_STATUS_INTERFACE_STATE_REQUIRED:
            Multicast status interface state required.) Size(max = 256, error = MULTICAST_STATUS_INTERFACE_STATE_REQUIRED:
            Multicast status interface state required., min = 1) ', type: string}
      required: [pim_neighbors, site_id, address, state, name]
    MulticastStatusResponse:
      properties:
        address: {description: 'Address: IPAddress(allowEmpty = false, allowLinkLocal
            = false, allowNull = false, bcast = DENY, defaultRoute = true, dnsCheck
            = false, error = MULTICAST_STATUS_INTERFACE_ADDRESS_REQUIRED: Multicast
            status interface address required., type = IP) ', type: string}
        element_id: {description: Element Id, type: string}
        id: {description: Id, type: string}
        interface_id: {description: Interface Id, type: string}
        name: {description: 'Name: NotNull(error = MULTICAST_STATUS_INTERFACE_NAME_REQUIRED:
            Multicast status interface name required) Size(max = 256, error = MULTICAST_STATUS_INTERFACE_NAME_REQUIRED:
            Multicast status interface name required, min = 1) ', type: string}
        pim_neighbors:
          description: 'Pim Neighbors: ListObject(allowDuplicate = false, allowEmpty
            = true, allowNull = false, listMaxSize = 100, error = MULTICAST_STATUS_NEIGHBORS_TOO_MANY:
            Too many multicast status neighbors., required = false) NotNull(error
            = MULTICAST_STATUS_NEIGHBORS_REQUIRED: Multicast status neighbors required)
            Valid '
          items: {$ref: '#/components/schemas/MulticastNeighbor'}
          type: array
        site_id: {description: 'Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID)
            NotNull ', type: string}
        state: {description: 'State: NotNull(error = MULTICAST_STATUS_INTERFACE_STATE_REQUIRED:
            Multicast status interface state required.) Size(max = 256, error = MULTICAST_STATUS_INTERFACE_STATE_REQUIRED:
            Multicast status interface state required., min = 1) ', type: string}
      required: [pim_neighbors, site_id, address, state, name]
    PathGroup:
      properties:
        description: {description: Description, type: string}
        id: {description: Id, type: string}
        name: {description: Name, type: string}
        paths:
          description: Paths
          items: {$ref: '#/components/schemas/WANPath'}
          type: array
    PathGroupQuery:
      properties:
        aggregate: {$ref: '#/components/schemas/Aggregate', description: Aggregate}
        dest_page: {description: Dest Page, format: int32, type: integer}
        getDeleted: {description: GetDeleted, type: boolean}
        group_by:
          description: Group By
          items: {description: Group By, type: string}
          type: array
        id: {description: Id, type: string}
        last_query_ts: {description: Last Query Ts, format: int64, type: integer}
        limit: {description: Limit, format: int32, type: integer}
        next_query: {type: object}
        query_params: {type: object}
        retrieved_fields:
          description: Retrieved Fields
          items: {description: Retrieved Fields, type: string}
          type: array
        retrieved_fields_mask: {description: Retrieved Fields Mask, type: boolean}
        sort_params: {type: object}
        total_count: {description: Total Count, format: int64, type: integer}
    PathGroupQueryFilter:
      properties:
        description: {description: 'Description: Size(max = 256, message = PATHGROUP_INVALID_DESCRIPTION,
            min = 0) ', type: string}
        id: {description: Id, type: string}
        name: {description: 'Name: Size(max = 128, message = PATHGROUP_INVALID_NAME,
            min = 0) ', type: string}
        paths:
          description: 'Paths: Valid NotNull(message = PATHGROUP_INVALID_PATHS) Size(max
            = 2147483647, message = PATHGROUP_INVALID_PATHS, min = 1) '
          items: {$ref: '#/components/schemas/WANPath'}
          type: array
      required: [paths]
    PathGroupScreen:
      properties:
        description: {description: 'Description: Size(max = 256, message = PATHGROUP_INVALID_DESCRIPTION,
            min = 0) ', type: string}
        id: {description: Id, type: string}
        name: {description: 'Name: Size(max = 128, message = PATHGROUP_INVALID_NAME,
            min = 0) ', type: string}
        paths:
          description: 'Paths: Valid NotNull(message = PATHGROUP_INVALID_PATHS) Size(max
            = 2147483647, message = PATHGROUP_INVALID_PATHS, min = 1) '
          items: {$ref: '#/components/schemas/WANPath'}
          type: array
      required: [paths]
    WANPath:
      properties:
        label: {description: 'Label: Pattern(message = INVALID_PATH_LABEL, regexp
            = (public|private)-((([1-9])|([1-2][0-9])|(3[0-2]))|([*]))) ', type: string}
        path_type:
          description: 'Path Type: ValidateEnum(enumClass = classOf[PathType], message
            = INVALID_PATH_TYPE, nullAllowed = false) '
          enum: [vpn, direct, servicelink]
          type: string
      required: [path_type]
info:
  contact: {}
  description: List of APIs used to manage multicast specific configurations.
  title: Multicast
  version: Latest
openapi: 3.0.0
paths:
  /sdwan/v2.0/api/multicastroutes/query:
    post:
      description: API to query multicast table
      operationId: post-sdwan-v2.0-api-multicastroutes-query
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastRouteTableQuery'}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListQueryResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastRouteTableQueryFilter'}
                      type: array
                  type: object
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_INPUT}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query Multicast route table (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/multicastrps/query:
    post:
      description: API to query multicast rp config
      operationId: post-sdwan-v2.0-api-multicastrps-query
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastRPConfigQuery'}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListQueryResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastRPConfigQueryFilter'}
                      type: array
                  type: object
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_INPUT}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query Multicast RP config (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/multicaststatus/query:
    post:
      description: API to query multicast status info
      operationId: post-sdwan-v2.0-api-multicaststatus-query
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastStatusQuery'}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListQueryResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastStatusQueryFilter'}
                      type: array
                  type: object
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_INPUT}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Query Multicast status information (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/interfaces/{interface_id}/multicaststatus:
    get:
      description: API to get all multicast status info
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-interfaces-interface_id-multicaststatus
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: Interface Id
        in: path
        name: interface_id
        required: true
        schema: {description: Interface Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastStatusResponse'}
                      type: array
                  type: object
          description: Successful Operation
      summary: Get all Multicast status info (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/multicastglobalconfigs:
    get:
      description: API to get existing multicast global configs
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastglobalconfigs
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastGlobalConfig'}
                      type: array
                  type: object
          description: Successful Operation
      summary: Get all Multicast configs (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/multicastglobalconfigs/{config_id}:
    get:
      description: API to get existing multicast global config
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastglobalconfigs-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: Multicast config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastGlobalConfig'}
          description: Successful Operation
      summary: Get Multicast config (v2.0)
      tags: [Multicast]
    put:
      description: API to update the existing multicast global config
      operationId: put-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastglobalconfigs-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: Multicast Config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastGlobalConfigScreen'}
        description: Details of the Multicast config to be updated
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastGlobalConfig'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_JSON_EXTRA_ATTRIBUTE}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Updates Multicast config (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/multicastprotocolparameters:
    get:
      description: API to get all multicast protocol parameters
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastprotocolparameters
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastProtocolParameter'}
          description: Successful Operation
      summary: Get all Multicast Protocol Parameters (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/multicastroutes:
    get:
      description: API to get all multicast routes
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastroutes
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastRouteTableRequest'}
                      type: array
                  type: object
          description: Successful Operation
      summary: Get all Multicast routes (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/multicastrps:
    get:
      description: API to get all multicast rp configs
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastrps
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastRPConfig'}
                      type: array
                  type: object
          description: Successful Operation
      summary: Get all Multicast RP configs (v2.0)
      tags: [Multicast]
    post:
      description: API to create multicast rp config
      operationId: post-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastrps
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastRPConfigScreen'}
        description: Details of the multicast RP config to be created
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastRPConfig'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_JSON_INPUT}
                  - {code: MULTICAST_RPCONFIG_INVALID_ADDRESS}
                  - {code: MULTICAST_RPCONFIG_OVERLAPPING_ADDRESS}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Creates Multicast RP config (v2.0)
      tags: [Multicast]
  /sdwan/v2.0/api/sites/{site_id}/elements/{element_id}/multicastrps/{config_id}:
    delete:
      description: API to delete the existing multicast rp config
      operationId: delete-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastrps-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: RP Config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastRPConfig'}
                      type: array
                  type: object
          description: Successful Operation
      summary: Deletes Multicast RP config (v2.0)
      tags: [Multicast]
    get:
      description: API to get the multicast rp config
      operationId: get-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastrps-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: Multicast RP config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastRPConfig'}
          description: Successful Operation
      summary: Get Multicast RP config (v2.0)
      tags: [Multicast]
    put:
      description: API to update the existing multicast rp config
      operationId: put-sdwan-v2.0-api-sites-site_id-elements-element_id-multicastrps-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: RP Config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastRPConfigScreen'}
        description: Details of the Multicast RP config to be updated
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastRPConfig'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_JSON_INPUT}
                  - {code: MULTICAST_RPCONFIG_INVALID_ADDRESS}
                  - {code: MULTICAST_RPCONFIG_OVERLAPPING_ADDRESS}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Updates Multicast RP config (v2.0)
      tags: [Multicast]
  /sdwan/v2.1/api/pathgroups:
    get:
      description: get all Path Groups for a tenant.
      operationId: get-sdwan-v2.1-api-pathgroups
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/PathGroup'}
                      type: array
                  type: object
          description: Successful Operation
      summary: get all Path Groups for a tenant. (v2.1)
      tags: [Multicast]
    post:
      description: Create a Path Group for a tenant.
      operationId: post-sdwan-v2.1-api-pathgroups
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PathGroupScreen'}
        description: Details of the path group to be created
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PathGroup'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: INVALID_JSON_EXTRA_ATTRIBUTE}
                  - {code: PATHGROUP_INVALID_DESCRIPTION}
                  - {code: PATHGROUP_INVALID_NAME}
                  - {code: PATHGROUP_INVALID_PATHS}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Create a Path Group for a tenant. (v2.1)
      tags: [Multicast]
  /sdwan/v2.1/api/pathgroups/query:
    post:
      description: Queries db for limit number of network contexts that match query
        params.
      operationId: post-sdwan-v2.1-api-pathgroups-query
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PathGroupQuery'}
        description: Query Details for Path Group
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListQueryResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/PathGroupQueryFilter'}
                      type: array
                  type: object
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: BAD_REQUEST}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Queries db for limit number of network contexts that match query params.
        (v2.1)
      tags: [Multicast]
  /sdwan/v2.1/api/pathgroups/{path_group_id}:
    delete:
      description: Delete A Path Group of a tenant.
      operationId: delete-sdwan-v2.1-api-pathgroups-path_group_id
      parameters:
      - description: Path Group Id
        in: path
        name: path_group_id
        required: true
        schema: {description: Path Group Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PathGroup'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: PATHGROUP_NOT_FOUND}
                  - {code: PATHGROUP_IN_USE}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Delete A Path Group of a tenant. (v2.1)
      tags: [Multicast]
    get:
      description: get A Path Group of a tenant.
      operationId: get-sdwan-v2.1-api-pathgroups-path_group_id
      parameters:
      - description: Path Group Id
        in: path
        name: path_group_id
        required: true
        schema: {description: Path Group Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PathGroup'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: PATHGROUP_NOT_FOUND}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: get A Path Group of a tenant. (v2.1)
      tags: [Multicast]
    put:
      description: Update A Path Group of a tenant.
      operationId: put-sdwan-v2.1-api-pathgroups-path_group_id
      parameters:
      - description: Path Group Id
        in: path
        name: path_group_id
        required: true
        schema: {description: Path Group Id, type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PathGroupScreen'}
        description: Details of the path group to be updated
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PathGroup'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: PATHGROUP_NOT_FOUND}
                  - {code: PATHGROUP_INVALID_DESCRIPTION}
                  - {code: PATHGROUP_INVALID_NAME}
                  - {code: PATHGROUP_INVALID_PATHS}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Update A Path Group of a tenant. (v2.1)
      tags: [Multicast]
  /sdwan/v2.1/api/sites/{site_id}/elements/{element_id}/multicastglobalconfigs:
    get:
      description: API to get existing multicast global configs
      operationId: get-sdwan-v2.1-api-sites-site_id-elements-element_id-multicastglobalconfigs
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                - {$ref: '#/components/schemas/ListResponse'}
                - properties:
                    items:
                      items: {$ref: '#/components/schemas/MulticastGlobalConfigV2N1'}
                      type: array
                  type: object
          description: Successful Operation
      summary: Get all Multicast configs (v2.1)
      tags: [Multicast]
  /sdwan/v2.1/api/sites/{site_id}/elements/{element_id}/multicastglobalconfigs/{config_id}:
    get:
      description: API to get existing multicast global config
      operationId: get-sdwan-v2.1-api-sites-site_id-elements-element_id-multicastglobalconfigs-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: Multicast config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastGlobalConfigV2N1'}
          description: Successful Operation
      summary: Get Multicast config (v2.1)
      tags: [Multicast]
    put:
      description: API to update the existing multicast global config
      operationId: put-sdwan-v2.1-api-sites-site_id-elements-element_id-multicastglobalconfigs-config_id
      parameters:
      - description: Site Id
        in: path
        name: site_id
        required: true
        schema: {description: Site Id, type: string}
      - description: Element Id
        in: path
        name: element_id
        required: true
        schema: {description: Element Id, type: string}
      - description: Multicast Config Id
        in: path
        name: config_id
        required: true
        schema: {description: Config Id, type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MulticastGlobalConfigScreenV2N1'}
        description: Details of the Multicast config to be updated
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MulticastGlobalConfigV2N1'}
          description: Successful Operation
        '400':
          content:
            application/json:
              example:
                value:
                  _error:
                  - {code: ELEMENT_SW_VERSION_NOT_SUPPORTED}
              schema: {$ref: '#/components/schemas/Error'}
          description: Bad Request
      summary: Update Multicast config (v2.1)
      tags: [Multicast]
tags:
- {name: Multicast}
