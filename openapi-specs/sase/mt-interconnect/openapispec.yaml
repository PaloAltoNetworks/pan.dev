openapi: 3.0.0
info:
  title: SP Interconnect Service API
  version: "1.0"
paths:

  /api/cloud/2.0/interconnect/backbones:
    get:
      tags:
      - Backbone API
      summary: Get all backbones
      description: Get all backbones
      parameters:
      - name: defaultBackbone
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get all backbone for a particular tsgId:
                  value:
                    data:
                    - connectionStats:
                        active: 1
                        failed: 2
                        pending: 3
                        staging: 4
                        total: 10
                        totalBandwidth: 0Mbps
                      connections:
                      - bandwidth: BPS_50M
                        bgpPeerAsn: 16550
                        edgeAvailability: REDUNDANT
                        id: 0df743a9-05e5-40b7-bea7-8882560af564
                        name: abc-edge-1
                        partnerEmail: sp@mail.com
                        partnerName: sp_abc_name
                        region: us-central1
                        state: CREATED_CONNECTION
                        status: PENDING
                      tenants:
                      - "1234"
                      - "5678"
                      id: 3113b3ac-f808-42ba-afc0-6a94338cd61f
                      name: backbone-name
                      status: STAGING
                    requestId: dab32ea4-a388-4886-b4f8-491d7ab10e4b
        "400":
          description: Bad Request
    post:
      tags:
      - Backbone Api
      summary: Create new backbone
      description: Create new backbone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackboneEntry'
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Add a backbone:
                  value:
                    data:
                      id: 8c2f06b2-3e71-4833-9cc4-7c28af986630
                      name: backbone_name9
                    requestId: e1bff5ee-3478-4f74-bcac-ddf14670ef5d
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                Add a backbone with invalid payload:
                  value:
                    error:
                      errorCode: 50001
                      errorType: VALIDATION_ERROR
                      httpStatus: 400
                      msg: Backbone name is empty!
                    requestId: 432568e0-05e2-4baa-8595-ed6bb4f98b64
        "409":
          description: Conflict
          content:
            application/json:
              examples:
                Add an already existing backbone:
                  value:
                    error:
                      errorCode: 50003
                      errorType: VALIDATION_ERROR
                      httpStatus: 409
                      msg: Backbone with name already exists!
                    requestId: 432568e0-05e2-4baa-8595-ed6bb4f98b64
        "500":
          description: Server Error
          content:
            application/json:
              examples:
                Add backbone failed due to internal error:
                  value:
                    error:
                      errorCode: 50002
                      errorType: INTERNAL_ERROR
                      httpStatus: 500
                      msg: Failed to add Backbone in db
                    requestId: 432568e0-05e2-4baa-8595-ed6bb4f98b64
  /api/cloud/2.0/interconnect/backbones/{backboneId}:
    get:
      tags:
      - Backbone API
      summary: Get backbone by id
      description: Get backbone by id
      parameters:
      - name: backboneId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get backbone by Id:
                  value:
                    data:
                      connectionStats:
                        active: 0
                        failed: 0
                        pending: 1
                        staging: 0
                        total: 1
                        totalBandwidth: 0Mbps
                      connections:
                      - bandwidth: BPS_50M
                        bgpPeerAsn: 16550
                        edgeAvailability: REDUNDANT
                        id: 0df743a9-05e5-40b7-bea7-8882560af564
                        name: abc-edge-1
                        partnerEmail: sp@mail.com
                        partnerName: sp_abc_name
                        region: us-central1
                        state: CREATED_CONNECTION
                        status: PENDING
                      tenants:
                      - "1234"
                      - "5678"
                      id: 3113b3ac-f808-42ba-afc0-6a94338cd61f
                      name: backbone-name
                      status: PENDING
                    requestId: cc0bf133-e1de-45d9-bdbc-f3fa31696717
        "400":
          description: Bad Request
        "404":
          description: Not Found
          content:
            application/json:
              examples:
                Get backbone by Id not found:
                  value:
                    error:
                      errorCode: 50004
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Backbone not found!
                    requestId: 176b1c95-9801-4138-b7b7-3d7db83bd274
    delete:
      tags:
      - Backbone Api
      summary: Delete backbone
      description: Delete backbone
      parameters:
      - name: backboneId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Delete Backbone:
                  value:
                    data: Successfully Deleted Backbone
                    requestId: 7e656271-20f3-4fa4-9c4a-e0f455476fe9
        "400":
          description: Bad Request
        "404":
          description: Not Found
          content:
            application/json:
              examples:
                Delete Backbone not found:
                  value:
                    error:
                      errorCode: 50004
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Backbone not found!
                    requestId: 33a4acfb-d3ee-491e-96ce-ccce0e8d3ba4
        "500":
          description: Server Error
          content:
            application/json:
              examples:
                Delete Backbone failed:
                  value:
                    error:
                      errorCode: 50005
                      errorType: INTERNAL_ERROR
                      httpStatus: 500
                      msg: Backbone delete failed!
                    requestId: 33a4acfb-d3ee-491e-96ce-ccce0e8d3ba4
  /api/cloud/2.0/interconnect/backbones/{backboneId}/connections:
    get:
      tags:
      - Connection API
      summary: Get connections in backbone
      description: Get connections in backbone
      parameters:
      - name: backboneId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get Connections in a backbone:
                  value:
                    data:
                    - bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      edgeAvailability: ZONE1
                      id: dee52272-d1e2-4b88-9ebc-a5e70e414d58
                      name: abc-edge-1
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: NOT_STARTED
                      status: PENDING
                    requestId: 36ea5c86-bf56-4e7a-ad8b-19f246532937
        "400":
          description: Bad Request
        "500":
          description: Server Error
    post:
      tags:
      - Connection Api
      summary: Create connection in backbone
      description: Create connection in backbone
      parameters:
      - name: backboneId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEntry'
      responses:
        "201":
          description: Success
          content:
            application/json:
              examples:
                Add connection in backbone:
                  value:
                    data:
                    - bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      edgeAvailability: enum(REDUNDANT/ZONE1/ZONE2)
                      id: 242e46fd-8408-40ea-b815-8dcd4ad73ad5
                      name: abc-edge-1
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: NOT_STARTED
                      status: enum(PENDING/STAGING/ACTIVE/FAILED)
                      tenants: 0
                    - bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      edgeAvailability: enum(REDUNDANT/ZONE1/ZONE2)
                      id: 5982d9c3-2bce-4e21-b9ae-ad769e10c939
                      name: abc-edge-2
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: NOT_STARTED
                      status: enum(PENDING/STAGING/ACTIVE/FAILED)
                      tenants: 0
                    requestId: 9b1ee5d1-0912-4aca-a8cd-b1fc1d662f0c
        "404":
          description: Bad Request
          content:
            application/json:
              examples:
                Add connection, backbone not found:
                  value:
                    error:
                      errorCode: 50004
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Backbone not found!
                    requestId: d42dba1a-23f1-4818-813b-2da9f35c95bb
        "400":
          description: Bad Request
        "500":
          description: Server Error
          content:
            application/json:
              examples:
                Add connection failed in GCP:
                  value:
                    error:
                      errorCode: 50020
                      errorType: INTERNAL_ERROR
                      httpStatus: 500
                      msg: Failed adding Cloud Router in GCP!
                    requestId: d42dba1a-23f1-4818-813b-2da9f35c95bb
  /api/cloud/2.0/interconnect/backbones/{backboneId}/connections/{connectionId}:
    get:
      tags:
      - Connection API
      summary: Get connection by Id
      description: Get connection by Id
      parameters:
      - name: backboneId
        in: path
        required: true
        schema:
          type: string
      - name: connectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get Connection by Id:
                  value:
                    data:
                      bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      edgeAvailability: ZONE1
                      id: dee52272-d1e2-4b88-9ebc-a5e70e414d58
                      name: abc-edge-1
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: CREATED_CONNECTION
                      status: PENDING
                    requestId: 138de731-25c2-4001-8ea5-d81992c146d7
        "404":
          description: Bad Request
          content:
            application/json:
              examples:
                Get connection by Id not found:
                  value:
                    error:
                      errorCode: 50007
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Connection not found!
                    requestId: 7c066854-29e8-43a9-b5ae-052362693578
        "400":
          description: Bad Request
        "500":
          description: Server Error
    delete:
      tags:
      - Connection Api
      summary: Delete connection by id
      description: Delete connection by id
      parameters:
      - name: backboneId
        in: path
        required: true
        schema:
          type: string
      - name: connectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Delete Backbone:
                  value:
                    data: Successfully Deleted Connection
                    requestId: 7e656271-20f3-4fa4-9c4a-e0f455476fe9
        "404":
          description: Bad Request
          content:
            application/json:
              examples:
                Delete Connection not found:
                  value:
                    error:
                      errorCode: 50007
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Connection not found!
                    requestId: cf32af05-7df6-4dd2-b27e-7b6ef2683145
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/regions:
    get:
      tags:
      - Region API
      summary: Get list of supported regions
      description: Get list of supported regions
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get Regions:
                  value:
                    data:
                    - asia-east1
                    - asia-east2
                    - asia-south1
                    - asia-south2
                    - asia-southeast1
                    - asia-southeast2
                    - australia-southeast1
                    - australia-southeast2
                    - europe-north1
                    - europe-southwest1
                    - europe-west1
                    - europe-west2
                    - europe-west3
                    - europe-west4
                    - europe-west6
                    - europe-west8
                    - europe-west9
                    - northamerica-northeast1
                    - northamerica-northeast2
                    - southamerica-east1
                    - southamerica-west1
                    - us-central1
                    - us-east1
                    - us-east4
                    - us-south1
                    - us-west1
                    - us-west2
                    requestId: 06bd35c6-e446-4e2a-96ae-a6b05607084b
  /api/cloud/2.0/interconnect/tenant/info:
    get:
      tags:
        - Tenant Information API
      summary: Get Tenant Info
      description: Get Tenant Info
      parameters:
        - name: root_tsgId
          in: query
          example: 123456789
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Backbone Details of a tenant:
                  value:
                    - backboneId: PA_Default
                      backboneName: PA_Default
                      cdlTenantId: "1781443287"
                      tsgId: "1600181220"
        "400":
          description: Bad Request
        "500":
          description: Server Error

  /api/cloud/2.0/interconnect/monitor/backbones/theatres:
    get:
      tags:
        - Backbone Monitoring API
      summary: Get list of Backbone monitoring API
      description: Get list of Backbone monitoring API
      parameters:
        - name: backboneId
          in: query
          schema:
            type: string
        - name: tsgId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Theatre to Region Mapping:
                  value:
                    - theatre: Theatre1
                      region:
                        - Test
                        - Test1
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/backbones/traffic:
    post:
      tags:
        - Backbone Monitoring API
      summary: Backbone Stats
      description: Get Ingress/Egress Traffic
      parameters:
        - name: lifeTime
          in: query
          example: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
            examples:
              Backbone Egress Data Transfer:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: egress_traffic
                      function: sum
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
              Backbone Egress Data Transfer Lifetime:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: egress_traffic
                      function: sum
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: lessThan
                        values:
                          - 1234567890
              Backbone Data Transfer Over Time:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: egress_traffic
                      function: sum
                    - property: ingress_traffic
                      function: sum
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Backbone Egress Data Transfer:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                Backbone Egress Data Transfer Lifetime:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                Backbone Data Transfer Over Time:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                      ingress_traffic: 89.0
                      event_time: 34567890
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                      ingress_traffic: 89.0
                      event_time: 34567987
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/backbones/throughput:
    post:
      tags:
        - Backbone Monitoring API
      summary: Backbone Stats
      description: Get Ingress/Egress Throughput
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
            examples:
              Throughput By Region:
                value:
                  properties:
                    - property: region
                    - property: event_time
                    - property: egress_throughput
                    - property: ingress_throughput
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: region
                        operator: in
                        values:
                          - us-east1
                          - us-west1
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
              Throughput By Backbone:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: event_time
                    - property: egress_throughput
                    - property: ingress_throughput
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: backbone_id
                        operator: in
                        values:
                          - "1"
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Throughput By Region:
                  value:
                    - region: us-west1
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
                    - region: us-west2
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
                Throughput By Backbone:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
                    - backbone_id: 10
                      backbone_name: Test
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/backbones/traffic/{tsgId}:
    post:
      tags:
        - Backbone Monitoring API
      summary: Backbone Stats by Tenant
      description: Get Ingress/Egress Traffic by tenant
      parameters:
        - name: tsgId
          in: path
          required: true
          example: 123456789
          schema:
            type: string
        - name: lifeTime
          in: query
          example: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
            examples:
              Backbone Egress Data Transfer per Tenant:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: egress_traffic
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
              Backbone Egress Data Transfer Lifetime per Tenant:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: egress_traffic
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: lessThan
                        values:
                          - 1234567890
              Backbone Data Transfer Over Time per Tenant:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: event_time
                    - property: egress_traffic
                    - property: ingress_traffic
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Backbone Egress Data Transfer per Tenant:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                Backbone Egress Data Transfer Lifetime per Tenant:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                Backbone Data Transfer Over Time per Tenant:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                      ingress_traffic: 89.0
                      event_time: 34567890
                    - backbone_id: 10
                      backbone_name: Test
                      egress_traffic: 100.0
                      ingress_traffic: 89.0
                      event_time: 34567987
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/backbones/throughput/{tsgId}:
    post:
      tags:
        - Backbone Monitoring API
      summary: Backbone Stats by Tenant
      description: Get Ingress/Egress Throughput by tenant
      parameters:
        - name: tsgId
          in: path
          example: 123456789
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
            examples:
              Throughput By Region per Tenant:
                value:
                  properties:
                    - property: region
                    - property: event_time
                    - property: egress_throughput
                    - property: ingress_throughput
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: region
                        operator: in
                        values:
                          - us-east1
                          - us-west1
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
              Throughput By Backbone per Tenant:
                value:
                  properties:
                    - property: backbone_name
                    - property: backbone_id
                    - property: event_time
                    - property: egress_throughput
                    - property: ingress_throughput
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: backbone_id
                        operator: in
                        values:
                          - "1"
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Throughput By Region per Tenant:
                  value:
                    - region: us-west1
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
                    - region: us-west2
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
                Throughput By Backbone per Tenant:
                  value:
                    - backbone_id: 10
                      backbone_name: Test
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
                    - backbone_id: 10
                      backbone_name: Test
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 34567890
        "400":
          description: Bad Request
        "500":
          description: Server Error

  /api/cloud/2.0/interconnect/monitor/connections/connectionStats:
    post:
      tags:
        - Connection Monitoring API
      summary: Get Connection Stats
      description: Get the connection stats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
            examples:
              Connections:
                value:
                  properties:
                    - property: connection_name
                    - property: backbone_name
                    - property: egress_throughput
                      function: avg
                    - property: ingress_throughput
                      function: avg
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
              Connections Per Backbone:
                value:
                  properties:
                    - property: connection_name
                    - property: egress_throughput
                      function: avg
                    - property: ingress_throughput
                      function: avg
                    - property: backbone_name
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: backbone_name
                        operator: in
                        values:
                          - backbone1
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Connections:
                  value:
                    - backbone_name: backbone1
                      connection_name: connection1
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      status: ACTIVE
                      upTime: 123456
                      tenants: 5
                Connections Per Backbone:
                  value:
                    - backbone_name: backbone1
                      connection_name: connection1
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      status: ACTIVE
                      upTime: 123456
                      tenants: 5
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/connections/latency:
    post:
      tags:
        - Connection Monitoring API
      summary: Get Latency
      description: Get the latency metrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
            examples:
              Connection Latency to PA Edge:
                value:
                  properties:
                    - property: region
                    - property: latency
                    - property: event_time
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: connection_id
                        operator: in
                        values:
                          - "12345"
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Connection Latency to PA Edge:
                  value:
                    - connection_name: connection1
                      latency: 100.0
                      event_time: 9876547
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/connections/traffic:
    post:
      tags:
        - Connection Monitoring API
      summary: Get Connection Stats
      description: Get Ingress/Egress Traffic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
            examples:
              Ingress Egress Data Transfer:
                value:
                  properties:
                    - property: connection_name
                    - property: egress_traffic
                      function: sum
                    - property: ingress_traffic
                      function: sum
                    - property: connection_id
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: connection_name
                        operator: in
                        values:
                          - connection1
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Ingress Egress Data Transfer:
                  value:
                    - connection_id: id1
                      connection_name: connection1
                      egress_traffic: 100.0
                      ingress_traffic: 89.0
                      event_time: 9876547
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /api/cloud/2.0/interconnect/monitor/connections/throughput:
    post:
      tags:
        - Connection Monitoring API
      summary: Get Connection Stats
      description: Get Ingress/Egress Throughput
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
            examples:
              Ingress Egress Throughput:
                value:
                  properties:
                    - property: connection_name
                    - property: egress_throughput
                      function: avg
                    - property: ingress_throughput
                      function: avg
                    - property: connection_id
                    - property: event_time
                  filter:
                    operator: AND
                    rules:
                      - property: event_time
                        operator: last_n_days
                        values:
                          - 7
                      - property: connection_name
                        operator: in
                        values:
                          - connection1
                  histogram:
                    property: event_time
                    range: day
                    enableEmptyInterval: false
                    value: "1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Ingress Egress Throughput:
                  value:
                    - connection_id: id1
                      connection_name: connection1
                      egress_throughput: 100.0
                      ingress_throughput: 89.0
                      event_time: 9876547
        "400":
          description: Bad Request
        "500":
          description: Server Error

  /api/cloud/2.0/interconnect/ip-pool:
    get:
      tags:
        - IP Pool API
      summary: Get all ip pools
      description: Get all ip pools
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                List IP Pools:
                  value:
                    data:
                    - id: 9c68ad1e-5112-4dd2-9b8d-b55708dd2f00
                      ipBlocks:
                      - cidr:
                        - 14.3.0.0/24
                        - 14.1.0.0/24
                        displayName: US West
                        edgeLocation: us-west-1
                      - cidr:
                        - 14.1.0.0/24
                        displayName: US Southwest
                        edgeLocation: us-west-201
                      ipProvider: SP
                      name: demo-1
                      permittedActions:
                      - UPDATE_IP_POOL
                      region: us-west2
                      state: SUBNETWORK_UPDATE_CIDR_COMPLETE
                      status: READY
                      tsgId: "1091039496"
                    - id: a55d7799-997d-4cb3-8d68-318f1909b842
                      ipBlocks:
                      - cidr:
                        - 4.56.78.0/25
                        displayName: Senegal
                        edgeLocation: senegal
                      ipProvider: SP
                      name: sample-24
                      permittedActions:
                      - ASSIGN_IP_POOL
                      - DELETE_IP_POOL
                      - UPDATE_IP_POOL
                      region: europe-west1
                      state: NOT_STARTED
                      status: PENDING
                      tsgId: "1091039496"
                    requestId: 86062188-ccb4-4d22-8c00-de0a49fed038
        "400":
          description: Bad Request
    post:
      tags:
        - IP Pool Api
      summary: Create new IP Pool
      description: Create new IP Pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPPoolEntry'
      responses:
        "201":
          description: Success
          content:
            application/json:
              examples:
                Add an IP Pool:
                  value:
                    data:
                      id: 7673a661-a98b-4202-b70a-8edc3934a3f5
                      ipBlocks:
                      - cidr:
                        - 21.58.1.0/29
                        edgeLocation: mexico-central
                      ipProvider: SP
                      name: ip-pool-test
                      permittedActions:
                      - ASSIGN_IP_POOL
                      - DELETE_IP_POOL
                      - UPDATE_IP_POOL
                      region: us-south1
                      state: NOT_STARTED
                      status: PENDING
                      tsgId: "1091039496"
                    requestId: a097e994-e9e2-4b7a-8c52-606f9a60b42b
        "500":
          description: Internal Error
        "400":
          description: Bad Request
  /api/cloud/2.0/interconnect/ip-pool/assign:
    post:
      tags:
        - IP Pool API
      summary: Assign an IP Pool
      description: Assign an IP Pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignIPPoolEntry'
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Assign an IP Pool:
                  value:
                    data:
                      id: 7673a661-a98b-4202-b70a-8edc3934a3f5
                      ipBlocks:
                        - cidr:
                            - 21.58.1.0/29
                          displayName: Mexico Central
                          edgeLocation: mexico-central
                      ipProvider: SP
                      name: ip-pool-test
                      permittedActions: [ ]
                      region: us-south1
                      state: SUBNETWORK_UPDATE_CIDR_IN_PROGRESS
                      status: IN_PROGRESS
                      tsgId: "1091039496"
                    requestId: 6eb154b3-5ac0-441c-a8e4-a092f5b5b588
        "500":
          description: Internal Error
        "400":
          description: Bad Request
  /api/cloud/2.0/interconnect/ip-pool/region:
    get:
      tags:
        - IP Pool API
      summary: Get IP Pool regions and edgeLocations
      description: Get IP Pool regions and edgeLocations
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get IP Pool regions/edge locations:
                  value:
                    data:
                      - edgeLocation:
                          - displayName: US Southwest
                            edgeLocation: us-west-201
                          - displayName: US West
                            edgeLocation: us-west-1
                        region: us-west2
                      - edgeLocation:
                          - displayName: US Central West
                            edgeLocation: us-west-3
                        region: us-west3
                    requestId: e459bba9-ca17-4bfa-a55a-f7305a7e8f75
  /api/cloud/2.0/interconnect/ip-pool/{ipPoolId}:
    get:
      tags:
        - IP Pool Api
      summary: Get ip pool by id
      description: Get ip pool by id
      parameters:
        - name: ipPoolId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Get IP Pool by id:
                  value:
                    data:
                      id: 9c68ad1e-5112-4dd2-9b8d-b55708dd2f00
                      ipBlocks:
                        - cidr:
                            - 14.1.0.0/24
                          cidrInUse:
                            - 14.1.0.0/24
                          displayName: US Southwest
                          edgeLocation: us-west-201
                        - cidr:
                            - 14.3.0.0/24
                            - 14.1.0.0/24
                          cidrInUse:
                            - 14.3.0.0/24
                            - 14.1.0.0/24
                          displayName: US West
                          edgeLocation: us-west-1
                      ipProvider: SP
                      name: demo-1
                      permittedActions:
                        - UPDATE_IP_POOL
                      region: us-west2
                      state: SUBNETWORK_UPDATE_CIDR_COMPLETE
                      status: READY
                      tsgId: "1091039496"
                    requestId: adfa0a27-fe75-45ed-bf6d-48d82816f322
        "400":
          description: Bad Request
    put:
      tags:
        - IP Pool API
      summary: Update IP Pool
      description: Update IP Pool
      parameters:
        - name: ipPoolId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPPoolEntry'
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Update IP Pool:
                  value: |-
                    {
                          "data": {
                              "id": "7673a661-a98b-4202-b70a-8edc3934a3f5",
                              "ipBlocks": [
                                  {
                                      "cidr": [
                                          "21.58.2.0/29"
                                      ],
                                      "displayName": "Mexico Central",
                                      "edgeLocation": "mexico-central"
                                  }
                              ],
                              "ipProvider": "SP",
                              "name": "ip-pool-test",
                              "permittedActions": [],
                              "region": "us-south1",
                              "state": "NOT_STARTED",
                              "status": "PENDING"
                              "tsgId": "1091039496"
                          },
                          "requestId": "6eb154b3-5ac0-441c-a8e4-a092f5b5b588"
                    }
        "500":
          description: Internal Error
        "400":
          description: Bad Request
    delete:
      tags:
        - IP Pool Api
      summary: Get ip pool by id
      description: Get ip pool by id
      parameters:
        - name: ipPoolId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Delete IP Pool by id:
                  value:
                    data: IP Pool successfully deleted
                    requestId: e34443d5-dfbd-482b-a76c-5d753034efc0
  /api/cloud/2.0/interconnect/monitor/ip-pool-usage:
    get:
      tags:
        - IP Pool Monitor API
      summary: Get IP Pool usage for a SP
      description: Get IP Pool usage
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                IP Pool Usage:
                  value:
                    - configuredIps: 768
                      incidentCount: 0
                      location: US West
                      name: anil
                      percentageUsed: 0.0
                      region: us-west2
                      usedIps: 0
        "400":
          description: Bad Request
        "500":
          description: Server Error

components:
  schemas:
    AssignIPPoolEntry:
      required:
        - ipPoolId
      type: object
      properties:
        ipPoolId:
          pattern: \S
          type: string
    BackboneEntry:
      required:
      - name
      type: object
      properties:
        id:
          type: string
        name:
          pattern: \S
          type: string
        status:
          type: string
        connectionStats:
          $ref: '#/components/schemas/ConnectionStats'
        tenants:
          uniqueItems: true
          type: array
          items:
            type: string
        connections:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionEntry'
    BackboneFilter:
      required:
      - operator
      type: object
      properties:
        operator:
          description: Always set to AND
          type: string
        rules:
          type: array
          items:
            type: object
          anyOf:
          - $ref: '#/components/schemas/BackboneRule'
          - $ref: '#/components/schemas/TimeFilter'
    BackboneProperty:
      type: object
      properties:
        alias:
          type: string
        property:
          description: Property field name. Property fields will be returned in the
            API response.
          type: string
          example: "ingress_throughput, egress_throughput, ingress_traffic, egress_traffic,backbone_name, backbone_id, event_time, region"
        function:
          description: Operations that need to be run on the property field. Operations
            can be run only on number properties.
          type: string
          example: "sum, avg"
    BackboneRule:
      type: object
      properties:
        property:
          description: Filter property field that is one of the example values
          type: string
          example: "backbone_name,backbone_id, region"
        operator:
          description: Filter operator that is one of the example values and is run
            on the property field
          type: string
          example: in
        values:
          description: Filter property value
          type: array
          items:
            type: string
          example: SP_Backbone1 if property is backbone_name
    Bandwidth:
      enum:
      - BPS_5G
      - BPS_10G
      - BPS_20G
      - BPS_50G
      type: string
    ConnectionEntry:
      required:
      - name
      - partnerName
      - partnerEmail
      - region
      - edgeAvailability
      - bandwidth
      - bgpPeerAsn
      type: object
      properties:
        id:
          type: string
        name:
          pattern: \S
          type: string
        partnerName:
          pattern: \S
          type: string
        partnerEmail:
          pattern: \S
          type: string
        region:
          pattern: \S
          type: string
        edgeAvailability:
          $ref: '#/components/schemas/EdgeAvailability'
        bandwidth:
          $ref: '#/components/schemas/Bandwidth'
        pairingKey:
          type: string
        bgpPeerAsn:
          format: int64
          type: integer
        bgpPeerIp:
          type: string
        cloudRouterAsn:
          format: int64
          type: integer
        cloudRouterIp:
          type: string
        med:
          format: int64
          type: integer
        status:
          type: string
        state:
          type: string
        msg:
          type: string
        tenantCount:
          format: int64
          type: integer
        tenants:
          type: array
          items:
            type: string
        permittedActions:
          type: array
          items:
            $ref: '#/components/schemas/SpInterconnectActions'
        monitorInfo:
          type: object
        upSince:
          format: int64
          type: integer
        bgpPeerStatus:
          type: string
        spInterconnectName:
          type: string
    ConnectionFilter:
      required:
      - operator
      type: object
      properties:
        operator:
          description: Always set to AND
          type: string
        rules:
          type: array
          items:
            type: object
          anyOf:
          - $ref: '#/components/schemas/ConnectionRule'
          - $ref: '#/components/schemas/TimeFilter'
    ConnectionProperty:
      type: object
      properties:
        alias:
          type: string
        property:
          description: Property field name. Property fields will be returned in the
            API response.
          type: string
          example: "ingress_throughput, egress_throughput, ingress_traffic, egress_traffic,connection_name, connection_id, event_time"
        function:
          description: Operations that need to be run on the property field. Operations
            can be run only on number properties.
          type: string
          example: "sum, avg"
    ConnectionRule:
      type: object
      properties:
        property:
          description: Filter property field that is one of the example values
          type: string
          example: "connection_name, connection_id,backbone_name,backbone_id,event_time"
        operator:
          description: Filter operator that is one of the example values and is run
            on the property field
          type: string
          example: in
        values:
          description: Filter property value
          type: array
          items:
            type: string
          example: Connection1 if property is connection_name
    ConnectionStats:
      type: object
      properties:
        pending:
          format: int64
          type: integer
        staging:
          format: int64
          type: integer
        active:
          format: int64
          type: integer
        failed:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
        totalBandwidth:
          type: string
    EdgeAvailability:
      enum:
      - REDUNDANT
      - ZONE1
      - ZONE2
      type: string
    IPBlockEntry:
      required:
        - edgeLocation
        - cidr
      type: object
      properties:
        edgeLocation:
          pattern: \S
          type: string
        cidr:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            type: string
    IPPoolEntry:
      required:
        - name
        - region
        - ipProvider
      type: object
      properties:
        name:
          pattern: \S
          type: string
        region:
          pattern: \S
          type: string
        ipBlocks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IPBlockEntry'
        ipProvider:
          $ref: '#/components/schemas/IPProvider'
        spContactEmail:
          type: string
    IPProvider:
      enum:
        - SP
        - PANW
      type: string
    RequestBody_Backbone:
      required:
      - properties
      - filter
      type: object
      properties:
        properties:
          description: List of property json objects
          type: array
          items:
            $ref: '#/components/schemas/BackboneProperty'
        filter:
          allOf:
          - $ref: '#/components/schemas/BackboneFilter'
          - description: filter json object
    RequestBody_Connection:
      required:
      - properties
      - filter
      type: object
      properties:
        properties:
          description: List of property json objects
          type: array
          items:
            $ref: '#/components/schemas/ConnectionProperty'
        filter:
          allOf:
          - $ref: '#/components/schemas/ConnectionFilter'
          - description: filter json object
    FilterRule:
      type: object
    Sort:
      type: object
      properties:
        order:
          description: Sort Order for the property
          type: string
          example: "desc, asc"
    SpInterconnectActions:
      enum:
      - DELETE_CONNECTION
      type: string
    TimeFilter:
      type: object
      properties:
        operator:
          description: Filter operator that is one of the example values and is run
            on the property field
          type: string
          example: "gt, lt, last_n_minutes, last_n_hours, last_n_days"
        property:
          description: Filter property field that is one of the example values
          type: string
          example: "event_time, update_time, updated_time"
        values:
          description: Filter property value
          type: array
          items:
            type: string
          example: "minute, hour or day counts if property is event_time"


