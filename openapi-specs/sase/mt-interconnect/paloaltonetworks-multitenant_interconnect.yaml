components:
  schemas:
    AssignIPPoolEntry:
      properties:
        ipPoolId:
          pattern: \S
          type: string
      required:
      - ipPoolId
      type: object
    BackboneEntryRequest:
      properties:
        name:
          pattern: \S
          type: string
      required:
      - name
      type: object
    BackboneFilter:
      properties:
        operator:
          description: Always set to AND
          type: string
        rules:
          anyOf:
          - $ref: '#/components/schemas/BackboneRule'
          - $ref: '#/components/schemas/TimeFilter'
          items:
            type: object
          type: array
      required:
      - operator
      type: object
    BackboneProperty:
      properties:
        alias:
          type: string
        function:
          description: Operations that need to be run on the property field. Operations
            can be run only on number properties.
          example: sum, avg
          type: string
        property:
          description: Property field name. Property fields will be returned in the
            API response.
          example: ingress_throughput, egress_throughput, ingress_traffic, egress_traffic,backbone_name,
            backbone_id, event_time, region
          type: string
      type: object
    BackboneRule:
      properties:
        operator:
          description: Filter operator that is one of the example values and is run
            on the property field
          example: in
          type: string
        property:
          description: Filter property field that is one of the example values
          example: backbone_name,backbone_id, region
          type: string
        values:
          description: Filter property value
          example: SP_Backbone1 if property is backbone_name
          items:
            type: string
          type: array
      type: object
    Bandwidth:
      enum:
      - BPS_5G
      - BPS_10G
      - BPS_20G
      - BPS_50G
      type: string
    ConnectionEntryRequest:
      properties:
        bandwidth:
          $ref: '#/components/schemas/Bandwidth'
        bgpPeerAsn:
          format: int64
          type: integer
        haRegion:
          type: string
        name:
          pattern: \S
          type: string
        partnerEmail:
          pattern: \S
          type: string
        partnerName:
          pattern: \S
          type: string
        region:
          pattern: \S
          type: string
      required:
      - name
      - partnerName
      - partnerEmail
      - region
      - bandwidth
      - bgpPeerAsn
      type: object
    ConnectionFilter:
      properties:
        operator:
          description: Always set to AND
          type: string
        rules:
          anyOf:
          - $ref: '#/components/schemas/ConnectionRule'
          - $ref: '#/components/schemas/TimeFilter'
          items:
            type: object
          type: array
      required:
      - operator
      type: object
    ConnectionProperty:
      properties:
        alias:
          type: string
        function:
          description: Operations that need to be run on the property field. Operations
            can be run only on number properties.
          example: sum, avg
          type: string
        property:
          description: Property field name. Property fields will be returned in the
            API response.
          example: ingress_throughput, egress_throughput, ingress_traffic, egress_traffic,connection_name,
            connection_id, event_time
          type: string
      type: object
    ConnectionRule:
      properties:
        operator:
          description: Filter operator that is one of the example values and is run
            on the property field
          example: in
          type: string
        property:
          description: Filter property field that is one of the example values
          example: connection_name, connection_id,backbone_name,backbone_id,event_time
          type: string
        values:
          description: Filter property value
          example: Connection1 if property is connection_name
          items:
            type: string
          type: array
      type: object
    IPBlockEntry:
      properties:
        cidr:
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        edgeLocation:
          pattern: \S
          type: string
      required:
      - edgeLocation
      - cidr
      type: object
    IPPoolEntry:
      properties:
        haRegion:
          type: string
        ipBlocks:
          items:
            $ref: '#/components/schemas/IPBlockEntry'
          type: array
          uniqueItems: true
        ipProvider:
          $ref: '#/components/schemas/IPProvider'
        name:
          pattern: \S
          type: string
        region:
          pattern: \S
          type: string
        spContactEmail:
          type: string
      required:
      - name
      - region
      - ipProvider
      type: object
    IPProvider:
      enum:
      - SP
      - PANW
      type: string
    RequestBody_Backbone:
      properties:
        filter:
          allOf:
          - $ref: '#/components/schemas/BackboneFilter'
          - description: filter json object
        properties:
          description: List of property json objects
          items:
            $ref: '#/components/schemas/BackboneProperty'
          type: array
      required:
      - properties
      - filter
      type: object
    RequestBody_Connection:
      properties:
        filter:
          allOf:
          - $ref: '#/components/schemas/ConnectionFilter'
          - description: filter json object
        properties:
          description: List of property json objects
          items:
            $ref: '#/components/schemas/ConnectionProperty'
          type: array
      required:
      - properties
      - filter
      type: object
    TimeFilter:
      properties:
        operator:
          description: Filter operator that is one of the example values and is run
            on the property field
          example: gt, lt, last_n_minutes, last_n_hours, last_n_days
          type: string
        property:
          description: Filter property field that is one of the example values
          example: event_time, update_time, updated_time
          type: string
        values:
          description: Filter property value
          example: minute, hour or day counts if property is event_time
          items:
            type: string
          type: array
      type: object
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
info:
  contact:
    email: support@paloaltonetworks.com
  description: "This Open API spec file represents the APIs available for\n[Palo Alto\
    \ Networks Interconnect](https://docs.paloaltonetworks.com/NEED-URL) APIs. The\
    \ Service Provider(SP) Interconnect API allows you to use SP Backbones like BT,\
    \ Orange, AT&T, and more for directing Prisma Access egress traffic.\nWithout\
    \ the SP Interconnect, Prisma Access egress traffic relies on public cloud providers\
    \ like GCP, AWS, and Azure for network backbone connectivity. \nThe SP Interconnect\
    \ API offers several benefits, including enhanced security, optimized network\
    \ costs, and realibility. \nYou can easily manage traffic routing preferences\
    \ on a per-SP and per-Prisma Access location or region basis, ensuring flexibility\
    \ and efficiency in network operations.\n\nThese APIs use the common SASE authentication\
    \ mechanism and base URL. See the\n[Prisma SASE API Get Started](https://pan.dev/sase/docs/getstarted)\
    \ guide for more information.\n\nThis Open API spec file was created on July 16,\
    \ 2024. To check for a more recent version of this file, see\n[Interconnect APIs\
    \ on pan.dev](https://pan.dev/sase/api/mt-sp-interconnect/mt-interconnect-api.html).\n\
    \n\xA9 2024 Palo Alto Networks, Inc. Palo Alto Networks is a registered trademark\
    \ of Palo\nAlto Networks. A list of our trademarks can be found at\n\n[https://www.paloaltonetworks.com/company/trademarks.html](https://www.paloaltonetworks.com/company/trademarks.html)\n\
    \nAll other marks mentioned herein may be trademarks of their respective companies.\n"
  title: Multitenant Interconnect APIs
  version: '1.0'
openapi: 3.0.2
paths:
  /mt/monitor/v1/interconnect/backbones:
    get:
      description: 'Lists all the created backbones along with the backbone ID.

        '
      operationId: get-mt-monitor-v1-interconnect-backbones
      responses:
        '200':
          content:
            application/json:
              examples:
                Get all backbone for a particular tsgId:
                  value:
                    data:
                    - connectionStats:
                        active: 1
                        failed: 2
                        pending: 3
                        staging: 4
                        total: 10
                        totalBandwidth: 0Mbps
                      connections:
                      - bandwidth: BPS_50M
                        bgpPeerAsn: 16550
                        bgpPeerBfdMinReceiveInterval: 1000
                        bgpPeerBfdMinTransmitInterval: 1000
                        bgpPeerBfdMultiplier: 5
                        bgpPeerBfdSessionInitMode: PASSIVE
                        bgpPeerMd5AuthEnabled: true
                        bgpPeerMd5AuthKey: authKey
                        edgeAvailability: REDUNDANT
                        haRegion: us-west2
                        id: 0df743a9-05e5-40b7-bea7-8882560af564
                        name: abc-edge-1
                        partnerEmail: sp@mail.com
                        partnerName: sp_abc_name
                        region: us-central1
                        state: CREATED_CONNECTION
                        status: PENDING
                      id: 3113b3ac-f808-42ba-afc0-6a94338cd61f
                      name: backbone-name
                      status: STAGING
                      tenants:
                      - '1234'
                      - '5678'
                    requestId: dab32ea4-a388-4886-b4f8-491d7ab10e4b
          description: Success
        '400':
          description: Bad Request
      security:
      - Bearer: []
      summary: List backbones
      tags:
      - Backbone
    post:
      description: "You can create a backbone by providing a name. \n"
      operationId: post-mt-monitor-v1-interconnect-backbones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackboneEntryRequest'
      responses:
        '200':
          content:
            application/json:
              examples:
                Add a backbone:
                  value:
                    data:
                      id: 8c2f06b2-3e71-4833-9cc4-7c28af986630
                      name: backbone_name9
                    requestId: e1bff5ee-3478-4f74-bcac-ddf14670ef5d
          description: Success
        '400':
          content:
            application/json:
              examples:
                Add a backbone with invalid payload:
                  value:
                    error:
                      errorCode: 50001
                      errorType: VALIDATION_ERROR
                      httpStatus: 400
                      msg: Backbone name is empty!
                    requestId: 432568e0-05e2-4baa-8595-ed6bb4f98b64
          description: Bad Request
        '409':
          content:
            application/json:
              examples:
                Add an already existing backbone:
                  value:
                    error:
                      errorCode: 50003
                      errorType: VALIDATION_ERROR
                      httpStatus: 409
                      msg: Backbone with name already exists!
                    requestId: 432568e0-05e2-4baa-8595-ed6bb4f98b64
          description: Conflict
        '500':
          content:
            application/json:
              examples:
                Add backbone failed due to internal error:
                  value:
                    error:
                      errorCode: 50002
                      errorType: INTERNAL_ERROR
                      httpStatus: 500
                      msg: Failed to add Backbone in db
                    requestId: 432568e0-05e2-4baa-8595-ed6bb4f98b64
          description: Server Error
      security:
      - Bearer: []
      summary: Create backbone
      tags:
      - Backbone
  /mt/monitor/v1/interconnect/backbones/{backboneId}:
    delete:
      description: "Delete a backbone using an ID. You can get the ID when you create\
        \ a backbone. \n"
      operationId: delete-mt-monitor-v1-interconnect-backbones-backboneid
      parameters:
      - in: path
        name: backboneId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Delete Backbone:
                  value:
                    data: Successfully Deleted Backbone
                    requestId: 7e656271-20f3-4fa4-9c4a-e0f455476fe9
          description: Success
        '400':
          description: Bad Request
        '404':
          content:
            application/json:
              examples:
                Delete Backbone not found:
                  value:
                    error:
                      errorCode: 50004
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Backbone not found!
                    requestId: 33a4acfb-d3ee-491e-96ce-ccce0e8d3ba4
          description: Not Found
        '500':
          content:
            application/json:
              examples:
                Delete Backbone failed:
                  value:
                    error:
                      errorCode: 50005
                      errorType: INTERNAL_ERROR
                      httpStatus: 500
                      msg: Backbone delete failed!
                    requestId: 33a4acfb-d3ee-491e-96ce-ccce0e8d3ba4
          description: Server Error
      security:
      - Bearer: []
      summary: Delete backbone
      tags:
      - Backbone
    get:
      description: "You can get details on the backbone using ID. \n"
      operationId: get-mt-monitor-v1-interconnect-backbones-backboneid
      parameters:
      - in: path
        name: backboneId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Get backbone by Id:
                  value:
                    data:
                      connectionStats:
                        active: 0
                        failed: 0
                        pending: 1
                        staging: 0
                        total: 1
                        totalBandwidth: 0Mbps
                      connections:
                      - bandwidth: BPS_50M
                        bgpPeerAsn: 16550
                        bgpPeerBfdMinReceiveInterval: 1000
                        bgpPeerBfdMinTransmitInterval: 1000
                        bgpPeerBfdMultiplier: 5
                        bgpPeerBfdSessionInitMode: PASSIVE
                        bgpPeerMd5AuthEnabled: true
                        bgpPeerMd5AuthKey: authKey
                        edgeAvailability: REDUNDANT
                        haRegion: us-west2
                        id: 0df743a9-05e5-40b7-bea7-8882560af564
                        name: abc-edge-1
                        partnerEmail: sp@mail.com
                        partnerName: sp_abc_name
                        region: us-central1
                        state: CREATED_CONNECTION
                        status: PENDING
                      id: 3113b3ac-f808-42ba-afc0-6a94338cd61f
                      name: backbone-name
                      status: PENDING
                      tenants:
                      - '1234'
                      - '5678'
                    requestId: cc0bf133-e1de-45d9-bdbc-f3fa31696717
          description: Success
        '400':
          description: Bad Request
        '404':
          content:
            application/json:
              examples:
                Get backbone by Id not found:
                  value:
                    error:
                      errorCode: 50004
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Backbone not found!
                    requestId: 176b1c95-9801-4138-b7b7-3d7db83bd274
          description: Not Found
      security:
      - Bearer: []
      summary: Backbone details
      tags:
      - Backbone
  /mt/monitor/v1/interconnect/backbones/{backboneId}/connections:
    get:
      description: "Get connection details using backbone ID. \n"
      operationId: get-mt-monitor-v1-interconnect-backbones-backboneid-connections
      parameters:
      - description: 'Provide backbone ID

          '
        in: path
        name: backboneId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Get Connections in a backbone:
                  value:
                    data:
                    - bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      bgpPeerBfdMinReceiveInterval: 1000
                      bgpPeerBfdMinTransmitInterval: 1000
                      bgpPeerBfdMultiplier: 5
                      bgpPeerBfdSessionInitMode: PASSIVE
                      bgpPeerMd5AuthEnabled: true
                      bgpPeerMd5AuthKey: authKey
                      edgeAvailability: ZONE1
                      haRegion: us-west2
                      id: dee52272-d1e2-4b88-9ebc-a5e70e414d58
                      name: abc-edge-1
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: NOT_STARTED
                      status: PENDING
                    requestId: 36ea5c86-bf56-4e7a-ad8b-19f246532937
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Connection details
      tags:
      - Connection
    post:
      description: 'Create a connection using backbone ID.

        '
      operationId: post-mt-monitor-v1-interconnect-backbones-backboneid-connections
      parameters:
      - description: "Provide backbone ID \n"
        in: path
        name: backboneId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEntryRequest'
      responses:
        '201':
          content:
            application/json:
              examples:
                Add connection in backbone:
                  value:
                    data:
                    - bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      bgpPeerBfdMinReceiveInterval: 1000
                      bgpPeerBfdMinTransmitInterval: 1000
                      bgpPeerBfdMultiplier: 5
                      bgpPeerBfdSessionInitMode: PASSIVE
                      bgpPeerMd5AuthEnabled: true
                      bgpPeerMd5AuthKey: authKey
                      edgeAvailability: REDUNDANT
                      haRegion: us-west2
                      id: 242e46fd-8408-40ea-b815-8dcd4ad73ad5
                      name: abc-edge-1
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: NOT_STARTED
                      status: enum(PENDING/STAGING/ACTIVE/FAILED)
                      tenants: 0
                    - bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      bgpPeerBfdMinReceiveInterval: 1000
                      bgpPeerBfdMinTransmitInterval: 1000
                      bgpPeerBfdMultiplier: 5
                      bgpPeerBfdSessionInitMode: PASSIVE
                      bgpPeerMd5AuthEnabled: true
                      bgpPeerMd5AuthKey: authKey
                      edgeAvailability: REDUNDANT
                      haRegion: us-west2
                      id: 5982d9c3-2bce-4e21-b9ae-ad769e10c939
                      name: abc-edge-2
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: NOT_STARTED
                      status: enum(PENDING/STAGING/ACTIVE/FAILED)
                      tenants: 0
                    requestId: 9b1ee5d1-0912-4aca-a8cd-b1fc1d662f0c
          description: Success
        '400':
          description: Bad Request
        '404':
          content:
            application/json:
              examples:
                Add connection, backbone not found:
                  value:
                    error:
                      errorCode: 50004
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Backbone not found!
                    requestId: d42dba1a-23f1-4818-813b-2da9f35c95bb
          description: Bad Request
        '500':
          content:
            application/json:
              examples:
                Add connection failed in GCP:
                  value:
                    error:
                      errorCode: 50020
                      errorType: INTERNAL_ERROR
                      httpStatus: 500
                      msg: Failed adding Cloud Router in GCP!
                    requestId: d42dba1a-23f1-4818-813b-2da9f35c95bb
          description: Server Error
      security:
      - Bearer: []
      summary: Create Connection
      tags:
      - Connection
  /mt/monitor/v1/interconnect/backbones/{backboneId}/connections/{connectionId}:
    delete:
      description: "Delete a connection using backbone ID. \n"
      operationId: delete-mt-monitor-v1-interconnect-backbones-backboneid-connections-connectionid
      parameters:
      - description: 'Provide backbone ID

          '
        in: path
        name: backboneId
        required: true
        schema:
          type: string
      - in: path
        name: connectionId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Delete Backbone:
                  value:
                    data: Successfully Deleted Connection
                    requestId: 7e656271-20f3-4fa4-9c4a-e0f455476fe9
          description: Success
        '400':
          description: Bad Request
        '404':
          content:
            application/json:
              examples:
                Delete Connection not found:
                  value:
                    error:
                      errorCode: 50007
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Connection not found!
                    requestId: cf32af05-7df6-4dd2-b27e-7b6ef2683145
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Delete Connection
      tags:
      - Connection
    get:
      description: 'Get connection details using ID.

        '
      operationId: get-mt-monitor-v1-interconnect-backbones-backboneid-connections-connectionid
      parameters:
      - description: 'Provide backbone ID

          '
        in: path
        name: backboneId
        required: true
        schema:
          type: string
      - in: path
        name: connectionId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Get Connection by Id:
                  value:
                    data:
                      bandwidth: BPS_50M
                      bgpPeerAsn: 16550
                      bgpPeerBfdMinReceiveInterval: 1000
                      bgpPeerBfdMinTransmitInterval: 1000
                      bgpPeerBfdMultiplier: 5
                      bgpPeerBfdSessionInitMode: PASSIVE
                      bgpPeerMd5AuthEnabled: true
                      bgpPeerMd5AuthKey: authKey
                      edgeAvailability: ZONE1
                      haRegion: us-west2
                      id: dee52272-d1e2-4b88-9ebc-a5e70e414d58
                      name: abc-edge-1
                      partnerEmail: sp@mail.com
                      partnerName: sp_abc_name
                      region: us-central1
                      state: CREATED_CONNECTION
                      status: PENDING
                    requestId: 138de731-25c2-4001-8ea5-d81992c146d7
          description: Success
        '400':
          description: Bad Request
        '404':
          content:
            application/json:
              examples:
                Get connection by Id not found:
                  value:
                    error:
                      errorCode: 50007
                      errorType: NOT_FOUND
                      httpStatus: 404
                      msg: Connection not found!
                    requestId: 7c066854-29e8-43a9-b5ae-052362693578
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Connection details by ID
      tags:
      - Connection
  /mt/monitor/v1/interconnect/ip-pool:
    get:
      description: "Get details of all the IP Pools. \n"
      operationId: get-mt-monitor-v1-interconnect-ip-pool
      responses:
        '200':
          content:
            application/json:
              examples:
                List IP Pools:
                  value:
                    data:
                    - haRegion: us-west1
                      id: 9c68ad1e-5112-4dd2-9b8d-b55708dd2f00
                      ipBlocks:
                      - cidr:
                        - 14.3.0.0/24
                        - 14.1.0.0/24
                        displayName: US West
                        edgeLocation: us-west-1
                      - cidr:
                        - 14.1.0.0/24
                        displayName: US Southwest
                        edgeLocation: us-west-201
                      ipProvider: SP
                      name: demo-1
                      permittedActions:
                      - UPDATE_IP_POOL
                      region: us-west2
                      state: SUBNETWORK_UPDATE_CIDR_COMPLETE
                      status: READY
                      tsgId: '1091039496'
                    - id: a55d7799-997d-4cb3-8d68-318f1909b842
                      ipBlocks:
                      - cidr:
                        - 4.56.78.0/25
                        displayName: Senegal
                        edgeLocation: senegal
                      ipProvider: SP
                      name: sample-24
                      permittedActions:
                      - ASSIGN_IP_POOL
                      - DELETE_IP_POOL
                      - UPDATE_IP_POOL
                      region: europe-west1
                      state: NOT_STARTED
                      status: PENDING
                      tsgId: '1091039496'
                    requestId: 86062188-ccb4-4d22-8c00-de0a49fed038
          description: Success
        '400':
          description: Bad Request
      security:
      - Bearer: []
      summary: IP Pools details
      tags:
      - IPPool
    post:
      description: 'Create a new IP Pool by selecting either Prisma Access or get
        your own IP.

        '
      operationId: post-mt-monitor-v1-interconnect-ip-pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPPoolEntry'
      responses:
        '201':
          content:
            application/json:
              examples:
                Add an IP Pool:
                  value:
                    data:
                      haRegion: us-west2
                      id: 7673a661-a98b-4202-b70a-8edc3934a3f5
                      ipBlocks:
                      - cidr:
                        - 21.58.1.0/29
                        edgeLocation: mexico-central
                      ipProvider: SP
                      name: ip-pool-test
                      permittedActions:
                      - ASSIGN_IP_POOL
                      - DELETE_IP_POOL
                      - UPDATE_IP_POOL
                      region: us-south1
                      state: NOT_STARTED
                      status: PENDING
                      tsgId: '1091039496'
                    requestId: a097e994-e9e2-4b7a-8c52-606f9a60b42b
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Internal Error
      security:
      - Bearer: []
      summary: Create IP Pool
      tags:
      - IPPool
  /mt/monitor/v1/interconnect/ip-pool/assign:
    post:
      description: "After you create an IP Pool, you can assign a region and the status\
        \ becomes active. \nNote: Once you assign an IP Pool, you cannot update or\
        \ delete an IP Pool. \n"
      operationId: post-mt-monitor-v1-interconnect-ip-pool-assign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignIPPoolEntry'
      responses:
        '200':
          content:
            application/json:
              examples:
                Assign an IP Pool:
                  value:
                    data:
                      haRegion: us-west2
                      id: 7673a661-a98b-4202-b70a-8edc3934a3f5
                      ipBlocks:
                      - cidr:
                        - 21.58.1.0/29
                        displayName: Mexico Central
                        edgeLocation: mexico-central
                      ipProvider: SP
                      name: ip-pool-test
                      permittedActions: []
                      region: us-south1
                      state: SUBNETWORK_UPDATE_CIDR_IN_PROGRESS
                      status: IN_PROGRESS
                      tsgId: '1091039496'
                    requestId: 6eb154b3-5ac0-441c-a8e4-a092f5b5b588
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Internal Error
      security:
      - Bearer: []
      summary: Assign IP Pool
      tags:
      - IPPool
  /mt/monitor/v1/interconnect/ip-pool/region:
    get:
      description: 'Get IP Pool regions and edge locations.

        '
      operationId: get-mt-monitor-v1-interconnect-ip-pool-region
      responses:
        '200':
          content:
            application/json:
              examples:
                Get IP Pool regions/edge locations:
                  value:
                    data:
                    - edgeLocation:
                      - displayName: US Southwest
                        edgeLocation: us-west-201
                      - displayName: US West
                        edgeLocation: us-west-1
                      region: us-west2
                    - edgeLocation:
                      - displayName: US Central West
                        edgeLocation: us-west-3
                      haRegion: us-west2
                      region: us-west3
                    requestId: e459bba9-ca17-4bfa-a55a-f7305a7e8f75
          description: Success
      security:
      - Bearer: []
      summary: IP Pool regions
      tags:
      - IPPool
  /mt/monitor/v1/interconnect/ip-pool/{ipPoolId}:
    delete:
      description: 'Delete an IP Pool using an ID.

        '
      operationId: delete-mt-monitor-v1-interconnect-ip-pool-ippoolid
      parameters:
      - description: 'Provide IP Pool ID

          '
        in: path
        name: ipPoolId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Delete IP Pool by id:
                  value:
                    data: IP Pool successfully deleted
                    requestId: e34443d5-dfbd-482b-a76c-5d753034efc0
          description: Success
      security:
      - Bearer: []
      summary: Delete IP Pool
      tags:
      - IPPool
    get:
      description: 'Get IP pool details by prividing an ID.

        '
      operationId: get-mt-monitor-v1-interconnect-ip-pool-ippoolid
      parameters:
      - description: 'Provide IP Pool ID

          '
        in: path
        name: ipPoolId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Get IP Pool by id:
                  value:
                    data:
                      haRegion: us-west1
                      id: 9c68ad1e-5112-4dd2-9b8d-b55708dd2f00
                      ipBlocks:
                      - cidr:
                        - 14.1.0.0/24
                        cidrInUse:
                        - 14.1.0.0/24
                        displayName: US Southwest
                        edgeLocation: us-west-201
                      - cidr:
                        - 14.3.0.0/24
                        - 14.1.0.0/24
                        cidrInUse:
                        - 14.3.0.0/24
                        - 14.1.0.0/24
                        displayName: US West
                        edgeLocation: us-west-1
                      ipProvider: SP
                      name: demo-1
                      permittedActions:
                      - UPDATE_IP_POOL
                      region: us-west2
                      state: SUBNETWORK_UPDATE_CIDR_COMPLETE
                      status: READY
                      tsgId: '1091039496'
                    requestId: adfa0a27-fe75-45ed-bf6d-48d82816f322
          description: Success
        '400':
          description: Bad Request
      security:
      - Bearer: []
      summary: IP Pool by ID
      tags:
      - IPPool
    put:
      description: 'Update an IP Pool using an ID.

        '
      operationId: put-mt-monitor-v1-interconnect-ip-pool-ippoolid
      parameters:
      - description: 'Provide IP Pool ID

          '
        in: path
        name: ipPoolId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPPoolEntry'
      responses:
        '200':
          content:
            application/json:
              examples:
                Update IP Pool:
                  value: "{\n      \"data\": {\n          \"id\": \"7673a661-a98b-4202-b70a-8edc3934a3f5\"\
                    ,\n          \"ipBlocks\": [\n              {\n              \
                    \    \"cidr\": [\n                      \"21.58.2.0/29\"\n   \
                    \               ],\n                  \"displayName\": \"Mexico\
                    \ Central\",\n                  \"edgeLocation\": \"mexico-central\"\
                    \n              }\n          ],\n          \"ipProvider\": \"\
                    SP\",\n          \"name\": \"ip-pool-test\",\n          \"permittedActions\"\
                    : [],\n          \"region\": \"us-south1\",\n          \"state\"\
                    : \"NOT_STARTED\",\n          \"status\": \"PENDING\"\n      \
                    \    \"tsgId\": \"1091039496\"\n      },\n      \"requestId\"\
                    : \"6eb154b3-5ac0-441c-a8e4-a092f5b5b588\"\n}"
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Internal Error
      security:
      - Bearer: []
      summary: Update IP Pool
      tags:
      - IPPool
  /mt/monitor/v1/interconnect/monitor/backbones/theatres:
    get:
      description: 'Monitor a group of regions.

        '
      operationId: get-mt-monitor-v1-interconnect-monitor-backbones-theatres
      parameters:
      - in: query
        name: backboneId
        schema:
          type: string
      - in: query
        name: tsgId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Theatre to Region Mapping:
                  value:
                  - region:
                    - Test
                    - Test1
                    theatre: Theatre1
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Monitor regions
      tags:
      - BackboneMonitoring
  /mt/monitor/v1/interconnect/monitor/backbones/throughput:
    post:
      description: "Provides comprehensive data on the rate of ingress and egress\
        \ data traffic, offering insights into bandwidth utilization and network performance.\
        \ \n"
      operationId: post-mt-monitor-v1-interconnect-monitor-backbones-throughput
      requestBody:
        content:
          application/json:
            examples:
              Throughput By Backbone:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: backbone_id
                      values:
                      - '1'
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - property: event_time
                  - property: egress_throughput
                  - property: ingress_throughput
              Throughput By Region:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: region
                      values:
                      - us-east1
                      - us-west1
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: region
                  - property: event_time
                  - property: egress_throughput
                  - property: ingress_throughput
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
      responses:
        '200':
          content:
            application/json:
              examples:
                Throughput By Backbone:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                  - backbone_id: 10
                    backbone_name: Test
                    egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                Throughput By Region:
                  value:
                  - egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                    region: us-west1
                  - egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                    region: us-west2
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Ingress/Egress throughput
      tags:
      - BackboneMonitoring
  /mt/monitor/v1/interconnect/monitor/backbones/throughput/{tsgId}:
    post:
      description: "Provides detailed measurements of the rate at which data is transmitted\
        \ into and out of a network for \neach individual tenant within a multi-tenant\
        \ environment.\n"
      operationId: post-mt-monitor-v1-interconnect-monitor-backbones-throughput-tsgid
      parameters:
      - description: "A sub-tenant TSG ID retrieves and provides the unique indentifier\
          \ (TSG ID) associated with a specific sub-tenant within the multi-tenant\
          \ architecture, \nproviding precise tenant management and resource allocation.\
          \ \n"
        example: 123456789
        in: path
        name: tsgId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              Throughput By Backbone per Tenant:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: backbone_id
                      values:
                      - '1'
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - property: event_time
                  - property: egress_throughput
                  - property: ingress_throughput
              Throughput By Region per Tenant:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: region
                      values:
                      - us-east1
                      - us-west1
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: region
                  - property: event_time
                  - property: egress_throughput
                  - property: ingress_throughput
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
      responses:
        '200':
          content:
            application/json:
              examples:
                Throughput By Backbone per Tenant:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                  - backbone_id: 10
                    backbone_name: Test
                    egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                Throughput By Region per Tenant:
                  value:
                  - egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                    region: us-west1
                  - egress_throughput: 100.0
                    event_time: 34567890
                    ingress_throughput: 89.0
                    region: us-west2
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Ingress/Egress throughput by tenant
      tags:
      - BackboneMonitoring
  /mt/monitor/v1/interconnect/monitor/backbones/traffic:
    post:
      description: "Provides details on ingress/egress network traffic specific to\
        \ each tenant within a multi-tenant environment. \n"
      operationId: post-mt-monitor-v1-interconnect-monitor-backbones-traffic
      parameters:
      - description: "Duration for which the network or application state is considered\
          \ valid. \n"
        example: false
        in: query
        name: lifeTime
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              Backbone Data Transfer Over Time:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - function: sum
                    property: egress_traffic
                  - function: sum
                    property: ingress_traffic
              Backbone Egress Data Transfer:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - function: sum
                    property: egress_traffic
              Backbone Egress Data Transfer Lifetime:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: lessThan
                      property: event_time
                      values:
                      - 1234567890
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - function: sum
                    property: egress_traffic
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
      responses:
        '200':
          content:
            application/json:
              examples:
                Backbone Data Transfer Over Time:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
                    event_time: 34567890
                    ingress_traffic: 89.0
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
                    event_time: 34567987
                    ingress_traffic: 89.0
                Backbone Egress Data Transfer:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
                Backbone Egress Data Transfer Lifetime:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Ingress/Egress traffic
      tags:
      - BackboneMonitoring
  /mt/monitor/v1/interconnect/monitor/backbones/traffic/{tsgId}:
    post:
      description: 'Retrieves the ingress/egress traffic data categorized by tenant.

        '
      operationId: post-mt-monitor-v1-interconnect-monitor-backbones-traffic-tsgid
      parameters:
      - description: "A sub-tenant TSG ID retrieves and provides the unique indentifier\
          \ (TSG ID) associated with a specific sub-tenant within the multi-tenant\
          \ architecture, \nproviding precise tenant management and resource allocation.\
          \ \n"
        example: 123456789
        in: path
        name: tsgId
        required: true
        schema:
          type: string
      - example: false
        in: query
        name: lifeTime
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              Backbone Data Transfer Over Time per Tenant:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - property: event_time
                  - property: egress_traffic
                  - property: ingress_traffic
              Backbone Egress Data Transfer Lifetime per Tenant:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: lessThan
                      property: event_time
                      values:
                      - 1234567890
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - property: egress_traffic
              Backbone Egress Data Transfer per Tenant:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                  properties:
                  - property: backbone_name
                  - property: backbone_id
                  - property: egress_traffic
            schema:
              $ref: '#/components/schemas/RequestBody_Backbone'
      responses:
        '200':
          content:
            application/json:
              examples:
                Backbone Data Transfer Over Time per Tenant:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
                    event_time: 34567890
                    ingress_traffic: 89.0
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
                    event_time: 34567987
                    ingress_traffic: 89.0
                Backbone Egress Data Transfer Lifetime per Tenant:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
                Backbone Egress Data Transfer per Tenant:
                  value:
                  - backbone_id: 10
                    backbone_name: Test
                    egress_traffic: 100.0
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Ingress/Egress traffic by tenant
      tags:
      - BackboneMonitoring
  /mt/monitor/v1/interconnect/monitor/connections/connectionStats:
    post:
      description: "Offers detailed metrics on the performance and realibity of a\
        \ network connection. \n"
      operationId: post-mt-monitor-v1-interconnect-monitor-connections-connectionstats
      requestBody:
        content:
          application/json:
            examples:
              Connections:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                  properties:
                  - property: connection_name
                  - property: backbone_name
                  - function: avg
                    property: egress_throughput
                  - function: avg
                    property: egress_throughput
              Connections Per Backbone:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: backbone_name
                      values:
                      - backbone1
                  properties:
                  - property: connection_name
                  - function: avg
                    property: egress_throughput
                  - function: avg
                    property: ingress_throughput
                  - property: backbone_name
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
      responses:
        '200':
          content:
            application/json:
              examples:
                Connections:
                  value:
                  - backbone_name: backbone1
                    connection_name: connection1
                    egress_throughput: 100.0
                    ingress_throughput: 89.0
                    status: ACTIVE
                    tenants: 5
                    upTime: 123456
                Connections Per Backbone:
                  value:
                  - backbone_name: backbone1
                    connection_name: connection1
                    egress_throughput: 100.0
                    ingress_throughput: 89.0
                    status: ACTIVE
                    tenants: 5
                    upTime: 123456
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Connection statistics
      tags:
      - ConnectionMonitoring
  /mt/monitor/v1/interconnect/monitor/connections/latency:
    post:
      description: "Provides precise measurements of the time delay experienced in\
        \ data transmission across a network connection, \nenabling real-time monitoring\
        \ and optimization of network performance. \n"
      operationId: post-mt-monitor-v1-interconnect-monitor-connections-latency
      requestBody:
        content:
          application/json:
            examples:
              Connection Latency to PA Edge:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: connection_id
                      values:
                      - '12345'
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: region
                  - property: latency
                  - property: event_time
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
      responses:
        '200':
          content:
            application/json:
              examples:
                Connection Latency to PA Edge:
                  value:
                  - connection_name: connection1
                    event_time: 9876547
                    latency: 100.0
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Latency materics
      tags:
      - ConnectionMonitoring
  /mt/monitor/v1/interconnect/monitor/connections/throughput:
    post:
      description: "Provides detailed metrics on the rate of incoming (ingress) and\
        \ outgoing (egress) data traffic, allowing for \nreal-time monitoring and\
        \ analysis of network performance and bandwidth utilization. \n"
      operationId: post-mt-monitor-v1-interconnect-monitor-connections-throughput
      requestBody:
        content:
          application/json:
            examples:
              Ingress Egress Throughput:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: connection_name
                      values:
                      - connection1
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: connection_name
                  - function: avg
                    property: egress_throughput
                  - function: avg
                    property: ingress_throughput
                  - property: connection_id
                  - property: event_time
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
      responses:
        '200':
          content:
            application/json:
              examples:
                Ingress Egress Throughput:
                  value:
                  - connection_id: id1
                    connection_name: connection1
                    egress_throughput: 100.0
                    event_time: 9876547
                    ingress_throughput: 89.0
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Ingress/Egress throughput
      tags:
      - ConnectionMonitoring
  /mt/monitor/v1/interconnect/monitor/connections/traffic:
    post:
      description: "Provides comprehensive data on incoming (ingress) and outgoing\
        \ (egress) netwrok traffic, \nenabling moniotoring and anlysis of traffic\
        \ patterns, bandwidth usage, and network performance. \n"
      operationId: post-mt-monitor-v1-interconnect-monitor-connections-traffic
      requestBody:
        content:
          application/json:
            examples:
              Ingress Egress Data Transfer:
                value:
                  filter:
                    operator: AND
                    rules:
                    - operator: last_n_days
                      property: event_time
                      values:
                      - 7
                    - operator: in
                      property: connection_name
                      values:
                      - connection1
                  histogram:
                    enableEmptyInterval: false
                    property: event_time
                    range: day
                    value: '1'
                  properties:
                  - property: connection_name
                  - function: sum
                    property: egress_traffic
                  - function: sum
                    property: ingress_traffic
                  - property: connection_id
            schema:
              $ref: '#/components/schemas/RequestBody_Connection'
      responses:
        '200':
          content:
            application/json:
              examples:
                Ingress Egress Data Transfer:
                  value:
                  - connection_id: id1
                    connection_name: connection1
                    egress_traffic: 100.0
                    event_time: 9876547
                    ingress_traffic: 89.0
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: Ingress/Egress traffic
      tags:
      - ConnectionMonitoring
  /mt/monitor/v1/interconnect/monitor/ip-pool-usage:
    get:
      description: "Provides a real-time and historical data on the allocation and\
        \ utilization of IP addresses within a specified pool, enabling efficient\
        \ network resource management. \n"
      operationId: get-mt-monitor-v1-interconnect-monitor-ip-pool-usage
      responses:
        '200':
          content:
            application/json:
              examples:
                IP Pool Usage:
                  value:
                  - configuredIps: 768
                    incidentCount: 0
                    location: US West
                    name: anil
                    percentageUsed: 0.0
                    region: us-west2
                    usedIps: 0
          description: Success
        '400':
          description: Bad Request
        '500':
          description: Server Error
      security:
      - Bearer: []
      summary: IP Pool usage
      tags:
      - IPPoolMonitor
  /mt/monitor/v1/interconnect/regions:
    get:
      description: "Get list of all the supported regions and you can use this during\
        \ the creation of a connection. \n"
      operationId: get-mt-monitor-v1-interconnect-regions
      responses:
        '200':
          content:
            application/json:
              examples:
                Get Regions:
                  value:
                    data:
                    - asia-east1
                    - asia-east2
                    - asia-south1
                    - asia-south2
                    - asia-southeast1
                    - asia-southeast2
                    - australia-southeast1
                    - australia-southeast2
                    - europe-north1
                    - europe-southwest1
                    - europe-west1
                    - europe-west2
                    - europe-west3
                    - europe-west4
                    - europe-west6
                    - europe-west8
                    - europe-west9
                    - northamerica-northeast1
                    - northamerica-northeast2
                    - southamerica-east1
                    - southamerica-west1
                    - us-central1
                    - us-east1
                    - us-east4
                    - us-south1
                    - us-west1
                    - us-west2
                    requestId: 06bd35c6-e446-4e2a-96ae-a6b05607084b
          description: Success
      security:
      - Bearer: []
      summary: Supported regions
      tags:
      - Region
servers:
- url: https://api.sase.paloaltonetworks.com
tags:
- description: "A Backbone is a virtual grouping of network connections. It serves\
    \ as the core structure around which other elements like connections and tenants\
    \ are organized. \nManaging a backbone allows you to oversee the connections and\
    \ tenants associated with it, providing a centralized point for monitoring and\
    \ control.\n"
  name: Backbone API
- description: "A Connection represents a link between different network segments\
    \ or regions. Creating and managing connections allows for the integration and\
    \ interaction of various parts of your network infrastructure. \nEach connection\
    \ is associated with a specific backbone, enabling detailed monitoring and management.\
    \ \n"
  name: Connection API
- description: "You can select or assign an IP Pool to a region of your choice from\
    \ the given list. \n"
  name: Region API
- description: "Monitor the performance and status of all backbones. You can track\
    \ egress and ingress throughput, view detailed egress and ingress statistics,\
    \ and monitor egress and ingress throughput by providing tenant information. \n\
    Additionally, you can view egress and ingress statistics by tenant and get an\
    \ autogenerated summary of the backbone's overall performance and status.\n"
  name: Backbone Monitoring API
- description: "Monitor the performance and details of all connections. This includes\
    \ providing connection statistics, latency details, and connection statistics\
    \ through egress and ingress throughput. \nAdditionally, you can monitor egress\
    \ and ingress traffic for each connection.\n"
  name: Connection Monitoring API
- description: "An IP Pool is a collection of IP addresses that can be assigned to\
    \ different regions within your network. You can either use IP address provided\
    \ by Prisma Access or bring your own IP address.\nManaging IP pools includes creating,updating,assigning\
    \ to regions, and deleting IP pools based on your network requirements. \n"
  name: IP Pool API
- description: "Provides details on the IP Pool usage. \n"
  name: IP Pool Monitoring API
